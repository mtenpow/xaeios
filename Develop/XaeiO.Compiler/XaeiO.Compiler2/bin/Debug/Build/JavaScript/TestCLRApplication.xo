<Object><Header><![CDATA[{
  Metadata: {
    Name: {
      Name: "TestCLRApplication",
      Version: "1.0.0.0",
      Culture: ""
    },
    EntryPoint: 0,
    BootMethod: 67,
    Types: [
      {
        Namespace: "TestCLRApplication",
        Name: "Program",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Main",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 0,
            HasThis: false,
            Parameters: [
              {
                Type: 21,
                Name: "args",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Log",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 1,
            HasThis: false,
            Parameters: [
              {
                Type: 22,
                Name: "s",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Assert",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 2,
            HasThis: false,
            Parameters: [
              {
                Type: 22,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 23,
                Name: "condition",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 3,
            HasThis: false,
            Parameters: [
              {
                Type: 16,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 16,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 4,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 0
      },
      {
        Namespace: "",
        Name: "MultiThreadingStressTest",
        BaseType: 1,
        DeclaringType: 0,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 5,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadStarted",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 6,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Work",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 7,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadFinished",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 8,
            HasThis: true,
            Parameters: [
              {
                Type: 23,
                Name: "failed",
                Sequence: 1
              }
            ]
          },
          {
            Name: "AllThreadsFinished",
            ReturnType: 23,
            VTableSlot: -1,
            CodeIndex: 9,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 10,
            HasThis: true,
            Parameters: [
              {
                Type: 16,
                Name: "numberOfThreads",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_numberOfThreads",
            Type: 16,
            Offset: 0
          },
          {
            Name: "_failedThreads",
            Type: 16,
            Offset: 1
          },
          {
            Name: "_startedThreads",
            Type: 16,
            Offset: 2
          },
          {
            Name: "_finishedThreads",
            Type: 16,
            Offset: 3
          }
        ],
        StaticFields: [],
        VTableIndex: 1
      },
      {
        Namespace: "",
        Name: "QuickSortTestSuite",
        BaseType: 1,
        DeclaringType: 0,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestQuickSort",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 11,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "CompareInts",
            ReturnType: 16,
            VTableSlot: -1,
            CodeIndex: 12,
            HasThis: false,
            Parameters: [
              {
                Type: 16,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 16,
                Name: "b",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Sort",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 13,
            HasThis: false,
            Parameters: [
              {
                Type: 24,
                Name: "data",
                Sequence: 1
              },
              {
                Type: 25,
                Name: "comparison",
                Sequence: 2
              }
            ]
          },
          {
            Name: "GetPivotPoint",
            ReturnType: 16,
            VTableSlot: -1,
            CodeIndex: 14,
            HasThis: false,
            Parameters: [
              {
                Type: 16,
                Name: "begPoint",
                Sequence: 1
              },
              {
                Type: 16,
                Name: "endPoint",
                Sequence: 2
              },
              {
                Type: 24,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 25,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: "Sorting",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 15,
            HasThis: false,
            Parameters: [
              {
                Type: 16,
                Name: "beg",
                Sequence: 1
              },
              {
                Type: 16,
                Name: "end",
                Sequence: 2
              },
              {
                Type: 24,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 25,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: "GreaterThanOrEqualTo",
            ReturnType: 23,
            VTableSlot: -1,
            CodeIndex: 16,
            HasThis: false,
            Parameters: [
              {
                Type: 26,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 26,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 25,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: "LessThanOrEqualTo",
            ReturnType: 23,
            VTableSlot: -1,
            CodeIndex: 17,
            HasThis: false,
            Parameters: [
              {
                Type: 26,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 26,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 25,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 18,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 2
      },
      {
        Namespace: "",
        Name: "Comparison`1",
        BaseType: 5,
        DeclaringType: 0,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Invoke",
            ReturnType: 16,
            VTableSlot: 7,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 26,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 26,
                Name: "b",
                Sequence: 2
              }
            ]
          },
          {
            Name: "BeginInvoke",
            ReturnType: 27,
            VTableSlot: 8,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 26,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 26,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 28,
                Name: "callback",
                Sequence: 3
              },
              {
                Type: 1,
                Name: "object",
                Sequence: 4
              }
            ]
          },
          {
            Name: "EndInvoke",
            ReturnType: 16,
            VTableSlot: 9,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 27,
                Name: "result",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "object",
                Sequence: 1
              },
              {
                Type: 29,
                Name: "method",
                Sequence: 2
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 3
      },
      {
        Namespace: "",
        Name: "ClassStructureTestSuite",
        BaseType: 1,
        DeclaringType: 0,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestOverrideInterfaceMethodOfAbstractBaseClass",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 19,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 20,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 4
      },
      {
        Namespace: "",
        Name: "IAdder",
        BaseType: -1,
        DeclaringType: 6,
        IsInterface: true,
        IsAbstract: true,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 16,
            VTableSlot: 0,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 16,
                Name: "x",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 5
      },
      {
        Namespace: "",
        Name: "AdderBase",
        BaseType: 1,
        DeclaringType: 6,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 16,
            VTableSlot: 4,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 16,
                Name: "x",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 21,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 6
      },
      {
        Namespace: "",
        Name: "RegularAdder",
        BaseType: 7,
        DeclaringType: 6,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 16,
            VTableSlot: 4,
            CodeIndex: 22,
            HasThis: true,
            Parameters: [
              {
                Type: 16,
                Name: "x",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 20,
            VTableSlot: -1,
            CodeIndex: 23,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 7
      },
      {
        Namespace: "",
        Name: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [],
        Fields: [],
        StaticFields: [
          {
            Name: "$$method0x600000c-1",
            Type: 18,
            DataIndex: 9
          }
        ],
        VTableIndex: 8
      },
      {
        Namespace: "",
        Name: "__StaticArrayInitTypeSize=24",
        BaseType: 30,
        DeclaringType: 9,
        IsInterface: false,
        IsAbstract: false,
        Methods: [],
        Fields: [],
        StaticFields: [],
        VTableIndex: 10
      }
    ],
    AssemblyReferences: [
      {
        Name: "OSCorlib",
        Version: "2.0.0.0"
      },
      {
        Name: "XaeiOS.Kernel",
        Version: "1.0.0.0"
      }
    ],
    TypeReferences: [
      {
        Namespace: "TestCLRApplication",
        Name: "Program",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "MultiThreadingStressTest",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "QuickSortTestSuite",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "Comparison`1",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "MulticastDelegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "ClassStructureTestSuite",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "AdderBase",
        DeclaringType: 6,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "RegularAdder",
        DeclaringType: 6,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ArgumentException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "Comparison`1",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "IAdder",
        DeclaringType: 6,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "__StaticArrayInitTypeSize=24",
        DeclaringType: 9,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Void",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Array",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "Comparison`1",
        DeclaringType: 0,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "T",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: true
      },
      {
        Namespace: "System",
        Name: "IAsyncResult",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AsyncCallback",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "IntPtr",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ValueType",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Console",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Kernel",
        Name: "Scheduler",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "RuntimeHelpers",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Delegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Monitor",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ArgumentException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "RuntimeHelpers",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "MulticastDelegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeUsageAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Boot",
        Name: "BootManager",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "var",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "VTable",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NativeFunction",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Array",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "RuntimeFieldHandle",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Assembly",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "UIntPtr",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Class",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "ICustomAttributeProvider",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Method",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeTargets",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      }
    ],
    MethodReferences: [
      {
        Type: 0,
        Name: "Main",
        HasThis: false,
        Parameters: [
          0
        ]
      },
      {
        Type: 31,
        Name: "WriteLine",
        HasThis: false,
        Parameters: [
          1
        ]
      },
      {
        Type: 31,
        Name: "WriteLine",
        HasThis: false,
        Parameters: [
          2
        ]
      },
      {
        Type: 2,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          3
        ]
      },
      {
        Type: 2,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 3,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 3,
        Name: "TestQuickSort",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: "TestOverrideInterfaceMethodOfAbstractBaseClass",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 32,
        Name: "ConvertToManagedException",
        HasThis: false,
        Parameters: [
          4
        ]
      },
      {
        Type: 0,
        Name: "Log",
        HasThis: false,
        Parameters: [
          5
        ]
      },
      {
        Type: 0,
        Name: "Assert",
        HasThis: false,
        Parameters: [
          6,
          7
        ]
      },
      {
        Type: 33,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          8
        ]
      },
      {
        Type: 0,
        Name: "AssertEquals",
        HasThis: false,
        Parameters: [
          9,
          10
        ]
      },
      {
        Type: 34,
        Name: "CreateArray",
        HasThis: false,
        Parameters: [
          11,
          12
        ]
      },
      {
        Type: 22,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          13
        ]
      },
      {
        Type: 0,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          14,
          15,
          16
        ]
      },
      {
        Type: 2,
        Name: "AllThreadsFinished",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          14,
          15
        ]
      },
      {
        Type: 11,
        Name: "Sleep",
        HasThis: false,
        Parameters: [
          2
        ]
      },
      {
        Type: 36,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 37,
        Name: "InternalCreate",
        HasThis: false,
        Parameters: [
          17,
          18,
          19
        ]
      },
      {
        Type: 2,
        Name: "Work",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 36,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "ThreadStarted",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 38,
        Name: "Enter",
        HasThis: false,
        Parameters: [
          14
        ]
      },
      {
        Type: 38,
        Name: "Exit",
        HasThis: false,
        Parameters: [
          14
        ]
      },
      {
        Type: 2,
        Name: "ThreadFinished",
        HasThis: true,
        Parameters: [
          21
        ]
      },
      {
        Type: 39,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          8
        ]
      },
      {
        Type: 40,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 40,
        Name: "Add",
        HasThis: true,
        Parameters: [
          22
        ]
      },
      {
        Type: 40,
        Name: "get_Count",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 3,
        Name: "CompareInts",
        HasThis: false,
        Parameters: [
          23,
          24
        ]
      },
      {
        Type: 3,
        Name: "Sort",
        HasThis: false,
        Parameters: [
          25,
          26
        ]
      },
      {
        Type: 41,
        Name: "InitializeArray",
        HasThis: false,
        Parameters: [
          27,
          28
        ]
      },
      {
        Type: 40,
        Name: "get_Item",
        HasThis: true,
        Parameters: [
          29
        ]
      },
      {
        Type: 3,
        Name: "Sorting",
        HasThis: false,
        Parameters: [
          30,
          31,
          32,
          33
        ]
      },
      {
        Type: 3,
        Name: "GetPivotPoint",
        HasThis: false,
        Parameters: [
          34,
          35,
          32,
          33
        ]
      },
      {
        Type: 3,
        Name: "GreaterThanOrEqualTo",
        HasThis: false,
        Parameters: [
          36,
          37,
          38
        ]
      },
      {
        Type: 3,
        Name: "LessThanOrEqualTo",
        HasThis: false,
        Parameters: [
          36,
          37,
          38
        ]
      },
      {
        Type: 40,
        Name: "set_Item",
        HasThis: true,
        Parameters: [
          29,
          39
        ]
      },
      {
        Type: 37,
        Name: "Invoke",
        HasThis: true,
        Parameters: [
          40
        ]
      },
      {
        Type: 8,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 17,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          41
        ]
      },
      {
        Type: 7,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 8,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          41
        ]
      },
      {
        Type: 35,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "GetHashCode",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "Equals",
        HasThis: true,
        Parameters: [
          42
        ]
      },
      {
        Type: 35,
        Name: "Finalize",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 42,
        Name: "Invoke",
        HasThis: true,
        Parameters: [
          40
        ]
      },
      {
        Type: 42,
        Name: "InvokeNative",
        HasThis: true,
        Parameters: [
          40
        ]
      },
      {
        Type: 42,
        Name: "InternalCombine",
        HasThis: true,
        Parameters: [
          17
        ]
      },
      {
        Type: 4,
        Name: "BeginInvoke",
        HasThis: true,
        Parameters: [
          36,
          37,
          43,
          44
        ]
      },
      {
        Type: 4,
        Name: "EndInvoke",
        HasThis: true,
        Parameters: [
          45
        ]
      },
      {
        Type: 7,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          41
        ]
      },
      {
        Type: 34,
        Name: "InitializeMetadata",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 34,
        Name: "CreateAssembly",
        HasThis: false,
        Parameters: [
          46
        ]
      },
      {
        Type: 34,
        Name: "CreateClass",
        HasThis: false,
        Parameters: [
          47,
          48,
          49,
          50,
          51,
          52,
          53
        ]
      },
      {
        Type: 34,
        Name: "CreateMethod",
        HasThis: false,
        Parameters: [
          54,
          48,
          19,
          55
        ]
      },
      {
        Type: 34,
        Name: "CreateConstructor",
        HasThis: false,
        Parameters: [
          54,
          48,
          19
        ]
      },
      {
        Type: 19,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 34,
        Name: "CreateCustomAttribute",
        HasThis: false,
        Parameters: [
          56,
          57
        ]
      },
      {
        Type: 43,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          58
        ]
      },
      {
        Type: 44,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 45,
        Name: "BootModuleEntryPoint",
        HasThis: false,
        Parameters: []
      }
    ],
    ParameterReferences: [
      {
        Type: 21,
        Name: "args",
        Sequence: 1
      },
      {
        Type: 22,
        Name: "",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "numberOfThreads",
        Sequence: 1
      },
      {
        Type: 46,
        Name: "e",
        Sequence: 1
      },
      {
        Type: 22,
        Name: "s",
        Sequence: 1
      },
      {
        Type: 22,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 23,
        Name: "condition",
        Sequence: 2
      },
      {
        Type: 47,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "expected",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "actual",
        Sequence: 2
      },
      {
        Type: 48,
        Name: "elementTypeVTable",
        Sequence: 1
      },
      {
        Type: 49,
        Name: "length",
        Sequence: 2
      },
      {
        Type: 21,
        Name: "",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 2
      },
      {
        Type: 1,
        Name: "",
        Sequence: 3
      },
      {
        Type: 37,
        Name: "d",
        Sequence: 1
      },
      {
        Type: 35,
        Name: "target",
        Sequence: 2
      },
      {
        Type: 50,
        Name: "function",
        Sequence: 3
      },
      {
        Type: 51,
        Name: "threadStart",
        Sequence: 1
      },
      {
        Type: 23,
        Name: "failed",
        Sequence: 1
      },
      {
        Type: 26,
        Name: "item",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "a",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "b",
        Sequence: 2
      },
      {
        Type: 24,
        Name: "data",
        Sequence: 1
      },
      {
        Type: 25,
        Name: "comparison",
        Sequence: 2
      },
      {
        Type: 52,
        Name: "",
        Sequence: 1
      },
      {
        Type: 53,
        Name: "",
        Sequence: 2
      },
      {
        Type: 49,
        Name: "index",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "beg",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "end",
        Sequence: 2
      },
      {
        Type: 24,
        Name: "data",
        Sequence: 3
      },
      {
        Type: 25,
        Name: "comparison",
        Sequence: 4
      },
      {
        Type: 16,
        Name: "begPoint",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "endPoint",
        Sequence: 2
      },
      {
        Type: 26,
        Name: "a",
        Sequence: 1
      },
      {
        Type: 26,
        Name: "b",
        Sequence: 2
      },
      {
        Type: 25,
        Name: "comparison",
        Sequence: 3
      },
      {
        Type: 26,
        Name: "value",
        Sequence: 2
      },
      {
        Type: 21,
        Name: "args",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "x",
        Sequence: 1
      },
      {
        Type: 35,
        Name: "o",
        Sequence: 1
      },
      {
        Type: 28,
        Name: "callback",
        Sequence: 3
      },
      {
        Type: 1,
        Name: "object",
        Sequence: 4
      },
      {
        Type: 27,
        Name: "result",
        Sequence: 1
      },
      {
        Type: 47,
        Name: "name",
        Sequence: 1
      },
      {
        Type: 47,
        Name: "ns",
        Sequence: 1
      },
      {
        Type: 47,
        Name: "name",
        Sequence: 2
      },
      {
        Type: 54,
        Name: "assembly",
        Sequence: 3
      },
      {
        Type: 55,
        Name: "vtableDataPointer",
        Sequence: 4
      },
      {
        Type: 56,
        Name: "elementClass",
        Sequence: 5
      },
      {
        Type: 57,
        Name: "isInterface",
        Sequence: 6
      },
      {
        Type: 57,
        Name: "isArray",
        Sequence: 7
      },
      {
        Type: 56,
        Name: "declaringType",
        Sequence: 1
      },
      {
        Type: 49,
        Name: "vtableSlot",
        Sequence: 4
      },
      {
        Type: 58,
        Name: "attributeProvider",
        Sequence: 1
      },
      {
        Type: 59,
        Name: "constructor",
        Sequence: 2
      },
      {
        Type: 60,
        Name: "validOn",
        Sequence: 1
      }
    ],
    FieldReferences: [
      {
        Type: 9,
        Name: "$$method0x600000c-1",
        IsStatic: true
      }
    ],
    StaticConstructors: []
  },
  Fixups: [
    {
      Description: "System.Void TestCLRApplication.Program::Main(System.String[]) @ 43",
      Offset: 43,
      Type: 9,
      Index: 0
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 535",
      Offset: 492,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Void System.Console::WriteLine(System.Int32) @ 1874",
      Offset: 1339,
      Type: 9,
      Index: 2
    },
    {
      Description: "TestCLRApplication.Program/MultiThreadingStressTest @ 2275",
      Offset: 401,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::.ctor(System.Int32) @ 2421",
      Offset: 146,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::PerformTest() @ 2804",
      Offset: 383,
      Type: 9,
      Index: 4
    },
    {
      Description: "TestCLRApplication.Program/QuickSortTestSuite @ 3195",
      Offset: 391,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::.ctor() @ 3305",
      Offset: 110,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::TestQuickSort() @ 3683",
      Offset: 378,
      Type: 9,
      Index: 6
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite @ 4077",
      Offset: 394,
      Type: 17,
      Index: 6
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::.ctor() @ 4193",
      Offset: 116,
      Type: 9,
      Index: 7
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass() @ 4574",
      Offset: 381,
      Type: 9,
      Index: 8
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 5618",
      Offset: 1044,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 6095",
      Offset: 477,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 6575",
      Offset: 480,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 7284",
      Offset: 709,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program::Assert(System.String,System.Boolean) @ 7758",
      Offset: 474,
      Type: 9,
      Index: 11
    },
    {
      Description: "System.Exception @ 8950",
      Offset: 1192,
      Type: 17,
      Index: 10
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 9075",
      Offset: 125,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 9829",
      Offset: 754,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32) @ 10309",
      Offset: 480,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 11413",
      Offset: 1104,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Object @ 11417",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 11893",
      Offset: 476,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Exception @ 12335",
      Offset: 442,
      Type: 17,
      Index: 10
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 12462",
      Offset: 127,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 13219",
      Offset: 757,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program::.ctor() @ 13693",
      Offset: 474,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Void System.Object::.ctor() @ 14132",
      Offset: 439,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 14550",
      Offset: 418,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::PerformTest() @ 15030",
      Offset: 480,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 15614",
      Offset: 584,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 16136",
      Offset: 522,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 16581",
      Offset: 445,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Threading.Thread @ 16585",
      Offset: 4,
      Type: 17,
      Index: 11
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 17847",
      Offset: 1262,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 18371",
      Offset: 524,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 19736",
      Offset: 1365,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/MultiThreadingStressTest::AllThreadsFinished() @ 20213",
      Offset: 477,
      Type: 9,
      Index: 19
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 21313",
      Offset: 1100,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Void TestCLRApplication.Program::Assert(System.String,System.Boolean) @ 21925",
      Offset: 612,
      Type: 9,
      Index: 11
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 22440",
      Offset: 515,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 22974",
      Offset: 534,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 23474",
      Offset: 500,
      Type: 9,
      Index: 21
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 23707",
      Offset: 233,
      Type: 9,
      Index: 22
    },
    {
      Description: "System.Threading.ThreadStart @ 23999",
      Offset: 292,
      Type: 17,
      Index: 12
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 24211",
      Offset: 212,
      Type: 9,
      Index: 23
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::Work() @ 24224",
      Offset: 13,
      Type: 9,
      Index: 24
    },
    {
      Description: "System.Threading.Thread @ 24608",
      Offset: 384,
      Type: 17,
      Index: 11
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 24808",
      Offset: 200,
      Type: 9,
      Index: 25
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 25624",
      Offset: 816,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadStarted() @ 26110",
      Offset: 486,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 26618",
      Offset: 508,
      Type: 9,
      Index: 27
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 27825",
      Offset: 1207,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 28338",
      Offset: 513,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 28855",
      Offset: 517,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 29248",
      Offset: 393,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 29976",
      Offset: 728,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::Work() @ 30459",
      Offset: 483,
      Type: 9,
      Index: 24
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadStarted() @ 30961",
      Offset: 502,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 31350",
      Offset: 389,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 32771",
      Offset: 1421,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 33299",
      Offset: 528,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 33698",
      Offset: 399,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 34762",
      Offset: 1064,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 35242",
      Offset: 480,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 35762",
      Offset: 520,
      Type: 9,
      Index: 27
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 37265",
      Offset: 1503,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 37987",
      Offset: 722,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/MultiThreadingStressTest::AllThreadsFinished() @ 38464",
      Offset: 477,
      Type: 9,
      Index: 19
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 38980",
      Offset: 516,
      Type: 9,
      Index: 27
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 39507",
      Offset: 527,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 40271",
      Offset: 764,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::.ctor(System.Int32) @ 40748",
      Offset: 477,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Object::.ctor() @ 41227",
      Offset: 479,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.ArgumentException @ 41913",
      Offset: 686,
      Type: 17,
      Index: 13
    },
    {
      Description: "System.Void System.ArgumentException::.ctor(System.String) @ 42085",
      Offset: 172,
      Type: 9,
      Index: 30
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 43057",
      Offset: 972,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::TestQuickSort() @ 43543",
      Offset: 486,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Collections.Generic.List`1<System.Int32> @ 44061",
      Offset: 518,
      Type: 17,
      Index: 14
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 44184",
      Offset: 123,
      Type: 9,
      Index: 31
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 44621",
      Offset: 437,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 45014",
      Offset: 393,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 45409",
      Offset: 395,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 45804",
      Offset: 395,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 46197",
      Offset: 393,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 46598",
      Offset: 401,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 47315",
      Offset: 717,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 48355",
      Offset: 1040,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 48808",
      Offset: 453,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 49342",
      Offset: 534,
      Type: 9,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/Comparison`1<System.Int32> @ 49756",
      Offset: 414,
      Type: 17,
      Index: 15
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 49994",
      Offset: 238,
      Type: 9,
      Index: 23
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 50007",
      Offset: 13,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sort<System.Int32>(System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 50388",
      Offset: 381,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 50837",
      Offset: 449,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 51290",
      Offset: 453,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 51834",
      Offset: 544,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 52246",
      Offset: 412,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Int32 @ 52250",
      Offset: 4,
      Type: 17,
      Index: 16
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}/__StaticArrayInitTypeSize=24 <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}::$$method0x600000c-1 @ 52315",
      Offset: 65,
      Type: 33,
      Index: 0
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array,System.RuntimeFieldHandle) @ 52441",
      Offset: 126,
      Type: 9,
      Index: 36
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 53219",
      Offset: 778,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Collections.Generic.List`1<System.Int32> @ 54261",
      Offset: 1042,
      Type: 17,
      Index: 14
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 54385",
      Offset: 124,
      Type: 9,
      Index: 31
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 55749",
      Offset: 1364,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 56204",
      Offset: 455,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 56738",
      Offset: 534,
      Type: 9,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/Comparison`1<System.Int32> @ 57152",
      Offset: 414,
      Type: 17,
      Index: 15
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 57390",
      Offset: 238,
      Type: 9,
      Index: 23
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 57403",
      Offset: 13,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sort<System.Int32>(System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 57784",
      Offset: 381,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 58235",
      Offset: 451,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 58690",
      Offset: 455,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 59234",
      Offset: 544,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 59964",
      Offset: 730,
      Type: 65,
      Index: 33
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 61102",
      Offset: 1138,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32) @ 61559",
      Offset: 457,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 62186",
      Offset: 627,
      Type: 65,
      Index: 32
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 62789",
      Offset: 603,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Object @ 62793",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 63196",
      Offset: 403,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 63651",
      Offset: 455,
      Type: 9,
      Index: 1
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 64066",
      Offset: 415,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32) @ 64521",
      Offset: 455,
      Type: 9,
      Index: 13
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 65165",
      Offset: 644,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 65625",
      Offset: 460,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 66137",
      Offset: 512,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 66974",
      Offset: 837,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 67457",
      Offset: 483,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 68343",
      Offset: 886,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 68814",
      Offset: 471,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 69394",
      Offset: 580,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 69818",
      Offset: 424,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 70613",
      Offset: 795,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 71118",
      Offset: 505,
      Type: 9,
      Index: 39
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 72792",
      Offset: 1674,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 73302",
      Offset: 510,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo<T>(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 73803",
      Offset: 501,
      Type: 9,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 76039",
      Offset: 2236,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 76552",
      Offset: 513,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo<T>(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 77054",
      Offset: 502,
      Type: 9,
      Index: 41
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 79283",
      Offset: 2229,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 79791",
      Offset: 508,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 80292",
      Offset: 501,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 80751",
      Offset: 459,
      Type: 65,
      Index: 42
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 81840",
      Offset: 1089,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 82353",
      Offset: 513,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo<T>(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 82855",
      Offset: 502,
      Type: 9,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 85100",
      Offset: 2245,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 85613",
      Offset: 513,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo<T>(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 86115",
      Offset: 502,
      Type: 9,
      Index: 41
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 88743",
      Offset: 2628,
      Type: 65,
      Index: 37
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 89251",
      Offset: 508,
      Type: 65,
      Index: 37
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 89758",
      Offset: 507,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 90217",
      Offset: 459,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 91408",
      Offset: 1191,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 91916",
      Offset: 508,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::GetPivotPoint<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 93121",
      Offset: 1205,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 94232",
      Offset: 1111,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 95298",
      Offset: 1066,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 96102",
      Offset: 804,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 96579",
      Offset: 477,
      Type: 9,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 97145",
      Offset: 566,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 97957",
      Offset: 812,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 98431",
      Offset: 474,
      Type: 9,
      Index: 41
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 98994",
      Offset: 563,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 99801",
      Offset: 807,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::.ctor() @ 100272",
      Offset: 471,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void System.Object::.ctor() @ 100730",
      Offset: 458,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 101148",
      Offset: 418,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass() @ 101619",
      Offset: 471,
      Type: 9,
      Index: 8
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder @ 102163",
      Offset: 544,
      Type: 17,
      Index: 8
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::.ctor() @ 102291",
      Offset: 128,
      Type: 9,
      Index: 44
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/IAdder @ 102667",
      Offset: 376,
      Type: 17,
      Index: 17
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 102669",
      Offset: 2,
      Type: 65,
      Index: 45
    },
    {
      Description: "System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32) @ 103089",
      Offset: 420,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 103825",
      Offset: 736,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::.ctor() @ 104296",
      Offset: 471,
      Type: 9,
      Index: 7
    },
    {
      Description: "System.Void System.Object::.ctor() @ 104759",
      Offset: 463,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 105177",
      Offset: 418,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::.ctor() @ 105645",
      Offset: 468,
      Type: 9,
      Index: 46
    },
    {
      Description: "System.Void System.Object::.ctor() @ 106118",
      Offset: 473,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 106536",
      Offset: 418,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 107010",
      Offset: 474,
      Type: 9,
      Index: 47
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 109004",
      Offset: 1994,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::.ctor() @ 109478",
      Offset: 474,
      Type: 9,
      Index: 44
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::.ctor() @ 109984",
      Offset: 506,
      Type: 9,
      Index: 46
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 110681",
      Offset: 697,
      Type: 9,
      Index: 9
    },
    {
      Description: "TestCLRApplication.Program @ 5",
      Offset: 5,
      Type: 18,
      Index: 0
    },
    {
      Description: "System.String System.Object::ToString() @ 58",
      Offset: 53,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 116",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 176",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 246",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program/MultiThreadingStressTest @ 301",
      Offset: 55,
      Type: 18,
      Index: 2
    },
    {
      Description: "System.String System.Object::ToString() @ 379",
      Offset: 78,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 437",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 497",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 567",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program/QuickSortTestSuite @ 622",
      Offset: 55,
      Type: 18,
      Index: 3
    },
    {
      Description: "System.String System.Object::ToString() @ 694",
      Offset: 72,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 752",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 812",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 882",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program/Comparison`1 @ 937",
      Offset: 55,
      Type: 18,
      Index: 4
    },
    {
      Description: "System.String System.Object::ToString() @ 1003",
      Offset: 66,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 1061",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 1121",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 1191",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "System.Object System.MulticastDelegate::Invoke(System.Object[]) @ 1247",
      Offset: 56,
      Type: 10,
      Index: 52
    },
    {
      Description: "System.Object System.MulticastDelegate::InvokeNative(System.Object[]) @ 1329",
      Offset: 82,
      Type: 10,
      Index: 53
    },
    {
      Description: "System.Void System.MulticastDelegate::InternalCombine(System.Delegate) @ 1417",
      Offset: 88,
      Type: 10,
      Index: 54
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 1506",
      Offset: 89,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.IAsyncResult TestCLRApplication.Program/Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) @ 1590",
      Offset: 84,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/Comparison`1::EndInvoke(System.IAsyncResult) @ 1721",
      Offset: 131,
      Type: 10,
      Index: 56
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite @ 1823",
      Offset: 102,
      Type: 18,
      Index: 6
    },
    {
      Description: "System.String System.Object::ToString() @ 1900",
      Offset: 77,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 1958",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 2018",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 2088",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/IAdder @ 2143",
      Offset: 55,
      Type: 18,
      Index: 17
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/AdderBase @ 2337",
      Offset: 194,
      Type: 18,
      Index: 7
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/IAdder @ 2432",
      Offset: 95,
      Type: 18,
      Index: 17
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 2530",
      Offset: 98,
      Type: 66,
      Index: 45
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::AddTen(System.Int32) @ 2543",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.String System.Object::ToString() @ 2685",
      Offset: 142,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 2743",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 2803",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 2873",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder @ 3042",
      Offset: 169,
      Type: 18,
      Index: 8
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/IAdder @ 3140",
      Offset: 98,
      Type: 18,
      Index: 17
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 3238",
      Offset: 98,
      Type: 66,
      Index: 45
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 3251",
      Offset: 13,
      Type: 10,
      Index: 47
    },
    {
      Description: "System.String System.Object::ToString() @ 3396",
      Offset: 145,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 3454",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 3514",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 3584",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 3640",
      Offset: 56,
      Type: 10,
      Index: 47
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF} @ 3756",
      Offset: 116,
      Type: 18,
      Index: 9
    },
    {
      Description: "System.String System.Object::ToString() @ 3851",
      Offset: 95,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 3909",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 3969",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 4039",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}/__StaticArrayInitTypeSize=24 @ 4347",
      Offset: 308,
      Type: 18,
      Index: 18
    },
    {
      Description: "System.String System.Object::ToString() @ 4471",
      Offset: 124,
      Type: 10,
      Index: 48
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 4529",
      Offset: 58,
      Type: 10,
      Index: 49
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 4589",
      Offset: 60,
      Type: 10,
      Index: 50
    },
    {
      Description: "System.Void System.Object::Finalize() @ 4659",
      Offset: 70,
      Type: 10,
      Index: 51
    },
    {
      Description: "TestCLRApplication.Program @ 2",
      Offset: 2,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Object @ 10",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/MultiThreadingStressTest @ 67",
      Offset: 57,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Object @ 75",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/QuickSortTestSuite @ 157",
      Offset: 82,
      Type: 20,
      Index: 3
    },
    {
      Description: "System.Object @ 165",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/Comparison`1 @ 241",
      Offset: 76,
      Type: 20,
      Index: 4
    },
    {
      Description: "System.MulticastDelegate @ 249",
      Offset: 8,
      Type: 20,
      Index: 5
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite @ 330",
      Offset: 81,
      Type: 20,
      Index: 6
    },
    {
      Description: "System.Object @ 338",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/AdderBase @ 419",
      Offset: 81,
      Type: 20,
      Index: 7
    },
    {
      Description: "System.Object @ 427",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder @ 518",
      Offset: 91,
      Type: 20,
      Index: 8
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/AdderBase @ 526",
      Offset: 8,
      Type: 20,
      Index: 7
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF} @ 667",
      Offset: 141,
      Type: 20,
      Index: 9
    },
    {
      Description: "System.Object @ 675",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata() @ 819",
      Offset: 144,
      Type: 12,
      Index: 58
    },
    {
      Description: "System.Runtime.Assembly System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly(System.String) @ 906",
      Offset: 87,
      Type: 12,
      Index: 59
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 1039",
      Offset: 133,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program @ 1078",
      Offset: 39,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1263",
      Offset: 185,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program::Main(System.String[]) @ 1281",
      Offset: 18,
      Type: 12,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1413",
      Offset: 132,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program::Log(System.String) @ 1430",
      Offset: 17,
      Type: 12,
      Index: 10
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1561",
      Offset: 131,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program::Assert(System.String,System.Boolean) @ 1581",
      Offset: 20,
      Type: 12,
      Index: 11
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1715",
      Offset: 134,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32) @ 1741",
      Offset: 26,
      Type: 12,
      Index: 13
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 1881",
      Offset: 140,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program::.ctor() @ 1900",
      Offset: 19,
      Type: 12,
      Index: 16
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 2031",
      Offset: 131,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/MultiThreadingStressTest @ 2069",
      Offset: 38,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2253",
      Offset: 184,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::PerformTest() @ 2278",
      Offset: 25,
      Type: 12,
      Index: 4
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2417",
      Offset: 139,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadStarted() @ 2444",
      Offset: 27,
      Type: 12,
      Index: 26
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2586",
      Offset: 142,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::Work() @ 2604",
      Offset: 18,
      Type: 12,
      Index: 24
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2738",
      Offset: 134,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 2766",
      Offset: 28,
      Type: 12,
      Index: 29
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2910",
      Offset: 144,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/MultiThreadingStressTest::AllThreadsFinished() @ 2942",
      Offset: 32,
      Type: 12,
      Index: 19
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 3090",
      Offset: 148,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program/MultiThreadingStressTest::.ctor(System.Int32) @ 3109",
      Offset: 19,
      Type: 12,
      Index: 3
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 3242",
      Offset: 133,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/QuickSortTestSuite @ 3274",
      Offset: 32,
      Type: 20,
      Index: 3
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3454",
      Offset: 180,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::TestQuickSort() @ 3482",
      Offset: 28,
      Type: 12,
      Index: 6
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3626",
      Offset: 144,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 3652",
      Offset: 26,
      Type: 12,
      Index: 34
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3794",
      Offset: 142,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 3813",
      Offset: 19,
      Type: 12,
      Index: 35
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3948",
      Offset: 135,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 3976",
      Offset: 28,
      Type: 12,
      Index: 39
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4120",
      Offset: 144,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>) @ 4142",
      Offset: 22,
      Type: 12,
      Index: 38
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4280",
      Offset: 138,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 4315",
      Offset: 35,
      Type: 12,
      Index: 40
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4466",
      Offset: 151,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Boolean TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>) @ 4498",
      Offset: 32,
      Type: 12,
      Index: 41
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 4646",
      Offset: 148,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program/QuickSortTestSuite::.ctor() @ 4666",
      Offset: 20,
      Type: 12,
      Index: 5
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 4800",
      Offset: 134,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/Comparison`1 @ 4826",
      Offset: 26,
      Type: 20,
      Index: 4
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5000",
      Offset: 174,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 5023",
      Offset: 23,
      Type: 68,
      Index: 43
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5158",
      Offset: 135,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.IAsyncResult TestCLRApplication.Program/Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) @ 5186",
      Offset: 28,
      Type: 68,
      Index: 55
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5326",
      Offset: 140,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/Comparison`1::EndInvoke(System.IAsyncResult) @ 5352",
      Offset: 26,
      Type: 68,
      Index: 56
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 5490",
      Offset: 138,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 5628",
      Offset: 138,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite @ 5665",
      Offset: 37,
      Type: 20,
      Index: 6
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5850",
      Offset: 185,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass() @ 5911",
      Offset: 61,
      Type: 12,
      Index: 8
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 6088",
      Offset: 177,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite::.ctor() @ 6108",
      Offset: 20,
      Type: 12,
      Index: 7
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 6242",
      Offset: 134,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/IAdder @ 6262",
      Offset: 20,
      Type: 20,
      Index: 17
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 6428",
      Offset: 166,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 6451",
      Offset: 23,
      Type: 68,
      Index: 45
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 6586",
      Offset: 135,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/AdderBase @ 6609",
      Offset: 23,
      Type: 20,
      Index: 7
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 6780",
      Offset: 171,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::AddTen(System.Int32) @ 6803",
      Offset: 23,
      Type: 68,
      Index: 57
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 6938",
      Offset: 135,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::.ctor() @ 6958",
      Offset: 20,
      Type: 12,
      Index: 46
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7092",
      Offset: 134,
      Type: 12,
      Index: 60
    },
    {
      Description: "TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder @ 7118",
      Offset: 26,
      Type: 20,
      Index: 8
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 7292",
      Offset: 174,
      Type: 12,
      Index: 61
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 7313",
      Offset: 21,
      Type: 12,
      Index: 47
    },
    {
      Description: "System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 7315",
      Offset: 2,
      Type: 68,
      Index: 47
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 7466",
      Offset: 151,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::.ctor() @ 7486",
      Offset: 20,
      Type: 12,
      Index: 44
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7620",
      Offset: 134,
      Type: 12,
      Index: 60
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF} @ 7702",
      Offset: 82,
      Type: 20,
      Index: 9
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7932",
      Offset: 230,
      Type: 12,
      Index: 60
    },
    {
      Description: "System.Runtime.CompilerServices.CompilerGeneratedAttribute @ 8003",
      Offset: 71,
      Type: 20,
      Index: 19
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 8222",
      Offset: 219,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 8242",
      Offset: 20,
      Type: 12,
      Index: 63
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 8367",
      Offset: 125,
      Type: 12,
      Index: 64
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 8379",
      Offset: 12,
      Type: 12,
      Index: 65
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 8492",
      Offset: 113,
      Type: 12,
      Index: 64
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 8504",
      Offset: 12,
      Type: 12,
      Index: 66
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 8626",
      Offset: 122,
      Type: 12,
      Index: 60
    },
    {
      Description: "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}/__StaticArrayInitTypeSize=24 @ 8668",
      Offset: 42,
      Type: 20,
      Index: 18
    }
  ]
}
]]></Header><Code Length="24"><![CDATA[function($ep,$end,$rv,$pc,$f,r2,r0,r1)
// : System.Void TestCLRApplication.Program::Main(System.String[])
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,"Hello world"])/*System.Console::WriteLine("Hello world")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = 0/*V_2.1 = 0*/;
                    r1 = 0/*V_3.1 = 0*/;
                    $ep = 3;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r2 = (r1 < 10)/*V_4.1 = V_3.3 LessThan 10*/;
                    if(r2)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,r0])/*System.Console::WriteLine(V_2.3)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r2 = {$:_[],0:0,1:0,2:0,3:0}/*$t8 = new System.Void TestCLRApplication.Program/MultiThreadingStressTest::.ctor(System.Int32)(10)*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,10])/*$t8..ctor(10)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*$t8.PerformTest()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r2 = {$:_[]}/*$t9 = new System.Void TestCLRApplication.Program/QuickSortTestSuite::.ctor()()*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*$t9..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*$t9.TestQuickSort()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r2 = {$:_[]}/*$t10 = new System.Void TestCLRApplication.Program/ClassStructureTestSuite::.ctor()()*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*$t10..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*$t10.TestOverrideInterfaceMethodOfAbstractBaseClass()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                case 12:
                {
                    r0 = (r0 + (10 + (100 * r1)))/*V_2.2 = V_2.3 Add 10 Add 100 Multiply V_3.3*/;
                    r1 = (r1 + 1)/*V_3.2 = V_3.3 Add 1*/;
                    $ep = 3;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program::Log(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,0,null,$f[4]])/*System.Console::WriteLine(s)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void TestCLRApplication.Program::Assert(System.String,System.Boolean)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = $f[5]/*V_0.1 = condition*/;
                    if(r0)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = ("Assertion failed: " + $f[4])/*$t3 = System.String::Concat("Assertion failed: ", message)*/;
                    r1 = {$:_[],0:null,1:null,2:null,3:null}/*$t4 = new System.Void System.Exception::.ctor(System.String)($t3)*/;
                    $$[].call(r1,r0)/*$t4..ctor($t3)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r1/*$t4*/;
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void TestCLRApplication.Program::AssertEquals(System.Int32,System.Int32)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[4] == $f[5])/*V_0.1 = expected ValueEquality actual*/;
                    if(r0)
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $$[](_[],5)/*V_1.1 = new System.Object[5]*/;
                    r0[0] = "Assertion failed.  Expected <"/*V_1.1[0] = "Assertion failed.  Expected <"*/;
                    r0[1] = new Number($f[4])/*V_1.1[1] = box(System.Int32,expected)*/;
                    r0[2] = "> but got <"/*V_1.1[2] = "> but got <"*/;
                    r0[3] = new Number($f[5])/*V_1.1[3] = box(System.Int32,actual)*/;
                    r0[4] = ">"/*V_1.1[4] = ">"*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,r0])/*$rv = System.String::Concat(V_1.1)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t18 = $rv*/;
                    r1 = {$:_[],0:null,1:null,2:null,3:null}/*$t19 = new System.Void System.Exception::.ctor(System.String)($t18)*/;
                    $$[].call(r1,r0)/*$t19..ctor($t18)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r1/*$t19*/;
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r2,r0,r3)
// : System.Void TestCLRApplication.Program/MultiThreadingStressTest::PerformTest()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = this[0]/*$t2 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,"Creating ",new Number(r1)," threads"])/*$rv = System.String::Concat("Creating ", box(System.Int32,$t2), " threads")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = $rv/*$t5 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,r1])/*TestCLRApplication.Program::Log($t5)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r1 = this[0]/*$t7 = this._numberOfThreads*/;
                    r3 = $$[](_[],r1)/*V_0.1 = new System.Threading.Thread[$t7]*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    r1 = this[0]/*$t11 = this._numberOfThreads*/;
                    r1 = (r0 < r1)/*V_2.1 = V_1.5 LessThan $t11*/;
                    if(r1)
                    {
                        $ep = 19;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    $ep = 6;
                    this[2] = 0/*this._startedThreads = 0*/;
                    this[3] = 0/*this._finishedThreads = 0*/;
                    r1 = this[0]/*$t20 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,"Starting ",new Number(r1)," threads"])/*$rv = System.String::Concat("Starting ", box(System.Int32,$t20), " threads")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r1 = $rv/*$t23 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,r1])/*TestCLRApplication.Program::Log($t23)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 8;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r1 = this[0]/*$t26 = this._numberOfThreads*/;
                    r1 = (r0 < r1)/*V_2.2 = V_1.6 LessThan $t26*/;
                    if(r1)
                    {
                        $ep = 18;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,"Waiting for all threads to finish"])/*TestCLRApplication.Program::Log("Waiting for all threads to finish")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null])/*$rv = this.AllThreadsFinished()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    r1 = $rv/*$t32 = $rv*/;
                    r1 = (!r1)/*V_2.4 = BooleanNot $t32*/;
                    if(r1)
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 12;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                        }

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r1 = this[1]/*$t37 = this._failedThreads*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,new Number(r1)," threads failed the calculation"])/*$rv = System.String::Concat(box(System.Int32,$t37), " threads failed the calculation")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r2 = $rv/*$t40 = $rv*/;
                    r1 = this[1]/*$t42 = this._failedThreads*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,r2,(r1 == 0)])/*TestCLRApplication.Program::Assert($t40, $t42 ValueEquality 0)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r1 = this[0]/*$t48 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,"All ",new Number(r1)," threads finished"])/*$rv = System.String::Concat("All ", box(System.Int32,$t48), " threads finished")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r1 = $rv/*$t51 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,r1])/*TestCLRApplication.Program::Log($t51)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    return;
                }
                case 17:
                {
                    $ep = 10;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],[null,null,0,null,1])/*System.Threading.Thread::Sleep(1)*/;
                    continue $ctrl;
                }
                case 18:
                {
                    $$[].call(r3[r0])/*V_0.1[V_1.6].Start()*/;
                    r0 = (r0 + 1)/*V_1.3 = V_1.6 Add 1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 19:
                {
                    $ep = 20;
                    r1 = {$:_[],0:null,1:null,2:null,3:null}/*$t58 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, TestCLRApplication.Program/MultiThreadingStressTest::Work)*/;
                    $$[](r1,this,$$[])/*$t58..ctor(this, TestCLRApplication.Program/MultiThreadingStressTest::Work)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r2 = {$:_[],0:0,1:null,2:null,3:null,4:0,5:0,6:0,7:null,8:null,9:null,10:null,11:null,12:0}/*$t59 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t58)*/;
                    $$[].call(r2,r1)/*$t59..ctor($t58)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    r3[r0] = r2/*V_0.1[V_1.5] = $t59*/;
                    r0 = (r0 + 1)/*V_1.4 = V_1.5 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r1,r2,r0,r3]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadStarted()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,this])/*System.Threading.Monitor::Enter(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r1 = this[2]/*$t3 = this._startedThreads*/;
                    this[2] = (r1 + 1)/*this._startedThreads = $t3 Add 1*/;
                    r0 = this[0]/*$t8 = this._numberOfThreads*/;
                    r0 = (!((r1 + 1) == r0))/*V_1.1 = BooleanNot $t3 Add 1 ValueEquality $t8*/;
                    if(r0)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,"All threads have started!"])/*TestCLRApplication.Program::Log("All threads have started!")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = this[2]/*$t17 = this._startedThreads*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,"Current thread count = ",new Number(r0)])/*$rv = System.String::Concat("Current thread count = ", box(System.Int32,$t17))*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t19 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,r0])/*TestCLRApplication.Program::Log($t19)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,this])/*System.Threading.Monitor::Exit(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r1)
// : System.Void TestCLRApplication.Program/MultiThreadingStressTest::Work()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null])/*this.ThreadStarted()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,"Thread started"])/*TestCLRApplication.Program::Log("Thread started")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = 0/*V_0.1 = (System.Int64)0*/;
                    r1 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    r2 = (!(r1 > 10000))/*V_2.1 = BooleanNot (System.Int64)V_1.3 GreaterThan (System.Int64)10000*/;
                    if(r2)
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,"Thread finished. Result: ",new Number(r0)])/*$rv = System.String::Concat("Thread finished. Result: ", box(System.Int64,V_0.3))*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r2 = $rv/*$t15 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,r2])/*TestCLRApplication.Program::Log($t15)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r1],[null,null,0,null,(!(r0 == 50005000))])/*this.ThreadFinished(BooleanNot V_0.3 ValueEquality (System.Int64)50005000)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    return;
                }
                case 9:
                {
                    r0 = (r0 + r1)/*V_0.2 = V_0.3 Add (System.Int64)V_1.3*/;
                    r1 = (r1 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r2,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void TestCLRApplication.Program/MultiThreadingStressTest::ThreadFinished(System.Boolean)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,this])/*System.Threading.Monitor::Enter(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = (!$f[4])/*V_0.1 = BooleanNot failed*/;
                    if(r0)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    r0 = this[1]/*$t7 = this._failedThreads*/;
                    this[1] = (r0 + 1)/*this._failedThreads = $t7 Add 1*/;
                    $ep = 4;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = this[3]/*$t12 = this._finishedThreads*/;
                    this[3] = (r0 + 1)/*this._finishedThreads = $t12 Add 1*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,this])/*System.Threading.Monitor::Exit(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Boolean TestCLRApplication.Program/MultiThreadingStressTest::AllThreadsFinished()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,this])/*System.Threading.Monitor::Enter(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = this[3]/*$t2 = this._finishedThreads*/;
                    r0 = this[0]/*$t4 = this._numberOfThreads*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,this])/*System.Threading.Monitor::Exit(this)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return (r1 == r0)/*$t2 ValueEquality $t4*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void TestCLRApplication.Program/MultiThreadingStressTest::.ctor(System.Int32)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    r0 = (!($f[4] < 2))/*V_0.1 = BooleanNot numberOfThreads LessThan 2*/;
                    if(r0)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = {$:_[],0:null,1:null,2:null,3:null}/*$t9 = new System.Void System.ArgumentException::.ctor(System.String)("numberOfThreads should be greater than 1")*/;
                    $$[].call(r0,"numberOfThreads should be greater than 1")/*$t9..ctor("numberOfThreads should be greater than 1")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t9*/;
                }
                case 4:
                {
                    this[0] = $f[4]/*this._numberOfThreads = numberOfThreads*/;
                    this[1] = 0/*this._failedThreads = 0*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1)
// : System.Void TestCLRApplication.Program/QuickSortTestSuite::TestQuickSort()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r4 = {$:_[],0:null,1:0}/*$t0 = new System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()()*/;
                    $$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$t0..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = r4/*V_0.1 = $t0*/;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,5])/*$t0.Add(5)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,53])/*$t0.Add(53)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,25])/*$t0.Add(25)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,2])/*$t0.Add(2)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,32131])/*$t0.Add(32131)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,142])/*$t0.Add(142)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 9;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = $t0.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    r2 = $rv/*$t8 = $rv*/;
                    r2 = (r0 < r2)/*V_3.1 = V_1.9 LessThan $t8*/;
                    if(r2)
                    {
                        $ep = 48;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 11;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = $t0.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r2 = $rv/*$t12 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,"Sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Sorting ", box(System.Int32,$t12), " elements.")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r2 = $rv/*$t15 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t15)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r2 = {$:_[],0:null,1:null,2:null,3:null}/*$t18 = new System.Void TestCLRApplication.Program/Comparison`1<System.Int32>::.ctor(System.Object,System.IntPtr)(null, TestCLRApplication.Program/QuickSortTestSuite::CompareInts)*/;
                    $$[](r2,null,$$[])/*$t18..ctor(null, TestCLRApplication.Program/QuickSortTestSuite::CompareInts)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r4,r2])/*TestCLRApplication.Program/QuickSortTestSuite::Sort($t0, $t18)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = $t0.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r2 = $rv/*$t20 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,"Done sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Done sorting ", box(System.Int32,$t20), " elements.")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r2 = $rv/*$t23 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t23)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r3 = $$[](_[],6)/*$tf26 = new System.Int32[6]*/;
                    r2 = _[]/*$t27 = <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}.$$method0x600000c-1*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r3,r2])/*System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray($tf26, $t27)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 21;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = $t0.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    r2 = $rv/*$t29 = $rv*/;
                    r2 = (r0 < r2)/*V_3.2 = V_1.10 LessThan $t29*/;
                    if(r2)
                    {
                        $ep = 43;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 23;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r2 = {$:_[],0:null,1:0}/*$t32 = new System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()()*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$t32..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    r1 = r2/*V_0.2 = $t32*/;
                    r0 = 255/*V_1.3 = 255*/;
                    $ep = 25;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    r2 = (!(r0 < 0))/*V_3.3 = BooleanNot V_1.11 LessThan 0*/;
                    if(r2)
                    {
                        $ep = 41;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 26;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = V_0.3.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r2 = $rv/*$t41 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,"Sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Sorting ", box(System.Int32,$t41), " elements.")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    r2 = $rv/*$t44 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t44)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r2 = {$:_[],0:null,1:null,2:null,3:null}/*$t47 = new System.Void TestCLRApplication.Program/Comparison`1<System.Int32>::.ctor(System.Object,System.IntPtr)(null, TestCLRApplication.Program/QuickSortTestSuite::CompareInts)*/;
                    $$[](r2,null,$$[])/*$t47..ctor(null, TestCLRApplication.Program/QuickSortTestSuite::CompareInts)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r1,r2])/*TestCLRApplication.Program/QuickSortTestSuite::Sort(V_0.3, $t47)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = V_0.3.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    r2 = $rv/*$t49 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,"Done sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Done sorting ", box(System.Int32,$t49), " elements.")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    $ep = 34;
                    r2 = $rv/*$t52 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t52)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    r0 = 0/*V_1.4 = 0*/;
                    $ep = 35;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null])/*$rv = V_0.4.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    r2 = $rv/*$t54 = $rv*/;
                    r2 = (r0 < r2)/*V_3.4 = V_1.12 LessThan $t54*/;
                    if(r2)
                    {
                        $ep = 38;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 37;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 37:
                {
                    return;
                }
                case 38:
                {
                    $ep = 39;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r0])/*$rv = V_0.4.get_Item(V_1.12)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    $ep = 40;
                    r2 = $rv/*$t57 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r0,r2])/*TestCLRApplication.Program::AssertEquals(V_1.12, $t57)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    r0 = (r0 + 1)/*V_1.5 = V_1.12 Add 1*/;
                    $ep = 35;
                    continue $ctrl;
                }
                case 41:
                {
                    $ep = 42;
                    r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r0])/*V_0.3.Add(V_1.11)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    r0 = (r0 - 1)/*V_1.6 = V_1.11 Subtract 1*/;
                    $ep = 25;
                    continue $ctrl;
                }
                case 43:
                {
                    $ep = 44;
                    r2 = $$[](_[],4)/*V_4.1 = new System.Object[4]*/;
                    r2[0] = "Checking index "/*V_4.1[0] = "Checking index "*/;
                    r2[1] = new Number(r0)/*V_4.1[1] = box(System.Int32,V_1.10)*/;
                    r2[2] = ".  Expecting "/*V_4.1[2] = ".  Expecting "*/;
                    r2[3] = new Number(r3[r0])/*V_4.1[3] = box(System.Int32,$tf26[V_1.10])*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*$rv = System.String::Concat(V_4.1)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 44:
                {
                    $ep = 45;
                    r2 = $rv/*$t73 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t73)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 45:
                {
                    $ep = 46;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r0])/*$rv = $t0.get_Item(V_1.10)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 46:
                {
                    $ep = 47;
                    r2 = $rv/*$t75 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r3[r0],r2])/*TestCLRApplication.Program::AssertEquals($tf26[V_1.10], $t75)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 47:
                {
                    r0 = (r0 + 1)/*V_1.7 = V_1.10 Add 1*/;
                    $ep = 21;
                    continue $ctrl;
                }
                case 48:
                {
                    $ep = 49;
                    $rv = r4.$[].call(r4,0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r0])/*$rv = $t0.get_Item(V_1.9)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 49:
                {
                    $ep = 50;
                    r2 = $rv/*$t79 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,"Added ",new Number(r2),"."])/*$rv = System.String::Concat("Added ", box(System.Int32,$t79), ".")*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 50:
                {
                    $ep = 51;
                    r2 = $rv/*$t82 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],[null,null,0,null,r2])/*System.Console::WriteLine($t82)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*[Continuation]*/;

                    }
                }
                case 51:
                {
                    r0 = (r0 + 1)/*V_1.8 = V_1.9 Add 1*/;
                    $ep = 9;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Int32 TestCLRApplication.Program/QuickSortTestSuite::CompareInts(System.Int32,System.Int32)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return ($f[4] - $f[5])/*a Subtract b*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void TestCLRApplication.Program/QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[4].$[].call($f[4],0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null])/*$rv = data.get_Count()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t2 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,0,(r0 - 1),$f[4],$f[5]])/*TestCLRApplication.Program/QuickSortTestSuite::Sorting(0, $t2 Subtract 1, data, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10)
// : System.Int32 TestCLRApplication.Program/QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[4] + 1)/*V_1.1 = begPoint Add 1*/;
                    r1 = $f[5]/*V_2.1 = endPoint*/;
                    $ep = 2;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r2 = (r0 >= $f[5])/*$t6 = V_1.4 GreaterThanOrEqual endPoint*/;
                    if(r2)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4]])/*$rv = data.get_Item(begPoint)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r3 = $rv/*$t8 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r0])/*$rv = data.get_Item(V_1.4)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 41;
                    r2 = $rv/*$t10 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r3,r2,$f[7]])/*$rv = TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo($t8, $t10, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 41:
                {
                    $ep = 7;
                    r2 = $rv/*$ts0 = $rv*/;
                    continue $ctrl;
                }
                case 6:
                {
                    r2 = 0/*$ts0 = 0*/;
                    $ep = 7;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r2 = r2/*V_6.1 = $ts0*/;
                    if(r2)
                    {
                        $ep = 40;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 8;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 8:
                {
                    r2 = (r1 <= $f[4])/*$t14 = V_2.4 LessThanOrEqual begPoint*/;
                    if(r2)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4]])/*$rv = data.get_Item(begPoint)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r3 = $rv/*$t16 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1])/*$rv = data.get_Item(V_2.4)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 42;
                    r2 = $rv/*$t18 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r3,r2,$f[7]])/*$rv = TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo($t16, $t18, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    $ep = 13;
                    r2 = $rv/*$ts0 = $rv*/;
                    continue $ctrl;
                }
                case 12:
                {
                    r2 = 0/*$ts0 = 0*/;
                    $ep = 13;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    r2 = r2/*V_6.2 = $ts0*/;
                    if(r2)
                    {
                        $ep = 39;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 14;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 14:
                {
                    r2 = (r0 < r1)/*V_6.3 = V_1.6 LessThan V_2.6*/;
                    if(r2)
                    {
                        $ep = 15;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 33;
                        continue $ctrl;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r0])/*$rv = data.get_Item(V_1.6)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r3 = $rv/*V_3.1 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r2 = $rv/*$t35 = $rv*/;
                    $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r0,r2])/*data.set_Item(V_1.6, $t35)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1,r3])/*data.set_Item(V_2.6, V_3.1)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    r2 = (r0 >= $f[5])/*$t38 = V_1.5 GreaterThanOrEqual endPoint*/;
                    if(r2)
                    {
                        $ep = 23;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 20;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 20:
                {
                    $ep = 21;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4]])/*$rv = data.get_Item(begPoint)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    r3 = $rv/*$t40 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r0])/*$rv = data.get_Item(V_1.5)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 43;
                    r2 = $rv/*$t42 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r3,r2,$f[7]])/*$rv = TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo($t40, $t42, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 43:
                {
                    $ep = 24;
                    r2 = $rv/*$ts0 = $rv*/;
                    continue $ctrl;
                }
                case 23:
                {
                    r2 = 0/*$ts0 = 0*/;
                    $ep = 24;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    r2 = r2/*V_6.5 = $ts0*/;
                    if(r2)
                    {
                        $ep = 32;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 25;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 25:
                {
                    r2 = (r1 <= $f[4])/*$t46 = V_2.5 LessThanOrEqual begPoint*/;
                    if(r2)
                    {
                        $ep = 29;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 26;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4]])/*$rv = data.get_Item(begPoint)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r3 = $rv/*$t48 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1])/*$rv = data.get_Item(V_2.5)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 44;
                    r2 = $rv/*$t50 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r3,r2,$f[7]])/*$rv = TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo($t48, $t50, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 44:
                {
                    $ep = 30;
                    r2 = $rv/*$ts0 = $rv*/;
                    continue $ctrl;
                }
                case 29:
                {
                    r2 = 0/*$ts0 = 0*/;
                    $ep = 30;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    r2 = r2/*V_6.6 = $ts0*/;
                    if(r2)
                    {
                        $ep = 31;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                }
                case 31:
                {
                    r1 = (r1 - 1)/*V_2.2 = V_2.5 Subtract 1*/;
                    $ep = 25;
                    continue $ctrl;
                }
                case 32:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.5 Add 1*/;
                    $ep = 19;
                    continue $ctrl;
                }
                case 33:
                {
                    r2 = ($f[4] == r1)/*V_6.4 = begPoint ValueEquality V_2.6*/;
                    if(r2)
                    {
                        $ep = 38;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 34;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                        }

                    }
                }
                case 34:
                {
                    $ep = 35;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    r3 = $rv/*V_4.1 = $rv*/;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4]])/*$rv = data.get_Item(begPoint)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    r2 = $rv/*$t29 = $rv*/;
                    $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,r1,r2])/*data.set_Item(V_2.6, $t29)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10],[null,null,0,null,$f[4],r3])/*data.set_Item(begPoint, V_4.1)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    return r1/*V_2.6*/;
                }
                case 39:
                {
                    r1 = (r1 - 1)/*V_2.3 = V_2.4 Subtract 1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 40:
                {
                    r0 = (r0 + 1)/*V_1.3 = V_1.4 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r5,r1,r6,r7,r8,r9,r10]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void TestCLRApplication.Program/QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,TestCLRApplication.Program/Comparison`1<T>)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = (!($f[5] == $f[4]))/*V_1.1 = BooleanNot end ValueEquality beg*/;
                    if(r0)
                    {
                        $ep = 2;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,$f[4],$f[5],$f[6],$f[7]])/*$rv = TestCLRApplication.Program/QuickSortTestSuite::GetPivotPoint(beg, end, data, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r1 = $rv/*V_0.1 = $rv*/;
                    r0 = (!(r1 > $f[4]))/*V_1.2 = BooleanNot V_0.1 GreaterThan beg*/;
                    if(r0)
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,$f[4],(r1 - 1),$f[6],$f[7]])/*TestCLRApplication.Program/QuickSortTestSuite::Sorting(beg, V_0.1 Subtract 1, data, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    r0 = (!(r1 < $f[5]))/*V_1.3 = BooleanNot V_0.1 LessThan end*/;
                    if(r0)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,0,null,(r1 + 1),$f[5],$f[6],$f[7]])/*TestCLRApplication.Program/QuickSortTestSuite::Sorting(V_0.1 Add 1, end, data, comparison)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean TestCLRApplication.Program/QuickSortTestSuite::GreaterThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,[$f[4], $f[5]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 > -1)/*$t3 GreaterThan -1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean TestCLRApplication.Program/QuickSortTestSuite::LessThanOrEqualTo(T,T,TestCLRApplication.Program/Comparison`1<T>)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[6].$[].call($f[6],0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,[$f[4], $f[5]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 < 1)/*$t3 LessThan 1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program/QuickSortTestSuite::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void TestCLRApplication.Program/ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = {$:_[]}/*$t0 = new System.Void TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::.ctor()()*/;
                    $$[].call(r0,0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null])/*$t0..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = r0.$.i[][].call(r0,0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,6])/*$rv = $t0.AddTen(6)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t3 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0,null,16,r0])/*TestCLRApplication.Program::AssertEquals(16, $t3)*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program/ClassStructureTestSuite::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0)
// : System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32)
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f,r1,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = 0/*V_0.1 = 0*/;
                    $ep = 2;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r1 = (r0 < 10)/*V_2.1 = V_0.3 LessThan 10*/;
                    if(r1)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(new Date() > $end)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r0]/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    return $f[4]/*x*/;
                }
                case 4:
                {
                    $f[4] = ($f[4] + 1)/*x = x Add 1*/;
                    r0 = (r0 + 1)/*V_0.2 = V_0.3 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r1,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this;
        $f[1] = arguments.callee;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(new Date() > $end)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,0,null])/*this..ctor()*/;
                    if(new Date() > $end)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f[2]))
            {
                throw $e/*$e*/;

            }
            $ep = $f[2];
            $f[3] = $e/*Frame[Exception] = $e*/;

        }


    } while (true);


}]]></Code><Data Length="11"><![CDATA[
// : TestCLRApplication.Program
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : TestCLRApplication.Program/MultiThreadingStressTest
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : TestCLRApplication.Program/QuickSortTestSuite
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : TestCLRApplication.Program/Comparison`1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Object System.MulticastDelegate::Invoke(System.Object[]) */,
    5:$$[]/* System.Object System.MulticastDelegate::InvokeNative(System.Object[]) */,
    6:$$[]/* System.Void System.MulticastDelegate::InternalCombine(System.Delegate) */,
    7:$$[]/* System.Int32 TestCLRApplication.Program/Comparison`1::Invoke(T,T) */,
    8:$$[]/* System.IAsyncResult TestCLRApplication.Program/Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) */,
    9:$$[]/* System.Int32 TestCLRApplication.Program/Comparison`1::EndInvoke(System.IAsyncResult) */
},

// : TestCLRApplication.Program/ClassStructureTestSuite
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : TestCLRApplication.Program/ClassStructureTestSuite/IAdder
{
    f: 1,
    0:null/* System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/IAdder::AddTen(System.Int32) */
},

// : TestCLRApplication.Program/ClassStructureTestSuite/AdderBase
{
    f: 0,
    i:
    {
        :// Interface map: TestCLRApplication.Program/ClassStructureTestSuite/IAdder
        {
            :$$[]/* AddTen -> System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::AddTen(System.Int32) */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:null/* System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/AdderBase::AddTen(System.Int32) */
},

// : TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder
{
    f: 0,
    i:
    {
        :// Interface map: TestCLRApplication.Program/ClassStructureTestSuite/IAdder
        {
            :$$[]/* AddTen -> System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Int32 TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) */
},

// : <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
[2,0,0,0,5,0,0,0,25,0,0,0,53,0,0,0,142,0,0,0,131,125,0,0]/* <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}/__StaticArrayInitTypeSize=24 <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}::$$method0x600000c-1 */,

// : <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}/__StaticArrayInitTypeSize=24
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
}]]></Data><Initialization><![CDATA[_[].b = _[];// TestCLRApplication.Program extends System.Object
_[].b = _[];// TestCLRApplication.Program/MultiThreadingStressTest extends System.Object
_[].b = _[];// TestCLRApplication.Program/QuickSortTestSuite extends System.Object
_[].b = _[];// TestCLRApplication.Program/Comparison`1 extends System.MulticastDelegate
_[].b = _[];// TestCLRApplication.Program/ClassStructureTestSuite extends System.Object
_[].b = _[];// TestCLRApplication.Program/ClassStructureTestSuite/AdderBase extends System.Object
_[].b = _[];// TestCLRApplication.Program/ClassStructureTestSuite/RegularAdder extends TestCLRApplication.Program/ClassStructureTestSuite/AdderBase
_[].b = _[];// <PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF} extends System.Object
var t0 = {}/* t0 = [dynamic expression]*/;
$$[]()/*System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata()*/;t0[0] = $$[]("TestCLRApplication")/*t0[0] = System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly("TestCLRApplication")*/;
t0[1] = $$[]("TestCLRApplication","Program",t0[0],,null,false,false)/*t0[1] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("TestCLRApplication", "Program", t0[0], [dynamic expression], null, False, False)*/;
t0[2] = $$[](t0[1],"Main",$$[],-1)/*t0[2] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Main", [dynamic expression], -1)*/;
t0[3] = $$[](t0[1],"Log",$$[],-1)/*t0[3] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Log", [dynamic expression], -1)*/;
t0[4] = $$[](t0[1],"Assert",$$[],-1)/*t0[4] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Assert", [dynamic expression], -1)*/;
t0[5] = $$[](t0[1],"AssertEquals",$$[],-1)/*t0[5] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "AssertEquals", [dynamic expression], -1)*/;
t0[6] = $$[](t0[1],".ctor",$$[])/*t0[6] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[1], ".ctor", [dynamic expression])*/;
t0[7] = $$[]("","MultiThreadingStressTest",t0[0],,null,false,false)/*t0[7] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "MultiThreadingStressTest", t0[0], [dynamic expression], null, False, False)*/;
t0[8] = $$[](t0[7],"PerformTest",$$[],-1)/*t0[8] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[7], "PerformTest", [dynamic expression], -1)*/;
t0[9] = $$[](t0[7],"ThreadStarted",$$[],-1)/*t0[9] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[7], "ThreadStarted", [dynamic expression], -1)*/;
t0[10] = $$[](t0[7],"Work",$$[],-1)/*t0[10] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[7], "Work", [dynamic expression], -1)*/;
t0[11] = $$[](t0[7],"ThreadFinished",$$[],-1)/*t0[11] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[7], "ThreadFinished", [dynamic expression], -1)*/;
t0[12] = $$[](t0[7],"AllThreadsFinished",$$[],-1)/*t0[12] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[7], "AllThreadsFinished", [dynamic expression], -1)*/;
t0[13] = $$[](t0[7],".ctor",$$[])/*t0[13] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[7], ".ctor", [dynamic expression])*/;
t0[14] = $$[]("","QuickSortTestSuite",t0[0],,null,false,false)/*t0[14] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "QuickSortTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[15] = $$[](t0[14],"TestQuickSort",$$[],-1)/*t0[15] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "TestQuickSort", [dynamic expression], -1)*/;
t0[16] = $$[](t0[14],"CompareInts",$$[],-1)/*t0[16] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "CompareInts", [dynamic expression], -1)*/;
t0[17] = $$[](t0[14],"Sort",$$[],-1)/*t0[17] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "Sort", [dynamic expression], -1)*/;
t0[18] = $$[](t0[14],"GetPivotPoint",$$[],-1)/*t0[18] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "GetPivotPoint", [dynamic expression], -1)*/;
t0[19] = $$[](t0[14],"Sorting",$$[],-1)/*t0[19] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "Sorting", [dynamic expression], -1)*/;
t0[20] = $$[](t0[14],"GreaterThanOrEqualTo",$$[],-1)/*t0[20] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "GreaterThanOrEqualTo", [dynamic expression], -1)*/;
t0[21] = $$[](t0[14],"LessThanOrEqualTo",$$[],-1)/*t0[21] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "LessThanOrEqualTo", [dynamic expression], -1)*/;
t0[22] = $$[](t0[14],".ctor",$$[])/*t0[22] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[14], ".ctor", [dynamic expression])*/;
t0[23] = $$[]("","Comparison`1",t0[0],,null,false,false)/*t0[23] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "Comparison`1", t0[0], [dynamic expression], null, False, False)*/;
t0[24] = $$[](t0[23],"Invoke",null,)/*t0[24] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[23], "Invoke", null, [dynamic expression])*/;
t0[25] = $$[](t0[23],"BeginInvoke",null,)/*t0[25] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[23], "BeginInvoke", null, [dynamic expression])*/;
t0[26] = $$[](t0[23],"EndInvoke",null,)/*t0[26] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[23], "EndInvoke", null, [dynamic expression])*/;
t0[27] = $$[](t0[23],".ctor",null)/*t0[27] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[23], ".ctor", null)*/;
t0[28] = $$[]("","ClassStructureTestSuite",t0[0],,null,false,false)/*t0[28] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "ClassStructureTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[29] = $$[](t0[28],"TestOverrideInterfaceMethodOfAbstractBaseClass",$$[],-1)/*t0[29] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[28], "TestOverrideInterfaceMethodOfAbstractBaseClass", [dynamic expression], -1)*/;
t0[30] = $$[](t0[28],".ctor",$$[])/*t0[30] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[28], ".ctor", [dynamic expression])*/;
t0[31] = $$[]("","IAdder",t0[0],,null,true,false)/*t0[31] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "IAdder", t0[0], [dynamic expression], null, True, False)*/;
t0[32] = $$[](t0[31],"AddTen",null,)/*t0[32] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[31], "AddTen", null, [dynamic expression])*/;
t0[33] = $$[]("","AdderBase",t0[0],,null,false,false)/*t0[33] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "AdderBase", t0[0], [dynamic expression], null, False, False)*/;
t0[34] = $$[](t0[33],"AddTen",null,)/*t0[34] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[33], "AddTen", null, [dynamic expression])*/;
t0[35] = $$[](t0[33],".ctor",$$[])/*t0[35] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[33], ".ctor", [dynamic expression])*/;
t0[36] = $$[]("","RegularAdder",t0[0],,null,false,false)/*t0[36] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "RegularAdder", t0[0], [dynamic expression], null, False, False)*/;
t0[37] = $$[](t0[36],"AddTen",$$[],)/*t0[37] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[36], "AddTen", [dynamic expression], [dynamic expression])*/;
t0[38] = $$[](t0[36],".ctor",$$[])/*t0[38] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[36], ".ctor", [dynamic expression])*/;
t0[39] = $$[]("","<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}",t0[0],,null,false,false)/*t0[39] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<PrivateImplementationDetails>{5ABF8F97-CCE5-4053-A497-D8FCCD6A45DF}", t0[0], [dynamic expression], null, False, False)*/;
t0[40] = $$[]("System.Runtime.CompilerServices","CompilerGeneratedAttribute",t0[0],,null,false,false)/*t0[40] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Runtime.CompilerServices", "CompilerGeneratedAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[41] = $$[](t0[40],".ctor",$$[])/*t0[41] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[40], ".ctor", [dynamic expression])*/;
$$[](t0[40],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[40], [dynamic expression])*/;
$$[](t0[39],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[39], [dynamic expression])*/;
t0[42] = $$[]("","__StaticArrayInitTypeSize=24",t0[0],,null,false,false)/*t0[42] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "__StaticArrayInitTypeSize=24", t0[0], [dynamic expression], null, False, False)*/;
]]></Initialization></Object>