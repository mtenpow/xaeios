<Object><Header><![CDATA[{
  Metadata: {
    Name: {
      Name: "System.Net.Tests",
      Version: "1.0.0.0",
      Culture: ""
    },
    EntryPoint: 0,
    BootMethod: 90,
    Types: [
      {
        Namespace: "System.Net.Tests",
        Name: "Program",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Main",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 0,
            HasThis: false,
            Parameters: [
              {
                Type: 16,
                Name: "args",
                Sequence: 1
              }
            ]
          },
          {
            Name: "StartProcessViewer",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 1,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "StartTests",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 2,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "RunTests",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 3,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "Authenticate",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 4,
            HasThis: false,
            Parameters: [
              {
                Type: 17,
                Name: "validEmail",
                Sequence: 1
              }
            ]
          },
          {
            Name: "<StartProcessViewer>b__0",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 5,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "<StartProcessViewer>b__1",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 6,
            HasThis: false,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 18,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: "<StartTests>b__4",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 7,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "<StartTests>b__5",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 8,
            HasThis: false,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 18,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 9,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate2",
            Type: 7,
            DataIndex: 1
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate3",
            Type: 9,
            DataIndex: 2
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate6",
            Type: 7,
            DataIndex: 3
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate7",
            Type: 9,
            DataIndex: 4
          }
        ],
        VTableIndex: 0
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "IUser",
        BaseType: -1,
        DeclaringType: -1,
        IsInterface: true,
        IsAbstract: true,
        Methods: [
          {
            Name: "get_FirstName",
            ReturnType: 19,
            VTableSlot: 0,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_FirstName",
            ReturnType: 15,
            VTableSlot: 1,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_MiddleName",
            ReturnType: 19,
            VTableSlot: 2,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_MiddleName",
            ReturnType: 15,
            VTableSlot: 3,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_LastName",
            ReturnType: 19,
            VTableSlot: 4,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_LastName",
            ReturnType: 15,
            VTableSlot: 5,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_EmailAddress",
            ReturnType: 19,
            VTableSlot: 6,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_EmailAddress",
            ReturnType: 15,
            VTableSlot: 7,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_PasswordHash",
            ReturnType: 19,
            VTableSlot: 8,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_PasswordHash",
            ReturnType: 15,
            VTableSlot: 9,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 5
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "User",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "get_FirstName",
            ReturnType: 19,
            VTableSlot: 4,
            CodeIndex: 10,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_FirstName",
            ReturnType: 15,
            VTableSlot: 5,
            CodeIndex: 11,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_MiddleName",
            ReturnType: 19,
            VTableSlot: 6,
            CodeIndex: 12,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_MiddleName",
            ReturnType: 15,
            VTableSlot: 7,
            CodeIndex: 13,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_LastName",
            ReturnType: 19,
            VTableSlot: 8,
            CodeIndex: 14,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_LastName",
            ReturnType: 15,
            VTableSlot: 9,
            CodeIndex: 15,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_EmailAddress",
            ReturnType: 19,
            VTableSlot: 10,
            CodeIndex: 16,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_EmailAddress",
            ReturnType: 15,
            VTableSlot: 11,
            CodeIndex: 17,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_PasswordHash",
            ReturnType: 19,
            VTableSlot: 12,
            CodeIndex: 18,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_PasswordHash",
            ReturnType: 15,
            VTableSlot: 13,
            CodeIndex: 19,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "ToString",
            ReturnType: 19,
            VTableSlot: 0,
            CodeIndex: 20,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 21,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "firstName",
                Sequence: 1
              },
              {
                Type: 19,
                Name: "middleName",
                Sequence: 2
              },
              {
                Type: 19,
                Name: "lastName",
                Sequence: 3
              },
              {
                Type: 19,
                Name: "emailAddress",
                Sequence: 4
              },
              {
                Type: 19,
                Name: "passwordHash",
                Sequence: 5
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_emailAddress",
            Type: 19,
            Offset: 0
          },
          {
            Name: "<FirstName>k__BackingField",
            Type: 19,
            Offset: 1
          },
          {
            Name: "<MiddleName>k__BackingField",
            Type: 19,
            Offset: 2
          },
          {
            Name: "<LastName>k__BackingField",
            Type: 19,
            Offset: 3
          },
          {
            Name: "<PasswordHash>k__BackingField",
            Type: 19,
            Offset: 4
          }
        ],
        StaticFields: [],
        VTableIndex: 6
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "AuthenticationException",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 22,
            HasThis: true,
            Parameters: [
              {
                Type: 19,
                Name: "message",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 7
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "InvalidUsernameAndPasswordException",
        BaseType: 3,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 23,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 8
      },
      {
        Namespace: "System.Net.Tests",
        Name: "ProcessViewer",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Start",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 24,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "UpdateInnerHTML",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 25,
            HasThis: true,
            Parameters: [
              {
                Type: 11,
                Name: "sb",
                Sequence: 1
              }
            ]
          },
          {
            Name: "BuildSIPTable",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 26,
            HasThis: true,
            Parameters: [
              {
                Type: 11,
                Name: "sb",
                Sequence: 1
              }
            ]
          },
          {
            Name: "BuildThreadTable",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 27,
            HasThis: true,
            Parameters: [
              {
                Type: 11,
                Name: "sb",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 15,
            VTableSlot: -1,
            CodeIndex: 28,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 9
      }
    ],
    AssemblyReferences: [
      {
        Name: "OSCorlib",
        Version: "2.0.0.0"
      },
      {
        Name: "System.Net",
        Version: "1.0.0.0"
      },
      {
        Name: "System",
        Version: "2.0.0.0"
      },
      {
        Name: "XaeiOS.Kernel",
        Version: "1.0.0.0"
      }
    ],
    TypeReferences: [
      {
        Namespace: "System.Net.Tests",
        Name: "Program",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "User",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "AuthenticationException",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "InvalidUsernameAndPasswordException",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.Tests",
        Name: "ProcessViewer",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Process",
        Name: "SIP",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventHandler",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.JsonRpc",
        Name: "JsonRpcClient",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System.Text",
        Name: "StringBuilder",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.Tests.Shared",
        Name: "IUser",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.JsonRpc",
        Name: "JsonRpcImplementationAttribute",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Void",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Array",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventArgs",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Kernel",
        Name: "Scheduler",
        DeclaringType: -1,
        Assembly: 3,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Delegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Process",
        Name: "SIP",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Console",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.JsonRpc",
        Name: "JsonRpcClient",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "RuntimeHelpers",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Text",
        Name: "StringBuilder",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS",
        Name: "TaskHandle",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeUsageAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Net.JsonRpc",
        Name: "JsonRpcImplementationAttribute",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Boot",
        Name: "BootManager",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "var",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NativeFunction",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadPriority",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventHandler",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "VTable",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Assembly",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "UIntPtr",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Class",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "ICustomAttributeProvider",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Method",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeTargets",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Type",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Type",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      }
    ],
    MethodReferences: [
      {
        Type: 0,
        Name: "Main",
        HasThis: false,
        Parameters: [
          0
        ]
      },
      {
        Type: 0,
        Name: "StartProcessViewer",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "StartTests",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 20,
        Name: "ConvertToManagedException",
        HasThis: false,
        Parameters: [
          1
        ]
      },
      {
        Type: 21,
        Name: "InternalCreate",
        HasThis: false,
        Parameters: [
          2,
          3,
          4
        ]
      },
      {
        Type: 0,
        Name: "<StartProcessViewer>b__0",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 22,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          5,
          6,
          7
        ]
      },
      {
        Type: 0,
        Name: "<StartProcessViewer>b__1",
        HasThis: false,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 22,
        Name: "add_Exited",
        HasThis: true,
        Parameters: [
          10
        ]
      },
      {
        Type: 22,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: "<StartTests>b__4",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "<StartTests>b__5",
        HasThis: false,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 0,
        Name: "RunTests",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "Authenticate",
        HasThis: false,
        Parameters: [
          11
        ]
      },
      {
        Type: 19,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          12,
          13
        ]
      },
      {
        Type: 23,
        Name: "WriteLine",
        HasThis: false,
        Parameters: [
          14
        ]
      },
      {
        Type: 24,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          15
        ]
      },
      {
        Type: 25,
        Name: "CreateArray",
        HasThis: false,
        Parameters: [
          16,
          17
        ]
      },
      {
        Type: 24,
        Name: "Call",
        HasThis: true,
        Parameters: [
          18,
          19
        ]
      },
      {
        Type: 6,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 26,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "get_FirstName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "set_FirstName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "get_MiddleName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "set_MiddleName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "get_LastName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "set_LastName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "get_EmailAddress",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "set_EmailAddress",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "get_PasswordHash",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: "set_PasswordHash",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 2,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 2,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          21,
          22,
          23,
          24,
          25
        ]
      },
      {
        Type: 3,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          26
        ]
      },
      {
        Type: 27,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          27
        ]
      },
      {
        Type: 5,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 28,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 28,
        Name: "Append",
        HasThis: true,
        Parameters: [
          28
        ]
      },
      {
        Type: 6,
        Name: "BuildSIPTable",
        HasThis: true,
        Parameters: [
          29
        ]
      },
      {
        Type: 6,
        Name: "BuildThreadTable",
        HasThis: true,
        Parameters: [
          29
        ]
      },
      {
        Type: 26,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: "UpdateInnerHTML",
        HasThis: true,
        Parameters: [
          29
        ]
      },
      {
        Type: 29,
        Name: "Sleep",
        HasThis: false,
        Parameters: [
          30
        ]
      },
      {
        Type: 8,
        Name: "GetSIPs",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 22,
        Name: "get_ID",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 29,
        Name: "GetThreads",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 30,
        Name: "get_Task",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 31,
        Name: "get_ID",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 30,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 30,
        Name: "get_SIP",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 30,
        Name: "get_Blocked",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 30,
        Name: "get_Priority",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 26,
        Name: "GetHashCode",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 26,
        Name: "Equals",
        HasThis: true,
        Parameters: [
          31
        ]
      },
      {
        Type: 26,
        Name: "Finalize",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "get_FirstName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_FirstName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 12,
        Name: "get_MiddleName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_MiddleName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 12,
        Name: "get_LastName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_LastName",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 12,
        Name: "get_EmailAddress",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_EmailAddress",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 12,
        Name: "get_PasswordHash",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_PasswordHash",
        HasThis: true,
        Parameters: [
          20
        ]
      },
      {
        Type: 27,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: "GetBaseException",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: "get_HelpLink",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: "set_HelpLink",
        HasThis: true,
        Parameters: [
          32
        ]
      },
      {
        Type: 27,
        Name: "get_Source",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: "set_Source",
        HasThis: true,
        Parameters: [
          32
        ]
      },
      {
        Type: 27,
        Name: "get_StackTrace",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 25,
        Name: "InitializeMetadata",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 25,
        Name: "CreateAssembly",
        HasThis: false,
        Parameters: [
          33
        ]
      },
      {
        Type: 25,
        Name: "CreateClass",
        HasThis: false,
        Parameters: [
          34,
          35,
          36,
          37,
          38,
          39,
          40
        ]
      },
      {
        Type: 25,
        Name: "CreateMethod",
        HasThis: false,
        Parameters: [
          41,
          35,
          4,
          42
        ]
      },
      {
        Type: 25,
        Name: "CreateConstructor",
        HasThis: false,
        Parameters: [
          41,
          35,
          4
        ]
      },
      {
        Type: 13,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 25,
        Name: "CreateCustomAttribute",
        HasThis: false,
        Parameters: [
          43,
          44
        ]
      },
      {
        Type: 32,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          45
        ]
      },
      {
        Type: 33,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 25,
        Name: "CreateProperty",
        HasThis: false,
        Parameters: [
          41,
          35,
          46,
          47
        ]
      },
      {
        Type: 14,
        Name: "get_ImplementationType",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 34,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 14,
        Name: "set_ImplementationType",
        HasThis: true,
        Parameters: [
          48
        ]
      },
      {
        Type: 14,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          49
        ]
      },
      {
        Type: 35,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          50
        ]
      },
      {
        Type: 36,
        Name: "BootModuleEntryPoint",
        HasThis: false,
        Parameters: []
      }
    ],
    ParameterReferences: [
      {
        Type: 16,
        Name: "args",
        Sequence: 1
      },
      {
        Type: 37,
        Name: "e",
        Sequence: 1
      },
      {
        Type: 21,
        Name: "d",
        Sequence: 1
      },
      {
        Type: 26,
        Name: "target",
        Sequence: 2
      },
      {
        Type: 38,
        Name: "function",
        Sequence: 3
      },
      {
        Type: 39,
        Name: "threadStart",
        Sequence: 1
      },
      {
        Type: 40,
        Name: "priority",
        Sequence: 2
      },
      {
        Type: 41,
        Name: "name",
        Sequence: 3
      },
      {
        Type: 1,
        Name: "sender",
        Sequence: 1
      },
      {
        Type: 18,
        Name: "e",
        Sequence: 2
      },
      {
        Type: 42,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 17,
        Name: "validEmail",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 2
      },
      {
        Type: 19,
        Name: "",
        Sequence: 1
      },
      {
        Type: 43,
        Name: "serverUrl",
        Sequence: 1
      },
      {
        Type: 44,
        Name: "elementTypeVTable",
        Sequence: 1
      },
      {
        Type: 45,
        Name: "length",
        Sequence: 2
      },
      {
        Type: 43,
        Name: "method",
        Sequence: 1
      },
      {
        Type: 16,
        Name: "args",
        Sequence: 2
      },
      {
        Type: 19,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 19,
        Name: "firstName",
        Sequence: 1
      },
      {
        Type: 19,
        Name: "middleName",
        Sequence: 2
      },
      {
        Type: 19,
        Name: "lastName",
        Sequence: 3
      },
      {
        Type: 19,
        Name: "emailAddress",
        Sequence: 4
      },
      {
        Type: 19,
        Name: "passwordHash",
        Sequence: 5
      },
      {
        Type: 19,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 41,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 46,
        Name: "s",
        Sequence: 1
      },
      {
        Type: 11,
        Name: "sb",
        Sequence: 1
      },
      {
        Type: 47,
        Name: "",
        Sequence: 1
      },
      {
        Type: 26,
        Name: "o",
        Sequence: 1
      },
      {
        Type: 41,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 41,
        Name: "name",
        Sequence: 1
      },
      {
        Type: 41,
        Name: "ns",
        Sequence: 1
      },
      {
        Type: 41,
        Name: "name",
        Sequence: 2
      },
      {
        Type: 48,
        Name: "assembly",
        Sequence: 3
      },
      {
        Type: 49,
        Name: "vtableDataPointer",
        Sequence: 4
      },
      {
        Type: 50,
        Name: "elementClass",
        Sequence: 5
      },
      {
        Type: 51,
        Name: "isInterface",
        Sequence: 6
      },
      {
        Type: 51,
        Name: "isArray",
        Sequence: 7
      },
      {
        Type: 50,
        Name: "declaringType",
        Sequence: 1
      },
      {
        Type: 45,
        Name: "vtableSlot",
        Sequence: 4
      },
      {
        Type: 52,
        Name: "attributeProvider",
        Sequence: 1
      },
      {
        Type: 53,
        Name: "constructor",
        Sequence: 2
      },
      {
        Type: 54,
        Name: "validOn",
        Sequence: 1
      },
      {
        Type: 53,
        Name: "getMethod",
        Sequence: 3
      },
      {
        Type: 53,
        Name: "setMethod",
        Sequence: 4
      },
      {
        Type: 55,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 55,
        Name: "implementationType",
        Sequence: 1
      },
      {
        Type: 56,
        Name: "",
        Sequence: 1
      }
    ],
    FieldReferences: [
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate2",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate3",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate6",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate7",
        IsStatic: true
      }
    ],
    StaticConstructors: []
  },
  Fixups: [
    {
      Description: "System.Void System.Net.Tests.Program::Main(System.String[]) @ 34",
      Offset: 34,
      Type: 9,
      Index: 0
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartProcessViewer() @ 572",
      Offset: 538,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartTests() @ 945",
      Offset: 373,
      Type: 9,
      Index: 2
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 1644",
      Offset: 699,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartProcessViewer() @ 2124",
      Offset: 480,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate2 @ 2644",
      Offset: 520,
      Type: 33,
      Index: 0
    },
    {
      Description: "System.Threading.ThreadStart @ 3284",
      Offset: 640,
      Type: 17,
      Index: 7
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 3488",
      Offset: 204,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__0() @ 3501",
      Offset: 13,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate2 @ 3827",
      Offset: 326,
      Type: 33,
      Index: 0
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate2 @ 4224",
      Offset: 397,
      Type: 33,
      Index: 0
    },
    {
      Description: "XaeiOS.Process.SIP @ 4331",
      Offset: 107,
      Type: 17,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String) @ 4584",
      Offset: 253,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate3 @ 4968",
      Offset: 384,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.EventHandler @ 5652",
      Offset: 684,
      Type: 17,
      Index: 9
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 5848",
      Offset: 196,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__1(System.Object,System.EventArgs) @ 5861",
      Offset: 13,
      Type: 9,
      Index: 7
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate3 @ 6188",
      Offset: 327,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate3 @ 6502",
      Offset: 314,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::add_Exited(System.EventHandler) @ 6603",
      Offset: 101,
      Type: 9,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::Start() @ 6981",
      Offset: 378,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 7680",
      Offset: 699,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartTests() @ 8169",
      Offset: 489,
      Type: 9,
      Index: 2
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate6 @ 8681",
      Offset: 512,
      Type: 33,
      Index: 2
    },
    {
      Description: "System.Threading.ThreadStart @ 9321",
      Offset: 640,
      Type: 17,
      Index: 7
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 9517",
      Offset: 196,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__4() @ 9530",
      Offset: 13,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate6 @ 9848",
      Offset: 318,
      Type: 33,
      Index: 2
    },
    {
      Description: "System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate6 @ 10245",
      Offset: 397,
      Type: 33,
      Index: 2
    },
    {
      Description: "XaeiOS.Process.SIP @ 10352",
      Offset: 107,
      Type: 17,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String) @ 10607",
      Offset: 255,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate7 @ 10995",
      Offset: 388,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.EventHandler @ 11679",
      Offset: 684,
      Type: 17,
      Index: 9
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 11867",
      Offset: 188,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__5(System.Object,System.EventArgs) @ 11880",
      Offset: 13,
      Type: 9,
      Index: 11
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate7 @ 12199",
      Offset: 319,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate7 @ 12513",
      Offset: 314,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::add_Exited(System.EventHandler) @ 12614",
      Offset: 101,
      Type: 9,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.Process.SIP::Start() @ 12992",
      Offset: 378,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 13691",
      Offset: 699,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::RunTests() @ 14174",
      Offset: 483,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Void System.Net.Tests.Program::Authenticate(System.Boolean) @ 14704",
      Offset: 530,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.Void System.Net.Tests.Program::Authenticate(System.Boolean) @ 15149",
      Offset: 445,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 15842",
      Offset: 693,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 16307",
      Offset: 465,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 16673",
      Offset: 366,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 17380",
      Offset: 707,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::Authenticate(System.Boolean) @ 17863",
      Offset: 483,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 19652",
      Offset: 1789,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Net.JsonRpc.JsonRpcClient @ 20037",
      Offset: 385,
      Type: 17,
      Index: 10
    },
    {
      Description: "System.Void System.Net.JsonRpc.JsonRpcClient::.ctor(System.String) @ 20192",
      Offset: 155,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 20610",
      Offset: 418,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Object @ 20614",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Object System.Net.JsonRpc.JsonRpcClient::Call(System.String,System.Object[]) @ 20799",
      Offset: 185,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 21259",
      Offset: 460,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 21745",
      Offset: 486,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 22458",
      Offset: 713,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__0() @ 22941",
      Offset: 483,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Net.Tests.ProcessViewer @ 23623",
      Offset: 682,
      Type: 17,
      Index: 6
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::.ctor() @ 23718",
      Offset: 95,
      Type: 9,
      Index: 19
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::Start() @ 24070",
      Offset: 352,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 24756",
      Offset: 686,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__1(System.Object,System.EventArgs) @ 25230",
      Offset: 474,
      Type: 9,
      Index: 7
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 26262",
      Offset: 1032,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__4() @ 26733",
      Offset: 471,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void System.Net.Tests.Program::RunTests() @ 27401",
      Offset: 668,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 28098",
      Offset: 697,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__5(System.Object,System.EventArgs) @ 28569",
      Offset: 471,
      Type: 9,
      Index: 11
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 29597",
      Offset: 1028,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Program::.ctor() @ 30068",
      Offset: 471,
      Type: 9,
      Index: 21
    },
    {
      Description: "System.Void System.Object::.ctor() @ 30562",
      Offset: 494,
      Type: 9,
      Index: 22
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 30980",
      Offset: 418,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_FirstName() @ 31454",
      Offset: 474,
      Type: 9,
      Index: 23
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 32419",
      Offset: 965,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 32893",
      Offset: 474,
      Type: 9,
      Index: 24
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 33857",
      Offset: 964,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_MiddleName() @ 34331",
      Offset: 474,
      Type: 9,
      Index: 25
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 35298",
      Offset: 967,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 35772",
      Offset: 474,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 36738",
      Offset: 966,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_LastName() @ 37212",
      Offset: 474,
      Type: 9,
      Index: 27
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 38175",
      Offset: 963,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 38649",
      Offset: 474,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 39611",
      Offset: 962,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 40085",
      Offset: 474,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 41040",
      Offset: 955,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 41514",
      Offset: 474,
      Type: 9,
      Index: 30
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 42468",
      Offset: 954,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_PasswordHash() @ 42942",
      Offset: 474,
      Type: 9,
      Index: 31
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 43913",
      Offset: 971,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 44387",
      Offset: 474,
      Type: 9,
      Index: 32
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 45357",
      Offset: 970,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::ToString() @ 45831",
      Offset: 474,
      Type: 9,
      Index: 33
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 46373",
      Offset: 542,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 47239",
      Offset: 866,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::.ctor(System.String,System.String,System.String,System.String,System.String) @ 47713",
      Offset: 474,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Object::.ctor() @ 48310",
      Offset: 597,
      Type: 9,
      Index: 22
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 48364",
      Offset: 54,
      Type: 9,
      Index: 24
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 48736",
      Offset: 372,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 49110",
      Offset: 374,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 49480",
      Offset: 370,
      Type: 9,
      Index: 30
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 49858",
      Offset: 378,
      Type: 9,
      Index: 32
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 50570",
      Offset: 712,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.AuthenticationException::.ctor(System.String) @ 51041",
      Offset: 471,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 51571",
      Offset: 530,
      Type: 9,
      Index: 36
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 52002",
      Offset: 431,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.Shared.InvalidUsernameAndPasswordException::.ctor() @ 52473",
      Offset: 471,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void System.Net.Tests.Shared.AuthenticationException::.ctor(System.String) @ 53032",
      Offset: 559,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 53794",
      Offset: 762,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::Start() @ 54271",
      Offset: 477,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Text.StringBuilder @ 54814",
      Offset: 543,
      Type: 17,
      Index: 11
    },
    {
      Description: "System.Void System.Text.StringBuilder::.ctor() @ 54911",
      Offset: 97,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 55269",
      Offset: 358,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildSIPTable(System.Text.StringBuilder) @ 55739",
      Offset: 470,
      Type: 9,
      Index: 40
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 56114",
      Offset: 375,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildThreadTable(System.Text.StringBuilder) @ 56496",
      Offset: 382,
      Type: 9,
      Index: 41
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 56874",
      Offset: 378,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.String System.Object::ToString() @ 57374",
      Offset: 500,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 57903",
      Offset: 529,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::UpdateInnerHTML(System.Text.StringBuilder) @ 58270",
      Offset: 367,
      Type: 9,
      Index: 43
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 58648",
      Offset: 378,
      Type: 9,
      Index: 44
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 59143",
      Offset: 495,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::UpdateInnerHTML(System.Text.StringBuilder) @ 59626",
      Offset: 483,
      Type: 9,
      Index: 43
    },
    {
      Description: "System.String System.Object::ToString() @ 60720",
      Offset: 1094,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 61790",
      Offset: 1070,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildSIPTable(System.Text.StringBuilder) @ 62276",
      Offset: 486,
      Type: 9,
      Index: 40
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 62848",
      Offset: 572,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 63252",
      Offset: 404,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 63716",
      Offset: 464,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 64102",
      Offset: 386,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 64482",
      Offset: 380,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 64862",
      Offset: 380,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 65240",
      Offset: 378,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 65622",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 66003",
      Offset: 381,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 66385",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 66769",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "XaeiOS.Process.SIP[] XaeiOS.Process.SIP::GetSIPs() @ 67159",
      Offset: 390,
      Type: 9,
      Index: 45
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 68492",
      Offset: 1333,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 68975",
      Offset: 483,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 69357",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Int32 XaeiOS.Process.SIP::get_ID() @ 69745",
      Offset: 388,
      Type: 9,
      Index: 46
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 70245",
      Offset: 500,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 70621",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 71005",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.String XaeiOS.Process.SIP::get_Name() @ 71393",
      Offset: 388,
      Type: 9,
      Index: 47
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 71826",
      Offset: 433,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 72202",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 72586",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 73401",
      Offset: 815,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildThreadTable(System.Text.StringBuilder) @ 73890",
      Offset: 489,
      Type: 9,
      Index: 41
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 74465",
      Offset: 575,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 74875",
      Offset: 410,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 75339",
      Offset: 464,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 75725",
      Offset: 386,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 76105",
      Offset: 380,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 76485",
      Offset: 380,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 76861",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 77243",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 77624",
      Offset: 381,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 78006",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 78390",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 78772",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 79152",
      Offset: 380,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 79536",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 79918",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 80308",
      Offset: 390,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 80692",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 81074",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 81464",
      Offset: 390,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 81848",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Threading.Thread[] System.Threading.Thread::GetThreads() @ 82238",
      Offset: 390,
      Type: 9,
      Index: 48
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 83579",
      Offset: 1341,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 84062",
      Offset: 483,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 84444",
      Offset: 382,
      Type: 9,
      Index: 39
    },
    {
      Description: "XaeiOS.TaskHandle System.Threading.Thread::get_Task() @ 84831",
      Offset: 387,
      Type: 9,
      Index: 49
    },
    {
      Description: "System.Int32 XaeiOS.TaskHandle::get_ID() @ 84911",
      Offset: 80,
      Type: 9,
      Index: 50
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 85399",
      Offset: 488,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 85775",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 86159",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.String System.Threading.Thread::get_Name() @ 86546",
      Offset: 387,
      Type: 9,
      Index: 51
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 86620",
      Offset: 74,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 86996",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 87380",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "XaeiOS.Process.SIP System.Threading.Thread::get_SIP() @ 87768",
      Offset: 388,
      Type: 9,
      Index: 52
    },
    {
      Description: "System.String XaeiOS.Process.SIP::get_Name() @ 88206",
      Offset: 438,
      Type: 9,
      Index: 47
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 88627",
      Offset: 421,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 89003",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 89387",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Boolean System.Threading.Thread::get_Blocked() @ 89774",
      Offset: 387,
      Type: 9,
      Index: 53
    },
    {
      Description: "System.String System.Object::ToString() @ 89860",
      Offset: 86,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 90282",
      Offset: 422,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 90658",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 91042",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Threading.ThreadPriority System.Threading.Thread::get_Priority() @ 91430",
      Offset: 388,
      Type: 9,
      Index: 54
    },
    {
      Description: "System.String System.Object::ToString() @ 91875",
      Offset: 445,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 92333",
      Offset: 458,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 92709",
      Offset: 376,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Text.StringBuilder::Append(System.String) @ 93093",
      Offset: 384,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 93908",
      Offset: 815,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::.ctor() @ 94388",
      Offset: 480,
      Type: 9,
      Index: 19
    },
    {
      Description: "System.Void System.Object::.ctor() @ 94888",
      Offset: 500,
      Type: 9,
      Index: 22
    },
    {
      Description: "System.Exception XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 95306",
      Offset: 418,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Net.Tests.Program @ 5",
      Offset: 5,
      Type: 18,
      Index: 0
    },
    {
      Description: "System.String System.Object::ToString() @ 56",
      Offset: 51,
      Type: 10,
      Index: 42
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 114",
      Offset: 58,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 174",
      Offset: 60,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Void System.Object::Finalize() @ 244",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Net.Tests.Shared.IUser @ 705",
      Offset: 461,
      Type: 18,
      Index: 12
    },
    {
      Description: "System.Net.Tests.Shared.User @ 1617",
      Offset: 912,
      Type: 18,
      Index: 2
    },
    {
      Description: "System.Net.Tests.Shared.IUser @ 1680",
      Offset: 63,
      Type: 18,
      Index: 12
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_FirstName() @ 1750",
      Offset: 70,
      Type: 66,
      Index: 58
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_FirstName() @ 1763",
      Offset: 13,
      Type: 10,
      Index: 23
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_FirstName(System.String) @ 1852",
      Offset: 89,
      Type: 66,
      Index: 59
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 1865",
      Offset: 13,
      Type: 10,
      Index: 24
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_MiddleName() @ 1965",
      Offset: 100,
      Type: 66,
      Index: 60
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_MiddleName() @ 1978",
      Offset: 13,
      Type: 10,
      Index: 25
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_MiddleName(System.String) @ 2069",
      Offset: 91,
      Type: 66,
      Index: 61
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 2082",
      Offset: 13,
      Type: 10,
      Index: 26
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_LastName() @ 2184",
      Offset: 102,
      Type: 66,
      Index: 62
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_LastName() @ 2197",
      Offset: 13,
      Type: 10,
      Index: 27
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_LastName(System.String) @ 2284",
      Offset: 87,
      Type: 66,
      Index: 63
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 2297",
      Offset: 13,
      Type: 10,
      Index: 28
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_EmailAddress() @ 2395",
      Offset: 98,
      Type: 66,
      Index: 64
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 2408",
      Offset: 13,
      Type: 10,
      Index: 29
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_EmailAddress(System.String) @ 2503",
      Offset: 95,
      Type: 66,
      Index: 65
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 2516",
      Offset: 13,
      Type: 10,
      Index: 30
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_PasswordHash() @ 2622",
      Offset: 106,
      Type: 66,
      Index: 66
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_PasswordHash() @ 2635",
      Offset: 13,
      Type: 10,
      Index: 31
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_PasswordHash(System.String) @ 2730",
      Offset: 95,
      Type: 66,
      Index: 67
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 2743",
      Offset: 13,
      Type: 10,
      Index: 32
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::ToString() @ 2873",
      Offset: 130,
      Type: 10,
      Index: 33
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 2946",
      Offset: 73,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 3006",
      Offset: 60,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Void System.Object::Finalize() @ 3076",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_FirstName() @ 3132",
      Offset: 56,
      Type: 10,
      Index: 23
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 3210",
      Offset: 78,
      Type: 10,
      Index: 24
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_MiddleName() @ 3299",
      Offset: 89,
      Type: 10,
      Index: 25
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 3378",
      Offset: 79,
      Type: 10,
      Index: 26
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_LastName() @ 3468",
      Offset: 90,
      Type: 10,
      Index: 27
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 3545",
      Offset: 77,
      Type: 10,
      Index: 28
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 3634",
      Offset: 89,
      Type: 10,
      Index: 29
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 3716",
      Offset: 82,
      Type: 10,
      Index: 30
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_PasswordHash() @ 3809",
      Offset: 93,
      Type: 10,
      Index: 31
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 3891",
      Offset: 82,
      Type: 10,
      Index: 32
    },
    {
      Description: "System.Net.Tests.Shared.AuthenticationException @ 3982",
      Offset: 91,
      Type: 18,
      Index: 3
    },
    {
      Description: "System.String System.Exception::ToString() @ 4056",
      Offset: 74,
      Type: 10,
      Index: 68
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 4117",
      Offset: 61,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 4177",
      Offset: 60,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Void System.Object::Finalize() @ 4247",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception System.Exception::GetBaseException() @ 4303",
      Offset: 56,
      Type: 10,
      Index: 69
    },
    {
      Description: "System.String System.Exception::get_HelpLink() @ 4375",
      Offset: 72,
      Type: 10,
      Index: 70
    },
    {
      Description: "System.Void System.Exception::set_HelpLink(System.String) @ 4440",
      Offset: 65,
      Type: 10,
      Index: 71
    },
    {
      Description: "System.String System.Exception::get_Source() @ 4516",
      Offset: 76,
      Type: 10,
      Index: 72
    },
    {
      Description: "System.Void System.Exception::set_Source(System.String) @ 4579",
      Offset: 63,
      Type: 10,
      Index: 73
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 4653",
      Offset: 74,
      Type: 10,
      Index: 74
    },
    {
      Description: "System.Net.Tests.Shared.InvalidUsernameAndPasswordException @ 4719",
      Offset: 66,
      Type: 18,
      Index: 5
    },
    {
      Description: "System.String System.Exception::ToString() @ 4805",
      Offset: 86,
      Type: 10,
      Index: 68
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 4866",
      Offset: 61,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 4926",
      Offset: 60,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Void System.Object::Finalize() @ 4996",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception System.Exception::GetBaseException() @ 5052",
      Offset: 56,
      Type: 10,
      Index: 69
    },
    {
      Description: "System.String System.Exception::get_HelpLink() @ 5124",
      Offset: 72,
      Type: 10,
      Index: 70
    },
    {
      Description: "System.Void System.Exception::set_HelpLink(System.String) @ 5189",
      Offset: 65,
      Type: 10,
      Index: 71
    },
    {
      Description: "System.String System.Exception::get_Source() @ 5265",
      Offset: 76,
      Type: 10,
      Index: 72
    },
    {
      Description: "System.Void System.Exception::set_Source(System.String) @ 5328",
      Offset: 63,
      Type: 10,
      Index: 73
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 5402",
      Offset: 74,
      Type: 10,
      Index: 74
    },
    {
      Description: "System.Net.Tests.ProcessViewer @ 5468",
      Offset: 66,
      Type: 18,
      Index: 6
    },
    {
      Description: "System.String System.Object::ToString() @ 5525",
      Offset: 57,
      Type: 10,
      Index: 42
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 5583",
      Offset: 58,
      Type: 10,
      Index: 55
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 5643",
      Offset: 60,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Void System.Object::Finalize() @ 5713",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Net.Tests.Program @ 2",
      Offset: 2,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Object @ 10",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "System.Net.Tests.Shared.User @ 65",
      Offset: 55,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Object @ 73",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "System.Net.Tests.Shared.AuthenticationException @ 132",
      Offset: 59,
      Type: 20,
      Index: 3
    },
    {
      Description: "System.Exception @ 140",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "System.Net.Tests.Shared.InvalidUsernameAndPasswordException @ 221",
      Offset: 81,
      Type: 20,
      Index: 5
    },
    {
      Description: "System.Net.Tests.Shared.AuthenticationException @ 229",
      Offset: 8,
      Type: 20,
      Index: 3
    },
    {
      Description: "System.Net.Tests.ProcessViewer @ 353",
      Offset: 124,
      Type: 20,
      Index: 6
    },
    {
      Description: "System.Object @ 361",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata() @ 467",
      Offset: 106,
      Type: 12,
      Index: 75
    },
    {
      Description: "System.Runtime.Assembly System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly(System.String) @ 554",
      Offset: 87,
      Type: 12,
      Index: 76
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 683",
      Offset: 129,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.Program @ 720",
      Offset: 37,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 903",
      Offset: 183,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::Main(System.String[]) @ 921",
      Offset: 18,
      Type: 12,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1053",
      Offset: 132,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartProcessViewer() @ 1085",
      Offset: 32,
      Type: 12,
      Index: 1
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1231",
      Offset: 146,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::StartTests() @ 1255",
      Offset: 24,
      Type: 12,
      Index: 2
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1393",
      Offset: 138,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::RunTests() @ 1415",
      Offset: 22,
      Type: 12,
      Index: 12
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1551",
      Offset: 136,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::Authenticate(System.Boolean) @ 1577",
      Offset: 26,
      Type: 12,
      Index: 13
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 1717",
      Offset: 140,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__0() @ 1755",
      Offset: 38,
      Type: 12,
      Index: 5
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 1907",
      Offset: 152,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Runtime.CompilerServices.CompilerGeneratedAttribute @ 1978",
      Offset: 71,
      Type: 20,
      Index: 13
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 2195",
      Offset: 217,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 2214",
      Offset: 19,
      Type: 12,
      Index: 80
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 2337",
      Offset: 123,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 2348",
      Offset: 11,
      Type: 12,
      Index: 82
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 2460",
      Offset: 112,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 2471",
      Offset: 11,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2592",
      Offset: 121,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartProcessViewer>b__1(System.Object,System.EventArgs) @ 2630",
      Offset: 38,
      Type: 12,
      Index: 7
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 2775",
      Offset: 145,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 2787",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 2909",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__4() @ 2939",
      Offset: 30,
      Type: 12,
      Index: 10
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 3076",
      Offset: 137,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 3088",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3210",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Program::<StartTests>b__5(System.Object,System.EventArgs) @ 3240",
      Offset: 30,
      Type: 12,
      Index: 11
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 3377",
      Offset: 137,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 3389",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 3511",
      Offset: 122,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.Tests.Program::.ctor() @ 3530",
      Offset: 19,
      Type: 12,
      Index: 21
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 3663",
      Offset: 133,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.Shared.IUser @ 3705",
      Offset: 42,
      Type: 20,
      Index: 12
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 3893",
      Offset: 188,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_FirstName() @ 3923",
      Offset: 30,
      Type: 68,
      Index: 58
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4065",
      Offset: 142,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_FirstName(System.String) @ 4095",
      Offset: 30,
      Type: 68,
      Index: 59
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4237",
      Offset: 142,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_MiddleName() @ 4268",
      Offset: 31,
      Type: 68,
      Index: 60
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4411",
      Offset: 143,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_MiddleName(System.String) @ 4442",
      Offset: 31,
      Type: 68,
      Index: 61
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4585",
      Offset: 143,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_LastName() @ 4614",
      Offset: 29,
      Type: 68,
      Index: 62
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4755",
      Offset: 141,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_LastName(System.String) @ 4784",
      Offset: 29,
      Type: 68,
      Index: 63
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4925",
      Offset: 141,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_EmailAddress() @ 4958",
      Offset: 33,
      Type: 68,
      Index: 64
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5103",
      Offset: 145,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_EmailAddress(System.String) @ 5136",
      Offset: 33,
      Type: 68,
      Index: 65
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5281",
      Offset: 145,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.IUser::get_PasswordHash() @ 5314",
      Offset: 33,
      Type: 68,
      Index: 66
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5459",
      Offset: 145,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.IUser::set_PasswordHash(System.String) @ 5492",
      Offset: 33,
      Type: 68,
      Index: 67
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 5637",
      Offset: 145,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 5799",
      Offset: 162,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 5963",
      Offset: 164,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 6123",
      Offset: 160,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 6291",
      Offset: 168,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 6459",
      Offset: 168,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.JsonRpc.JsonRpcImplementationAttribute @ 6521",
      Offset: 62,
      Type: 20,
      Index: 14
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 6731",
      Offset: 210,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Type System.Net.JsonRpc.JsonRpcImplementationAttribute::get_ImplementationType() @ 6768",
      Offset: 37,
      Type: 12,
      Index: 85
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 6912",
      Offset: 144,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 6924",
      Offset: 12,
      Type: 12,
      Index: 86
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 7046",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.JsonRpc.JsonRpcImplementationAttribute::set_ImplementationType(System.Type) @ 7083",
      Offset: 37,
      Type: 12,
      Index: 87
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 7227",
      Offset: 144,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 7239",
      Offset: 12,
      Type: 12,
      Index: 86
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 7361",
      Offset: 122,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.JsonRpc.JsonRpcImplementationAttribute::.ctor(System.Type) @ 7381",
      Offset: 20,
      Type: 12,
      Index: 88
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 7515",
      Offset: 134,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 7686",
      Offset: 171,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Net.JsonRpc.JsonRpcImplementationAttribute::.ctor(System.Type) @ 7698",
      Offset: 12,
      Type: 12,
      Index: 89
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7820",
      Offset: 122,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.Shared.User @ 7861",
      Offset: 41,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8050",
      Offset: 189,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_FirstName() @ 8078",
      Offset: 28,
      Type: 12,
      Index: 23
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_FirstName() @ 8080",
      Offset: 2,
      Type: 68,
      Index: 23
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 8229",
      Offset: 149,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 8241",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8363",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 8391",
      Offset: 28,
      Type: 12,
      Index: 24
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) @ 8393",
      Offset: 2,
      Type: 68,
      Index: 24
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 8542",
      Offset: 149,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 8554",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8676",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_MiddleName() @ 8705",
      Offset: 29,
      Type: 12,
      Index: 25
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_MiddleName() @ 8707",
      Offset: 2,
      Type: 68,
      Index: 25
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 8857",
      Offset: 150,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 8869",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8991",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 9020",
      Offset: 29,
      Type: 12,
      Index: 26
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) @ 9022",
      Offset: 2,
      Type: 68,
      Index: 26
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 9172",
      Offset: 150,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 9184",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9306",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_LastName() @ 9333",
      Offset: 27,
      Type: 12,
      Index: 27
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_LastName() @ 9335",
      Offset: 2,
      Type: 68,
      Index: 27
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 9483",
      Offset: 148,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 9495",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9617",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 9644",
      Offset: 27,
      Type: 12,
      Index: 28
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_LastName(System.String) @ 9646",
      Offset: 2,
      Type: 68,
      Index: 28
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 9794",
      Offset: 148,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 9806",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9928",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 9959",
      Offset: 31,
      Type: 12,
      Index: 29
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_EmailAddress() @ 9961",
      Offset: 2,
      Type: 68,
      Index: 29
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10122",
      Offset: 161,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 10153",
      Offset: 31,
      Type: 12,
      Index: 30
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) @ 10155",
      Offset: 2,
      Type: 68,
      Index: 30
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10316",
      Offset: 161,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_PasswordHash() @ 10347",
      Offset: 31,
      Type: 12,
      Index: 31
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::get_PasswordHash() @ 10349",
      Offset: 2,
      Type: 68,
      Index: 31
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 10501",
      Offset: 152,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 10513",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10635",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 10666",
      Offset: 31,
      Type: 12,
      Index: 32
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) @ 10668",
      Offset: 2,
      Type: 68,
      Index: 32
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 10820",
      Offset: 152,
      Type: 12,
      Index: 81
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 10832",
      Offset: 12,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10954",
      Offset: 122,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::ToString() @ 10977",
      Offset: 23,
      Type: 12,
      Index: 33
    },
    {
      Description: "System.String System.Net.Tests.Shared.User::ToString() @ 10979",
      Offset: 2,
      Type: 68,
      Index: 33
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 11132",
      Offset: 153,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.Tests.Shared.User::.ctor(System.String,System.String,System.String,System.String,System.String) @ 11152",
      Offset: 20,
      Type: 12,
      Index: 34
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11286",
      Offset: 134,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11448",
      Offset: 162,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11612",
      Offset: 164,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11772",
      Offset: 160,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11940",
      Offset: 168,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 12108",
      Offset: 168,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.Shared.AuthenticationException @ 12168",
      Offset: 60,
      Type: 20,
      Index: 3
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 12376",
      Offset: 208,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.Tests.Shared.AuthenticationException::.ctor(System.String) @ 12396",
      Offset: 20,
      Type: 12,
      Index: 35
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 12530",
      Offset: 134,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.Shared.InvalidUsernameAndPasswordException @ 12602",
      Offset: 72,
      Type: 20,
      Index: 5
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 12822",
      Offset: 220,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.Tests.Shared.InvalidUsernameAndPasswordException::.ctor() @ 12842",
      Offset: 20,
      Type: 12,
      Index: 37
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 12976",
      Offset: 134,
      Type: 12,
      Index: 77
    },
    {
      Description: "System.Net.Tests.ProcessViewer @ 13019",
      Offset: 43,
      Type: 20,
      Index: 6
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13210",
      Offset: 191,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::Start() @ 13230",
      Offset: 20,
      Type: 12,
      Index: 20
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13366",
      Offset: 136,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::UpdateInnerHTML(System.Text.StringBuilder) @ 13396",
      Offset: 30,
      Type: 12,
      Index: 43
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13542",
      Offset: 146,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildSIPTable(System.Text.StringBuilder) @ 13570",
      Offset: 28,
      Type: 12,
      Index: 40
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13714",
      Offset: 144,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::BuildThreadTable(System.Text.StringBuilder) @ 13745",
      Offset: 31,
      Type: 12,
      Index: 41
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 13892",
      Offset: 147,
      Type: 12,
      Index: 79
    },
    {
      Description: "System.Void System.Net.Tests.ProcessViewer::.ctor() @ 13912",
      Offset: 20,
      Type: 12,
      Index: 19
    }
  ]
}
]]></Header><Code Length="29"><![CDATA[function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Program::Main(System.String[])
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null])/*System.Net.Tests.Program::StartProcessViewer()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null])/*System.Net.Tests.Program::StartTests()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void System.Net.Tests.Program::StartProcessViewer()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = _[]/*$t0 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate2*/;
                    if(r1)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = {$:_[],0:null,1:null,2:null,3:null}/*$t3 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(null, System.Net.Tests.Program::<StartProcessViewer>b__0)*/;
                    $$[](r0,null,$$[])/*$t3..ctor(null, System.Net.Tests.Program::<StartProcessViewer>b__0)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    _[] = r0/*System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate2 = $t3*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = _[]/*$t4 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate2*/;
                    r2 = {$:_[],0:null,1:null,2:null,3:0,4:0,5:null,6:null,7:null,8:null,9:null,10:null}/*$t7 = new System.Void XaeiOS.Process.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String)($t4, 3, "Process Viewer")*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null,r0,3,"Process Viewer"])/*$t7..ctor($t4, 3, "Process Viewer")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    r0 = _[]/*$t8 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate3*/;
                    r1 = r2/*$ts0 = $t7*/;
                    if(r0)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = {$:_[],0:null,1:null,2:null,3:null}/*$t11 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(null, System.Net.Tests.Program::<StartProcessViewer>b__1)*/;
                    $$[](r0,null,$$[])/*$t11..ctor(null, System.Net.Tests.Program::<StartProcessViewer>b__1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    _[] = r0/*System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate3 = $t11*/;
                    r1 = r2/*$ts0 = $t7*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    $ep = 9;
                    r0 = _[]/*$t12 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate3*/;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null,r0])/*$ts0.add_Exited($t12)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null])/*$t7.Start()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void System.Net.Tests.Program::StartTests()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = _[]/*$t0 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate6*/;
                    if(r1)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = {$:_[],0:null,1:null,2:null,3:null}/*$t3 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(null, System.Net.Tests.Program::<StartTests>b__4)*/;
                    $$[](r0,null,$$[])/*$t3..ctor(null, System.Net.Tests.Program::<StartTests>b__4)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    _[] = r0/*System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate6 = $t3*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = _[]/*$t4 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate6*/;
                    r2 = {$:_[],0:null,1:null,2:null,3:0,4:0,5:null,6:null,7:null,8:null,9:null,10:null}/*$t7 = new System.Void XaeiOS.Process.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String)($t4, 3, "System.Net.Tests")*/;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null,r0,3,"System.Net.Tests"])/*$t7..ctor($t4, 3, "System.Net.Tests")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    r0 = _[]/*$t8 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate7*/;
                    r1 = r2/*$ts0 = $t7*/;
                    if(r0)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = {$:_[],0:null,1:null,2:null,3:null}/*$t11 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(null, System.Net.Tests.Program::<StartTests>b__5)*/;
                    $$[](r0,null,$$[])/*$t11..ctor(null, System.Net.Tests.Program::<StartTests>b__5)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    _[] = r0/*System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate7 = $t11*/;
                    r1 = r2/*$ts0 = $t7*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    $ep = 9;
                    r0 = _[]/*$t12 = System.Net.Tests.Program.CS$<>9__CachedAnonymousMethodDelegate7*/;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null,r0])/*$ts0.add_Exited($t12)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r2,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1,r2],[null,null])/*$t7.Start()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1,r2]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void System.Net.Tests.Program::RunTests()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,1])/*System.Net.Tests.Program::Authenticate(1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 6;
                    $f.$ecp = 3/*Frame.ExceptionCatchPointer = 3*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,0])/*System.Net.Tests.Program::Authenticate(0)*/;
                    continue $ctrl;
                }
                case 3:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    r0 = $f.$e/*$t3 = $e*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,"Got expected exception ",r0])/*$rv = System.String::Concat("Got expected exception ", $t3)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t5 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,r0])/*System.Console::WriteLine($t5)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null,"Done"])/*System.Console::WriteLine("Done")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2)
// : System.Void System.Net.Tests.Program::Authenticate(System.Boolean)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = (!$f[2])/*V_4.1 = BooleanNot validEmail*/;
                    if(r1)
                    {
                        $ep = 3;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    r0 = "m.public@tenpow.com"/*V_0.1 = "m.public@tenpow.com"*/;
                    $ep = 4;
                    continue $ctrl;
                }
                case 3:
                {
                    r0 = "nobody@tenpow.com"/*V_0.2 = "nobody@tenpow.com"*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = ("Authenticating as " + r0)/*$t7 = System.String::Concat("Authenticating as ", V_0.3)*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*System.Console::WriteLine($t7)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r1 = {$:_[],0:null,1:null,2:null}/*$t9 = new System.Void System.Net.JsonRpc.JsonRpcClient::.ctor(System.String)("http://localhost:7777/")*/;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"http://localhost:7777/"])/*$t9..ctor("http://localhost:7777/")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r2 = $$[](_[],2)/*V_5.1 = new System.Object[2]*/;
                    r2[0] = r0/*V_5.1[0] = V_0.3*/;
                    r2[1] = "ABCDEFG"/*V_5.1[1] = "ABCDEFG"*/;
                    $rv = $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Authenticate",r2])/*$rv = $t9.Call("Authenticate", V_5.1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r1 = $rv/*V_3.1 = $rv*/;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Authentication succeeded: ",r1])/*$rv = System.String::Concat("Authentication succeeded: ", V_3.1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r1 = $rv/*$t17 = $rv*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*System.Console::WriteLine($t17)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void System.Net.Tests.Program::<StartProcessViewer>b__0()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    LogWrite("INFO", "Starting Process Viewer")/*System.Diagnostics.Logging::Info("Starting Process Viewer")*/;
                    r0 = {$:_[]}/*$t1 = new System.Void System.Net.Tests.ProcessViewer::.ctor()()*/;
                    $$[].call(r0,0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null])/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r0,0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null])/*$t1.Start()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Program::<StartProcessViewer>b__1(System.Object,System.EventArgs)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    LogWrite("INFO", "Process Viewer exited")/*System.Diagnostics.Logging::Info("Process Viewer exited")*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Program::<StartTests>b__4()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    LogWrite("INFO", "Starting System.Net.Tests")/*System.Diagnostics.Logging::Info("Starting System.Net.Tests")*/;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null])/*System.Net.Tests.Program::RunTests()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Program::<StartTests>b__5(System.Object,System.EventArgs)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    LogWrite("INFO", "System.Net.Tests exited")/*System.Diagnostics.Logging::Info("System.Net.Tests exited")*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Program::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::get_FirstName()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[1]/*V_0.1 = this.<FirstName>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::set_FirstName(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[1] = $f[2]/*this.<FirstName>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::get_MiddleName()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[2]/*V_0.1 = this.<MiddleName>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[2] = $f[2]/*this.<MiddleName>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::get_LastName()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[3]/*V_0.1 = this.<LastName>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::set_LastName(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[3] = $f[2]/*this.<LastName>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::get_EmailAddress()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[0]/*V_0.1 = this._emailAddress*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[0] = $f[2]/*this._emailAddress = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::get_PasswordHash()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[4]/*V_0.1 = this.<PasswordHash>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[4] = $f[2]/*this.<PasswordHash>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String System.Net.Tests.Shared.User::ToString()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r0],[null,null])/*$rv = this.get_EmailAddress()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t2 = $rv*/;
                    r0 = ("{User: " + r0 + "}")/*V_0.1 = System.String::Concat("{User: ", $t2, "}")*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.User::.ctor(System.String,System.String,System.String,System.String,System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this)/*this..ctor()*/;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,$f[2]])/*this.set_FirstName(firstName)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,$f[3]])/*this.set_MiddleName(middleName)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,$f[4]])/*this.set_LastName(lastName)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,$f[5]])/*this.set_EmailAddress(emailAddress)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,$f[6]])/*this.set_PasswordHash(passwordHash)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.AuthenticationException::.ctor(System.String)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this,$f[2])/*this..ctor(message)*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.Shared.InvalidUsernameAndPasswordException::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f],[null,null,"Invalid username/password combination"])/*this..ctor("Invalid username/password combination")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void System.Net.Tests.ProcessViewer::Start()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = {$:_[],0:null}/*$t1 = new System.Void System.Text.StringBuilder::.ctor()()*/;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null])/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,"<table cellspacing=2 cellpading=2><tr valign=top><td>"])/*$t1.Append("<table cellspacing=2 cellpading=2><tr valign=top><td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,r1])/*this.BuildSIPTable($t1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,"</td><td>"])/*$t1.Append("</td><td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,r1])/*this.BuildThreadTable($t1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,"</td></tr></table>"])/*$t1.Append("</td></tr></table>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = new Date()/*$t8 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r0.$[].call(r0,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null])/*$rv = $t8.ToString()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r0 = $rv/*$t9 = $rv*/;
                    r0 = ("<br />Last updated: " + r0)/*$t10 = System.String::Concat("<br />Last updated: ", $t9)*/;
                    $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,r0])/*$t1.Append($t10)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(this,0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,r1])/*this.UpdateInnerHTML($t1)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 1;
                    $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null,250])/*System.Threading.Thread::Sleep(250)*/;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void System.Net.Tests.ProcessViewer::UpdateInnerHTML(System.Text.StringBuilder)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = document/*$t0 = System.Browser.Dom.DomManager::get_Document()*/;
                    $rv = r0.getElementById("process-viewer-area")/*$rv = $t0.GetElementById("process-viewer-area")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*V_0.1 = $rv*/;
                    $rv = $f[2].$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r0,r1],[null,null])/*$rv = sb.ToString()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r1 = $rv/*$t4 = $rv*/;
                    r0.innerHTML = r1/*V_0.1.set_InnerHtml($t4)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r0,r1]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r0,r1]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2)
// : System.Void System.Net.Tests.ProcessViewer::BuildSIPTable(System.Text.StringBuilder)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"SIP Table:<br />"])/*sb.Append("SIP Table:<br />")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"----------------------------------------<br />"])/*sb.Append("----------------------------------------<br />")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<table>"])/*sb.Append("<table>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<tr>"])/*sb.Append("<tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"PID"])/*sb.Append("PID")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Name"])/*sb.Append("Name")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</tr>"])/*sb.Append("</tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = XaeiOS.Process.SIP::GetSIPs()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    r2 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 14;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    r1 = (r0 < r2.length)/*V_4.1 = V_1.3 LessThan (System.Int32)V_0.1.Length*/;
                    if(r1)
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 15;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</table>"])/*sb.Append("</table>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    return;
                }
                case 17:
                {
                    $ep = 18;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<tr>"])/*sb.Append("<tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $rv = $$[].call(r2[r0],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = V_0.1[V_1.3].get_ID()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r1 = $rv/*V_3.1 = $rv*/;
                    r1 = r1.toString()/*$t37 = V_3.1.ToString()*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t37)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    $rv = $$[].call(r2[r0],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = V_0.1[V_1.3].get_Name()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r1 = $rv/*$t43 = $rv*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t43)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</tr>"])/*sb.Append("</tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 14;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2)
// : System.Void System.Net.Tests.ProcessViewer::BuildThreadTable(System.Text.StringBuilder)
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Thread Table:<br />"])/*sb.Append("Thread Table:<br />")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"----------------------------------------<br />"])/*sb.Append("----------------------------------------<br />")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<table>"])/*sb.Append("<table>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<tr>"])/*sb.Append("<tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"ID"])/*sb.Append("ID")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Name"])/*sb.Append("Name")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"SIP"])/*sb.Append("SIP")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Blocked?"])/*sb.Append("Blocked?")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"Priority"])/*sb.Append("Priority")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</tr>"])/*sb.Append("</tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $rv = $$[](0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = System.Threading.Thread::GetThreads()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    r2 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 23;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    r1 = (r0 < r2.length)/*V_5.1 = V_1.3 LessThan (System.Int32)V_0.1.Length*/;
                    if(r1)
                    {
                        $ep = 26;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 24;
                        if(0 > $end--)
                        {
                            throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                        }

                    }
                }
                case 24:
                {
                    $ep = 25;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</table>"])/*sb.Append("</table>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    return;
                }
                case 26:
                {
                    $ep = 27;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<tr>"])/*sb.Append("<tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    r1 = $$[].call(r2[r0])/*$t54 = V_0.1[V_1.3].get_Task()*/;
                    $rv = $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = $t54.get_ID()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r1 = $rv/*V_3.1 = $rv*/;
                    r1 = r1.toString()/*$t56 = V_3.1.ToString()*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t56)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    r1 = $$[].call(r2[r0])/*$t62 = V_0.1[V_1.3].get_Name()*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t62)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    $ep = 34;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    $ep = 35;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $rv = $$[].call(r2[r0],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = V_0.1[V_1.3].get_SIP()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    r1 = $rv/*$t68 = $rv*/;
                    $rv = $$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = $t68.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    r1 = $rv/*$t69 = $rv*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t69)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    $ep = 39;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    $ep = 40;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    $ep = 41;
                    r1 = $$[].call(r2[r0])/*V_4.1 = V_0.1[V_1.3].get_Blocked()*/;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = V_4.1.ToString()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 41:
                {
                    $ep = 42;
                    r1 = $rv/*$t76 = $rv*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t76)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    $ep = 43;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 43:
                {
                    $ep = 44;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"<td>"])/*sb.Append("<td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 44:
                {
                    $ep = 45;
                    $rv = $$[].call(r2[r0],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = V_0.1[V_1.3].get_Priority()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 45:
                {
                    $ep = 46;
                    r1 = $rv/*$t82 = $rv*/;
                    $rv = r1.$[].call(r1,0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null])/*$rv = box(System.Threading.ThreadPriority,$t82).ToString()*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 46:
                {
                    $ep = 47;
                    r1 = $rv/*$t84 = $rv*/;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,r1])/*sb.Append($t84)*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 47:
                {
                    $ep = 48;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</td>"])/*sb.Append("</td>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 48:
                {
                    $ep = 49;
                    $$[].call($f[2],0,$end,null,[$ep,$end,$rv,$pc,$f,r1,r0,r2],[null,null,"</tr>"])/*sb.Append("</tr>")*/;
                    if(0 > $end--)
                    {
                        throw [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*[Continuation]*/;

                    }
                }
                case 49:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 23;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f,r1,r0,r2]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void System.Net.Tests.ProcessViewer::.ctor()
{
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw [$ep,$end,$rv,$pc,$f]/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if($e instanceof Array)
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = [$ep,$end,$rv,$pc,$f]/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


}]]></Code><Data Length="11"><![CDATA[
// : System.Net.Tests.Program
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate2 */,
null/* System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate3 */,
null/* System.Threading.ThreadStart System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate6 */,
null/* System.EventHandler System.Net.Tests.Program::CS$<>9__CachedAnonymousMethodDelegate7 */,

// : System.Net.Tests.Shared.IUser
{
    f: 1,
    0:null/* System.String System.Net.Tests.Shared.IUser::get_FirstName() */,
    1:null/* System.Void System.Net.Tests.Shared.IUser::set_FirstName(System.String) */,
    2:null/* System.String System.Net.Tests.Shared.IUser::get_MiddleName() */,
    3:null/* System.Void System.Net.Tests.Shared.IUser::set_MiddleName(System.String) */,
    4:null/* System.String System.Net.Tests.Shared.IUser::get_LastName() */,
    5:null/* System.Void System.Net.Tests.Shared.IUser::set_LastName(System.String) */,
    6:null/* System.String System.Net.Tests.Shared.IUser::get_EmailAddress() */,
    7:null/* System.Void System.Net.Tests.Shared.IUser::set_EmailAddress(System.String) */,
    8:null/* System.String System.Net.Tests.Shared.IUser::get_PasswordHash() */,
    9:null/* System.Void System.Net.Tests.Shared.IUser::set_PasswordHash(System.String) */
},

// : System.Net.Tests.Shared.User
{
    f: 0,
    i:
    {
        :// Interface map: System.Net.Tests.Shared.IUser
        {
            :$$[]/* get_FirstName -> System.String System.Net.Tests.Shared.User::get_FirstName() */,
            :$$[]/* set_FirstName -> System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) */,
            :$$[]/* get_MiddleName -> System.String System.Net.Tests.Shared.User::get_MiddleName() */,
            :$$[]/* set_MiddleName -> System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) */,
            :$$[]/* get_LastName -> System.String System.Net.Tests.Shared.User::get_LastName() */,
            :$$[]/* set_LastName -> System.Void System.Net.Tests.Shared.User::set_LastName(System.String) */,
            :$$[]/* get_EmailAddress -> System.String System.Net.Tests.Shared.User::get_EmailAddress() */,
            :$$[]/* set_EmailAddress -> System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) */,
            :$$[]/* get_PasswordHash -> System.String System.Net.Tests.Shared.User::get_PasswordHash() */,
            :$$[]/* set_PasswordHash -> System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) */
        }
    },
    0:$$[]/* System.String System.Net.Tests.Shared.User::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String System.Net.Tests.Shared.User::get_FirstName() */,
    5:$$[]/* System.Void System.Net.Tests.Shared.User::set_FirstName(System.String) */,
    6:$$[]/* System.String System.Net.Tests.Shared.User::get_MiddleName() */,
    7:$$[]/* System.Void System.Net.Tests.Shared.User::set_MiddleName(System.String) */,
    8:$$[]/* System.String System.Net.Tests.Shared.User::get_LastName() */,
    9:$$[]/* System.Void System.Net.Tests.Shared.User::set_LastName(System.String) */,
    10:$$[]/* System.String System.Net.Tests.Shared.User::get_EmailAddress() */,
    11:$$[]/* System.Void System.Net.Tests.Shared.User::set_EmailAddress(System.String) */,
    12:$$[]/* System.String System.Net.Tests.Shared.User::get_PasswordHash() */,
    13:$$[]/* System.Void System.Net.Tests.Shared.User::set_PasswordHash(System.String) */
},

// : System.Net.Tests.Shared.AuthenticationException
{
    f: 0,
    0:$$[]/* System.String System.Exception::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Exception System.Exception::GetBaseException() */,
    5:$$[]/* System.String System.Exception::get_HelpLink() */,
    6:$$[]/* System.Void System.Exception::set_HelpLink(System.String) */,
    7:$$[]/* System.String System.Exception::get_Source() */,
    8:$$[]/* System.Void System.Exception::set_Source(System.String) */,
    9:$$[]/* System.String System.Exception::get_StackTrace() */
},

// : System.Net.Tests.Shared.InvalidUsernameAndPasswordException
{
    f: 0,
    0:$$[]/* System.String System.Exception::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Exception System.Exception::GetBaseException() */,
    5:$$[]/* System.String System.Exception::get_HelpLink() */,
    6:$$[]/* System.Void System.Exception::set_HelpLink(System.String) */,
    7:$$[]/* System.String System.Exception::get_Source() */,
    8:$$[]/* System.Void System.Exception::set_Source(System.String) */,
    9:$$[]/* System.String System.Exception::get_StackTrace() */
},

// : System.Net.Tests.ProcessViewer
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.String System.Net.JsonRpc.JsonRpcClient::RpcMethodRequestHeader */]]></Data><Initialization><![CDATA[_[].b = _[];// System.Net.Tests.Program extends System.Object
_[].b = _[];// System.Net.Tests.Shared.User extends System.Object
_[].b = _[];// System.Net.Tests.Shared.AuthenticationException extends System.Exception
_[].b = _[];// System.Net.Tests.Shared.InvalidUsernameAndPasswordException extends System.Net.Tests.Shared.AuthenticationException
_[].b = _[];// System.Net.Tests.ProcessViewer extends System.Object
var t0 = {}/* t0 = [dynamic expression]*/;
$$[]()/*System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata()*/;t0[0] = $$[]("System.Net.Tests")/*t0[0] = System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly("System.Net.Tests")*/;
t0[1] = $$[]("System.Net.Tests","Program",t0[0],,null,false,false)/*t0[1] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests", "Program", t0[0], [dynamic expression], null, False, False)*/;
t0[2] = $$[](t0[1],"Main",$$[],-1)/*t0[2] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Main", [dynamic expression], -1)*/;
t0[3] = $$[](t0[1],"StartProcessViewer",$$[],-1)/*t0[3] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "StartProcessViewer", [dynamic expression], -1)*/;
t0[4] = $$[](t0[1],"StartTests",$$[],-1)/*t0[4] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "StartTests", [dynamic expression], -1)*/;
t0[5] = $$[](t0[1],"RunTests",$$[],-1)/*t0[5] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "RunTests", [dynamic expression], -1)*/;
t0[6] = $$[](t0[1],"Authenticate",$$[],-1)/*t0[6] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Authenticate", [dynamic expression], -1)*/;
t0[7] = $$[](t0[1],"<StartProcessViewer>b__0",$$[],-1)/*t0[7] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<StartProcessViewer>b__0", [dynamic expression], -1)*/;
t0[8] = $$[]("System.Runtime.CompilerServices","CompilerGeneratedAttribute",t0[0],,null,false,false)/*t0[8] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Runtime.CompilerServices", "CompilerGeneratedAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[9] = $$[](t0[8],".ctor",$$[])/*t0[9] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[8], ".ctor", [dynamic expression])*/;
$$[](t0[8],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[8], [dynamic expression])*/;
$$[](t0[7],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[7], [dynamic expression])*/;
t0[10] = $$[](t0[1],"<StartProcessViewer>b__1",$$[],-1)/*t0[10] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<StartProcessViewer>b__1", [dynamic expression], -1)*/;
$$[](t0[10],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[10], [dynamic expression])*/;
t0[11] = $$[](t0[1],"<StartTests>b__4",$$[],-1)/*t0[11] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<StartTests>b__4", [dynamic expression], -1)*/;
$$[](t0[11],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[11], [dynamic expression])*/;
t0[12] = $$[](t0[1],"<StartTests>b__5",$$[],-1)/*t0[12] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<StartTests>b__5", [dynamic expression], -1)*/;
$$[](t0[12],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[12], [dynamic expression])*/;
t0[13] = $$[](t0[1],".ctor",$$[])/*t0[13] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[1], ".ctor", [dynamic expression])*/;
t0[14] = $$[]("System.Net.Tests.Shared","IUser",t0[0],,null,true,false)/*t0[14] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests.Shared", "IUser", t0[0], [dynamic expression], null, True, False)*/;
t0[15] = $$[](t0[14],"get_FirstName",null,)/*t0[15] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "get_FirstName", null, [dynamic expression])*/;
t0[16] = $$[](t0[14],"set_FirstName",null,)/*t0[16] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "set_FirstName", null, [dynamic expression])*/;
t0[17] = $$[](t0[14],"get_MiddleName",null,)/*t0[17] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "get_MiddleName", null, [dynamic expression])*/;
t0[18] = $$[](t0[14],"set_MiddleName",null,)/*t0[18] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "set_MiddleName", null, [dynamic expression])*/;
t0[19] = $$[](t0[14],"get_LastName",null,)/*t0[19] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "get_LastName", null, [dynamic expression])*/;
t0[20] = $$[](t0[14],"set_LastName",null,)/*t0[20] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "set_LastName", null, [dynamic expression])*/;
t0[21] = $$[](t0[14],"get_EmailAddress",null,)/*t0[21] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "get_EmailAddress", null, [dynamic expression])*/;
t0[22] = $$[](t0[14],"set_EmailAddress",null,)/*t0[22] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "set_EmailAddress", null, [dynamic expression])*/;
t0[23] = $$[](t0[14],"get_PasswordHash",null,)/*t0[23] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "get_PasswordHash", null, [dynamic expression])*/;
t0[24] = $$[](t0[14],"set_PasswordHash",null,)/*t0[24] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[14], "set_PasswordHash", null, [dynamic expression])*/;
t0[25] = $$[](t0[14],"FirstName",t0[15],t0[16])/*t0[25] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[14], "FirstName", t0[15], t0[16])*/;
t0[26] = $$[](t0[14],"MiddleName",t0[17],t0[18])/*t0[26] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[14], "MiddleName", t0[17], t0[18])*/;
t0[27] = $$[](t0[14],"LastName",t0[19],t0[20])/*t0[27] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[14], "LastName", t0[19], t0[20])*/;
t0[28] = $$[](t0[14],"EmailAddress",t0[21],t0[22])/*t0[28] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[14], "EmailAddress", t0[21], t0[22])*/;
t0[29] = $$[](t0[14],"PasswordHash",t0[23],t0[24])/*t0[29] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[14], "PasswordHash", t0[23], t0[24])*/;
t0[30] = $$[]("System.Net.JsonRpc","JsonRpcImplementationAttribute",t0[0],,null,false,false)/*t0[30] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.JsonRpc", "JsonRpcImplementationAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[31] = $$[](t0[30],"get_ImplementationType",$$[],-1)/*t0[31] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[30], "get_ImplementationType", [dynamic expression], -1)*/;
$$[](t0[31],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[31], [dynamic expression])*/;
t0[32] = $$[](t0[30],"set_ImplementationType",$$[],-1)/*t0[32] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[30], "set_ImplementationType", [dynamic expression], -1)*/;
$$[](t0[32],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[32], [dynamic expression])*/;
t0[33] = $$[](t0[30],".ctor",$$[])/*t0[33] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[30], ".ctor", [dynamic expression])*/;
t0[34] = $$[](t0[30],"ImplementationType",t0[31],t0[32])/*t0[34] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[30], "ImplementationType", t0[31], t0[32])*/;
$$[](t0[14],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[14], [dynamic expression])*/;
t0[35] = $$[]("System.Net.Tests.Shared","User",t0[0],,null,false,false)/*t0[35] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests.Shared", "User", t0[0], [dynamic expression], null, False, False)*/;
t0[36] = $$[](t0[35],"get_FirstName",$$[],)/*t0[36] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "get_FirstName", [dynamic expression], [dynamic expression])*/;
$$[](t0[36],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[36], [dynamic expression])*/;
t0[37] = $$[](t0[35],"set_FirstName",$$[],)/*t0[37] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "set_FirstName", [dynamic expression], [dynamic expression])*/;
$$[](t0[37],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[37], [dynamic expression])*/;
t0[38] = $$[](t0[35],"get_MiddleName",$$[],)/*t0[38] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "get_MiddleName", [dynamic expression], [dynamic expression])*/;
$$[](t0[38],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[38], [dynamic expression])*/;
t0[39] = $$[](t0[35],"set_MiddleName",$$[],)/*t0[39] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "set_MiddleName", [dynamic expression], [dynamic expression])*/;
$$[](t0[39],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[39], [dynamic expression])*/;
t0[40] = $$[](t0[35],"get_LastName",$$[],)/*t0[40] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "get_LastName", [dynamic expression], [dynamic expression])*/;
$$[](t0[40],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[40], [dynamic expression])*/;
t0[41] = $$[](t0[35],"set_LastName",$$[],)/*t0[41] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "set_LastName", [dynamic expression], [dynamic expression])*/;
$$[](t0[41],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[41], [dynamic expression])*/;
t0[42] = $$[](t0[35],"get_EmailAddress",$$[],)/*t0[42] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "get_EmailAddress", [dynamic expression], [dynamic expression])*/;
t0[43] = $$[](t0[35],"set_EmailAddress",$$[],)/*t0[43] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "set_EmailAddress", [dynamic expression], [dynamic expression])*/;
t0[44] = $$[](t0[35],"get_PasswordHash",$$[],)/*t0[44] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "get_PasswordHash", [dynamic expression], [dynamic expression])*/;
$$[](t0[44],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[44], [dynamic expression])*/;
t0[45] = $$[](t0[35],"set_PasswordHash",$$[],)/*t0[45] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "set_PasswordHash", [dynamic expression], [dynamic expression])*/;
$$[](t0[45],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[45], [dynamic expression])*/;
t0[46] = $$[](t0[35],"ToString",$$[],)/*t0[46] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[35], "ToString", [dynamic expression], [dynamic expression])*/;
t0[47] = $$[](t0[35],".ctor",$$[])/*t0[47] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[35], ".ctor", [dynamic expression])*/;
t0[48] = $$[](t0[35],"FirstName",t0[36],t0[37])/*t0[48] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[35], "FirstName", t0[36], t0[37])*/;
t0[49] = $$[](t0[35],"MiddleName",t0[38],t0[39])/*t0[49] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[35], "MiddleName", t0[38], t0[39])*/;
t0[50] = $$[](t0[35],"LastName",t0[40],t0[41])/*t0[50] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[35], "LastName", t0[40], t0[41])*/;
t0[51] = $$[](t0[35],"EmailAddress",t0[42],t0[43])/*t0[51] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[35], "EmailAddress", t0[42], t0[43])*/;
t0[52] = $$[](t0[35],"PasswordHash",t0[44],t0[45])/*t0[52] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[35], "PasswordHash", t0[44], t0[45])*/;
t0[53] = $$[]("System.Net.Tests.Shared","AuthenticationException",t0[0],,null,false,false)/*t0[53] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests.Shared", "AuthenticationException", t0[0], [dynamic expression], null, False, False)*/;
t0[54] = $$[](t0[53],".ctor",$$[])/*t0[54] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[53], ".ctor", [dynamic expression])*/;
t0[55] = $$[]("System.Net.Tests.Shared","InvalidUsernameAndPasswordException",t0[0],,null,false,false)/*t0[55] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests.Shared", "InvalidUsernameAndPasswordException", t0[0], [dynamic expression], null, False, False)*/;
t0[56] = $$[](t0[55],".ctor",$$[])/*t0[56] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[55], ".ctor", [dynamic expression])*/;
t0[57] = $$[]("System.Net.Tests","ProcessViewer",t0[0],,null,false,false)/*t0[57] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Net.Tests", "ProcessViewer", t0[0], [dynamic expression], null, False, False)*/;
t0[58] = $$[](t0[57],"Start",$$[],-1)/*t0[58] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[57], "Start", [dynamic expression], -1)*/;
t0[59] = $$[](t0[57],"UpdateInnerHTML",$$[],-1)/*t0[59] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[57], "UpdateInnerHTML", [dynamic expression], -1)*/;
t0[60] = $$[](t0[57],"BuildSIPTable",$$[],-1)/*t0[60] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[57], "BuildSIPTable", [dynamic expression], -1)*/;
t0[61] = $$[](t0[57],"BuildThreadTable",$$[],-1)/*t0[61] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[57], "BuildThreadTable", [dynamic expression], -1)*/;
t0[62] = $$[](t0[57],".ctor",$$[])/*t0[62] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[57], ".ctor", [dynamic expression])*/;
]]></Initialization></Object>