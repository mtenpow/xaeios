<Object><Header><![CDATA[{
  Metadata: {
    Name: {
      Name: "XaeiOS.TestSuite",
      Version: "1.0.0.0",
      Culture: ""
    },
    EntryPoint: 0,
    BootMethod: 300,
    Types: [
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestRunner",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "Main",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 0,
            HasThis: false,
            Parameters: [
              {
                Type: 77,
                Name: "args",
                Sequence: 1
              }
            ]
          },
          {
            Name: "RunProcessViewer",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 1,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "RunTestSuite",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 2,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "GetTestCases",
            ReturnType: 48,
            VTableSlot: -1,
            CodeIndex: 3,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "RunTests",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 4,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 5,
            HasThis: false,
            Parameters: [
              {
                Type: 49,
                Name: "test",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Log",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 6,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "s",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Log",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 7,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "context",
                Sequence: 1
              },
              {
                Type: 51,
                Name: "s",
                Sequence: 2
              }
            ]
          },
          {
            Name: "<RunProcessViewer>b__0",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 8,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "<RunProcessViewer>b__1",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 9,
            HasThis: false,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 55,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: "<RunTestSuite>b__4",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 10,
            HasThis: false,
            Parameters: []
          },
          {
            Name: "<RunTestSuite>b__5",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 11,
            HasThis: false,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 55,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".cctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 12,
            HasThis: false,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [
          {
            Name: "_testSuites",
            Type: 77,
            DataIndex: 1
          },
          {
            Name: "_passCount",
            Type: 68,
            DataIndex: 2
          },
          {
            Name: "_failures",
            Type: 48,
            DataIndex: 3
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate2",
            Type: 45,
            DataIndex: 4
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate3",
            Type: 47,
            DataIndex: 5
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate6",
            Type: 45,
            DataIndex: 6
          },
          {
            Name: "CS$<>9__CachedAnonymousMethodDelegate7",
            Type: 47,
            DataIndex: 7
          }
        ],
        VTableIndex: 0
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "AssertException",
        BaseType: 3,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 13,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 8
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "ITest",
        BaseType: -1,
        DeclaringType: -1,
        IsInterface: true,
        IsAbstract: true,
        Methods: [
          {
            Name: "get_Name",
            ReturnType: 51,
            VTableSlot: 0,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "get_Passed",
            ReturnType: 78,
            VTableSlot: 1,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "get_Exception",
            ReturnType: 3,
            VTableSlot: 2,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Test",
            ReturnType: 76,
            VTableSlot: 3,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 9
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestBase",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "get_Name",
            ReturnType: 51,
            VTableSlot: 4,
            CodeIndex: 14,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "get_Passed",
            ReturnType: 78,
            VTableSlot: 5,
            CodeIndex: 15,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "get_Exception",
            ReturnType: 3,
            VTableSlot: 6,
            CodeIndex: 16,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Test",
            ReturnType: 76,
            VTableSlot: 7,
            CodeIndex: 17,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: -1,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestFailed",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 18,
            HasThis: true,
            Parameters: [
              {
                Type: 3,
                Name: "e",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Log",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 19,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "s",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Assert",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 20,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 78,
                Name: "condition",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Fail",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 21,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 22,
            HasThis: true,
            Parameters: [
              {
                Type: 79,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 79,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 23,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 24,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 51,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 25,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 1,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 26,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "name",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_name",
            Type: 51,
            Offset: 0
          },
          {
            Name: "_passed",
            Type: 78,
            Offset: 1
          },
          {
            Name: "_exception",
            Type: 3,
            Offset: 2
          }
        ],
        StaticFields: [],
        VTableIndex: 10
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "XmlHttpRequestTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 27,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 28,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 11
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DictionaryRemoveSSABugTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 29,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Add",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 30,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "key",
                Sequence: 1
              },
              {
                Type: 51,
                Name: "value",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Remove",
            ReturnType: 78,
            VTableSlot: -1,
            CodeIndex: 31,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "key",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 32,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_keys",
            Type: 80,
            Offset: 3
          },
          {
            Name: "_keysToIndexMapping",
            Type: 81,
            Offset: 4
          },
          {
            Name: "_internalObject",
            Type: 81,
            Offset: 5
          }
        ],
        StaticFields: [],
        VTableIndex: 12
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "SingleThreadedPerformanceTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 33,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 34,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 13
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ThreadSleepTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 35,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 36,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "duration1",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "duration2",
                Sequence: 2
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_duration1",
            Type: 68,
            Offset: 3
          },
          {
            Name: "_duration2",
            Type: 68,
            Offset: 4
          }
        ],
        StaticFields: [],
        VTableIndex: 14
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "AlertHelloWorldTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 37,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Alert",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: -1,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "s",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 38,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 15
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Assert",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "AssertTrue",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 39,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 78,
                Name: "condition",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Fail",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 40,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 41,
            HasThis: false,
            Parameters: [
              {
                Type: 79,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 79,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 42,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 43,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 51,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 44,
            HasThis: false,
            Parameters: [
              {
                Type: 1,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 1,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertNotNull",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 45,
            HasThis: false,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 1,
                Name: "value",
                Sequence: 2
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 16
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "EventTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "add_MyEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 46,
            HasThis: true,
            Parameters: [
              {
                Type: 47,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "remove_MyEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 47,
            HasThis: true,
            Parameters: [
              {
                Type: 47,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "add_NullEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 48,
            HasThis: true,
            Parameters: [
              {
                Type: 47,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "remove_NullEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 49,
            HasThis: true,
            Parameters: [
              {
                Type: 47,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 50,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "EventTest_MyEvent3",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 51,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 55,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: "EventTest_MyEvent2",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 52,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 55,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: "EventTest_MyEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 53,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "sender",
                Sequence: 1
              },
              {
                Type: 55,
                Name: "e",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 54,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_handler1Called",
            Type: 78,
            Offset: 3
          },
          {
            Name: "_handler2Called",
            Type: 78,
            Offset: 4
          },
          {
            Name: "_handler3Called",
            Type: 78,
            Offset: 5
          },
          {
            Name: "MyEvent",
            Type: 47,
            Offset: 6
          },
          {
            Name: "NullEvent",
            Type: 47,
            Offset: 7
          }
        ],
        StaticFields: [],
        VTableIndex: 17
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestSuite",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "Assert",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 55,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 78,
                Name: "condition",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Fail",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 56,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 57,
            HasThis: true,
            Parameters: [
              {
                Type: 79,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 79,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 58,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 59,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 51,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertEquals",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 60,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "expected",
                Sequence: 1
              },
              {
                Type: 1,
                Name: "actual",
                Sequence: 2
              }
            ]
          },
          {
            Name: "AssertNotNull",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 61,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "message",
                Sequence: 1
              },
              {
                Type: 1,
                Name: "value",
                Sequence: 2
              }
            ]
          },
          {
            Name: "get_Name",
            ReturnType: 51,
            VTableSlot: 4,
            CodeIndex: 62,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_Name",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 63,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_Passed",
            ReturnType: 78,
            VTableSlot: 5,
            CodeIndex: 64,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_Passed",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 65,
            HasThis: true,
            Parameters: [
              {
                Type: 78,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "get_Exception",
            ReturnType: 3,
            VTableSlot: 6,
            CodeIndex: 66,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_Exception",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 67,
            HasThis: true,
            Parameters: [
              {
                Type: 3,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Test",
            ReturnType: 76,
            VTableSlot: 7,
            CodeIndex: 68,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "GetTestCases",
            ReturnType: 82,
            VTableSlot: -1,
            CodeIndex: 69,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Log",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 70,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "s",
                Sequence: 1
              }
            ]
          },
          {
            Name: "Setup",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 71,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TearDown",
            ReturnType: 76,
            VTableSlot: 9,
            CodeIndex: 72,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 73,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_method",
            Type: 83,
            Offset: 0
          },
          {
            Name: "<Name>k__BackingField",
            Type: 51,
            Offset: 1
          },
          {
            Name: "<Passed>k__BackingField",
            Type: 78,
            Offset: 2
          },
          {
            Name: "<Exception>k__BackingField",
            Type: 3,
            Offset: 3
          }
        ],
        StaticFields: [],
        VTableIndex: 18
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "CompilerBugsTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestMethodInliningBreaksLoops",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 74,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "CompareInts",
            ReturnType: 68,
            VTableSlot: -1,
            CodeIndex: 75,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "b",
                Sequence: 2
              }
            ]
          },
          {
            Name: "GetPivotPoint",
            ReturnType: 68,
            VTableSlot: -1,
            CodeIndex: 76,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "begPoint",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "endPoint",
                Sequence: 2
              },
              {
                Type: 84,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: "GreaterThanOrEqualTo",
            ReturnType: 78,
            VTableSlot: -1,
            CodeIndex: 77,
            HasThis: false,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: "LessThanOrEqualTo",
            ReturnType: 78,
            VTableSlot: -1,
            CodeIndex: 78,
            HasThis: false,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: "GetPivotPoint2",
            ReturnType: 68,
            VTableSlot: -1,
            CodeIndex: 79,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "begPoint",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "endPoint",
                Sequence: 2
              },
              {
                Type: 84,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 80,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [
          {
            Name: "Timeout",
            Type: 68,
            DataIndex: 20
          }
        ],
        VTableIndex: 19
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "CompilerFlowControlTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 81,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestScore",
            ReturnType: 87,
            VTableSlot: -1,
            CodeIndex: 82,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "index",
                Sequence: 1
              },
              {
                Type: 78,
                Name: "go",
                Sequence: 2
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 83,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 21
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "MultiThreadingTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 84,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadOneStart",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 85,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadTwoStart",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 86,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 87,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_threadTwoCompleteCondition",
            Type: 78,
            Offset: 3
          },
          {
            Name: "_testCompleteCondition",
            Type: 78,
            Offset: 4
          }
        ],
        StaticFields: [],
        VTableIndex: 22
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ReflectionTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestGetTypeByName",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 88,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestGetType",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 89,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestGetMethods",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 90,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestGetProperties",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 91,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestSetProperty",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 92,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestIsDefinedOnType",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 93,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestActivator",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 94,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "get_MyProperty",
            ReturnType: 51,
            VTableSlot: -1,
            CodeIndex: 95,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "set_MyProperty",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 96,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "value",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 97,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "<MyProperty>k__BackingField",
            Type: 51,
            Offset: 4
          }
        ],
        StaticFields: [],
        VTableIndex: 23
      },
      {
        Namespace: "",
        Name: "ReflectionTestAttribute",
        BaseType: 18,
        DeclaringType: 16,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 98,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 24
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ExceptionHandlingTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestExceptionTypeHandlers",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 99,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestExceptionTypeHandlers2",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 100,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "FirstTest",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 101,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "SecondTest",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 102,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "SecondTestHelper",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 103,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestBasicTryCatchFinally",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 104,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestBasicTryCatchFinallyThrowException",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 105,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestBasicNestedTryCatchFinally",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 106,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestComplexNestedTryCatchFinally",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 107,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestFinallyExecutesAfterCatchBlockThrows",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 108,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestFinallyExecutesAfterCatchBlockThrows2",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 109,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 110,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 25
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "NullReferenceExceptionTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 111,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 112,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 26
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "SynchronizationTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 113,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ControllerThreadStart",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 114,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 115,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_mainLock",
            Type: 57,
            Offset: 3
          }
        ],
        StaticFields: [],
        VTableIndex: 27
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DomTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 116,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "MoveElement",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 117,
            HasThis: true,
            Parameters: [
              {
                Type: 51,
                Name: "name",
                Sequence: 1
              },
              {
                Type: 62,
                Name: "element",
                Sequence: 2
              },
              {
                Type: 78,
                Name: "clockwise",
                Sequence: 3
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 118,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "duration",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_testRunning",
            Type: 78,
            Offset: 3
          },
          {
            Name: "_duration",
            Type: 68,
            Offset: 4
          },
          {
            Name: "_semaphore",
            Type: 63,
            Offset: 5
          }
        ],
        StaticFields: [],
        VTableIndex: 28
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ResourceTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 119,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 120,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 29
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DomElementResource",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Dispose",
            ReturnType: 76,
            VTableSlot: 4,
            CodeIndex: 121,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ToString",
            ReturnType: 51,
            VTableSlot: 0,
            CodeIndex: 122,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 123,
            HasThis: true,
            Parameters: [
              {
                Type: 62,
                Name: "element",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_element",
            Type: 62,
            Offset: 0
          }
        ],
        StaticFields: [],
        VTableIndex: 30
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ClassStructureTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestOverrideInterfaceMethodOfAbstractBaseClass",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 124,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestStaticConstructorsWorked",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 125,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 126,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 31
      },
      {
        Namespace: "",
        Name: "IAdder",
        BaseType: -1,
        DeclaringType: 25,
        IsInterface: true,
        IsAbstract: true,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 68,
            VTableSlot: 0,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "x",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 32
      },
      {
        Namespace: "",
        Name: "AdderBase",
        BaseType: 1,
        DeclaringType: 25,
        IsInterface: false,
        IsAbstract: true,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 68,
            VTableSlot: 4,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "x",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 127,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 33
      },
      {
        Namespace: "",
        Name: "RegularAdder",
        BaseType: 26,
        DeclaringType: 25,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "AddTen",
            ReturnType: 68,
            VTableSlot: 4,
            CodeIndex: 128,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "x",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 129,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 34
      },
      {
        Namespace: "",
        Name: "StaticConstructorClass1",
        BaseType: 1,
        DeclaringType: 25,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".cctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 130,
            HasThis: false,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 131,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [
          {
            Name: "property",
            Type: 1,
            DataIndex: 36
          }
        ],
        VTableIndex: 35
      },
      {
        Namespace: "",
        Name: "StaticConstructorClass2",
        BaseType: 1,
        DeclaringType: 25,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".cctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 132,
            HasThis: false,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 133,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [
          {
            Name: "property",
            Type: 1,
            DataIndex: 38
          }
        ],
        VTableIndex: 37
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestAttribute",
        BaseType: 18,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 134,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 39
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "MultiThreadingStressTest",
        BaseType: 4,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "PerformTest",
            ReturnType: 76,
            VTableSlot: 8,
            CodeIndex: 135,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadStarted",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 136,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "Work",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 137,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "ThreadFinished",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 138,
            HasThis: true,
            Parameters: [
              {
                Type: 78,
                Name: "failed",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 139,
            HasThis: true,
            Parameters: [
              {
                Type: 68,
                Name: "numberOfThreads",
                Sequence: 1
              }
            ]
          }
        ],
        Fields: [
          {
            Name: "_startedThreadsLock",
            Type: 1,
            Offset: 3
          },
          {
            Name: "_numberOfThreads",
            Type: 68,
            Offset: 4
          },
          {
            Name: "_failedThreads",
            Type: 68,
            Offset: 5
          },
          {
            Name: "_threadFinishedLock",
            Type: 57,
            Offset: 6
          },
          {
            Name: "_allThreadsStartedLock",
            Type: 57,
            Offset: 7
          },
          {
            Name: "_allThreadsStartedCondition",
            Type: 58,
            Offset: 8
          },
          {
            Name: "_semaphore",
            Type: 63,
            Offset: 9
          },
          {
            Name: "_startedThreads",
            Type: 68,
            Offset: 10
          }
        ],
        StaticFields: [],
        VTableIndex: 40
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "QuickSortTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestQuickSort",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 140,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "CompareInts",
            ReturnType: 68,
            VTableSlot: -1,
            CodeIndex: 141,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "b",
                Sequence: 2
              }
            ]
          },
          {
            Name: "Sort",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 142,
            HasThis: false,
            Parameters: [
              {
                Type: 84,
                Name: "data",
                Sequence: 1
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 2
              }
            ]
          },
          {
            Name: "GetPivotPoint",
            ReturnType: 68,
            VTableSlot: -1,
            CodeIndex: 143,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "begPoint",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "endPoint",
                Sequence: 2
              },
              {
                Type: 84,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: "Sorting",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 144,
            HasThis: false,
            Parameters: [
              {
                Type: 68,
                Name: "beg",
                Sequence: 1
              },
              {
                Type: 68,
                Name: "end",
                Sequence: 2
              },
              {
                Type: 84,
                Name: "data",
                Sequence: 3
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 4
              }
            ]
          },
          {
            Name: "GreaterThanOrEqualTo",
            ReturnType: 78,
            VTableSlot: -1,
            CodeIndex: 145,
            HasThis: false,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: "LessThanOrEqualTo",
            ReturnType: 78,
            VTableSlot: -1,
            CodeIndex: 146,
            HasThis: false,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 85,
                Name: "comparison",
                Sequence: 3
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 147,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 41
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Comparison`1",
        BaseType: 34,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "Invoke",
            ReturnType: 68,
            VTableSlot: 7,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              }
            ]
          },
          {
            Name: "BeginInvoke",
            ReturnType: 88,
            VTableSlot: 8,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 86,
                Name: "a",
                Sequence: 1
              },
              {
                Type: 86,
                Name: "b",
                Sequence: 2
              },
              {
                Type: 89,
                Name: "callback",
                Sequence: 3
              },
              {
                Type: 1,
                Name: "object",
                Sequence: 4
              }
            ]
          },
          {
            Name: "EndInvoke",
            ReturnType: 68,
            VTableSlot: 9,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 88,
                Name: "result",
                Sequence: 1
              }
            ]
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: -1,
            HasThis: true,
            Parameters: [
              {
                Type: 1,
                Name: "object",
                Sequence: 1
              },
              {
                Type: 90,
                Name: "method",
                Sequence: 2
              }
            ]
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 42
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ThreadingTestSuite",
        BaseType: 12,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "TestAbortThread",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 148,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestAbortThreadWithState",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 149,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestLockIdiom",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 150,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 151,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestLockIdiomUnlocksWhenExceptionsAreThrown",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 152,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "TestManualResetEvent",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 153,
            HasThis: true,
            Parameters: []
          },
          {
            Name: "<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 154,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 155,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "_sync",
            Type: 1,
            Offset: 4
          },
          {
            Name: "_secondThreadDone",
            Type: 69,
            Offset: 5
          }
        ],
        StaticFields: [],
        VTableIndex: 43
      },
      {
        Namespace: "",
        Name: "PurposefullyThrownException",
        BaseType: 3,
        DeclaringType: 35,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 156,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [],
        StaticFields: [],
        VTableIndex: 44
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        BaseType: 1,
        DeclaringType: 13,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<TestMethodInliningBreaksLoops>b__0",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 157,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 158,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "done",
            Type: 58,
            Offset: 0
          },
          {
            Name: "resultPivot",
            Type: 68,
            Offset: 1
          },
          {
            Name: "<>4__this",
            Type: 13,
            Offset: 2
          }
        ],
        StaticFields: [],
        VTableIndex: 45
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        BaseType: 1,
        DeclaringType: 22,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 159,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "i",
            Type: 68,
            Offset: 0
          }
        ],
        StaticFields: [],
        VTableIndex: 46
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass3",
        BaseType: 1,
        DeclaringType: 22,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<PerformTest>b__0",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 160,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 161,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "CS$<>8__locals2",
            Type: 38,
            Offset: 0
          },
          {
            Name: "element",
            Type: 62,
            Offset: 1
          },
          {
            Name: "clockwiseForThisElement",
            Type: 78,
            Offset: 2
          },
          {
            Name: "<>4__this",
            Type: 22,
            Offset: 3
          }
        ],
        StaticFields: [],
        VTableIndex: 47
      },
      {
        Namespace: "",
        Name: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}",
        BaseType: 1,
        DeclaringType: -1,
        IsInterface: false,
        IsAbstract: false,
        Methods: [],
        Fields: [],
        StaticFields: [
          {
            Name: "$$method0x6000090-1",
            Type: 72,
            DataIndex: 49
          }
        ],
        VTableIndex: 48
      },
      {
        Namespace: "",
        Name: "__StaticArrayInitTypeSize=24",
        BaseType: 91,
        DeclaringType: 40,
        IsInterface: false,
        IsAbstract: false,
        Methods: [],
        Fields: [],
        StaticFields: [],
        VTableIndex: 50
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        BaseType: 1,
        DeclaringType: 35,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<TestAbortThread>b__0",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 162,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 163,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "aborted",
            Type: 58,
            Offset: 0
          },
          {
            Name: "<>4__this",
            Type: 35,
            Offset: 1
          }
        ],
        StaticFields: [],
        VTableIndex: 51
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass4",
        BaseType: 1,
        DeclaringType: 35,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<TestAbortThreadWithState>b__3",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 164,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 165,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "aborted",
            Type: 58,
            Offset: 0
          },
          {
            Name: "<>4__this",
            Type: 35,
            Offset: 1
          }
        ],
        StaticFields: [],
        VTableIndex: 52
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass7",
        BaseType: 1,
        DeclaringType: 35,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 166,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 167,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "sync",
            Type: 1,
            Offset: 0
          },
          {
            Name: "secondThreadAcquiredLock",
            Type: 78,
            Offset: 1
          },
          {
            Name: "secondThreadDone",
            Type: 69,
            Offset: 2
          }
        ],
        StaticFields: [],
        VTableIndex: 53
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClassb",
        BaseType: 1,
        DeclaringType: 35,
        IsInterface: false,
        IsAbstract: false,
        Methods: [
          {
            Name: "<TestManualResetEvent>b__a",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 168,
            HasThis: true,
            Parameters: []
          },
          {
            Name: ".ctor",
            ReturnType: 76,
            VTableSlot: -1,
            CodeIndex: 169,
            HasThis: true,
            Parameters: []
          }
        ],
        Fields: [
          {
            Name: "firstEvent",
            Type: 69,
            Offset: 0
          },
          {
            Name: "secondEvent",
            Type: 69,
            Offset: 1
          },
          {
            Name: "firstEventWorked",
            Type: 78,
            Offset: 2
          },
          {
            Name: "<>4__this",
            Type: 35,
            Offset: 3
          }
        ],
        StaticFields: [],
        VTableIndex: 54
      }
    ],
    AssemblyReferences: [
      {
        Name: "OSCorlib",
        Version: "2.0.0.0"
      },
      {
        Name: "XaeiOS.ProcessViewer",
        Version: "1.0.0.0"
      },
      {
        Name: "System.Browser",
        Version: "1.0.0.0"
      },
      {
        Name: "XaeiOS.Kernel",
        Version: "1.0.0.0"
      }
    ],
    TypeReferences: [
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestRunner",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "AssertException",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestBase",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "XmlHttpRequestTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DictionaryRemoveSSABugTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "SingleThreadedPerformanceTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ThreadSleepTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "AlertHelloWorldTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Assert",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "EventTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "CompilerBugsTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "CompilerFlowControlTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "MultiThreadingTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ReflectionTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "ReflectionTestAttribute",
        DeclaringType: 16,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Attribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ExceptionHandlingTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "NullReferenceExceptionTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "SynchronizationTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DomTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ResourceTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "DomElementResource",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ClassStructureTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "AdderBase",
        DeclaringType: 25,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "RegularAdder",
        DeclaringType: 25,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "StaticConstructorClass1",
        DeclaringType: 25,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "StaticConstructorClass2",
        DeclaringType: 25,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "TestAttribute",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "MultiThreadingStressTest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "QuickSortTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Comparison`1",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "MulticastDelegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite.Tests",
        Name: "ThreadingTestSuite",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "PurposefullyThrownException",
        DeclaringType: 35,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        DeclaringType: 13,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        DeclaringType: 22,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass3",
        DeclaringType: 22,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass1",
        DeclaringType: 35,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass4",
        DeclaringType: 35,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClass7",
        DeclaringType: 35,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "<>c__DisplayClassb",
        DeclaringType: 35,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS",
        Name: "SIP",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventHandler",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "ITest",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "IList`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.ProcessViewer",
        Name: "ProcessViewer",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Type",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Browser.XmlHttpRequest",
        Name: "XmlHttpRequestTimeoutException",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventArgs",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NullReferenceException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Lock",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Condition",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "SystemException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NotSupportedException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Browser.Dom",
        Name: "IDomElement",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Semaphore",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "IAdder",
        DeclaringType: 25,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ArgumentException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Comparison`1",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ManualResetEvent",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadAbortException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "IDisposable",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "__StaticArrayInitTypeSize=24",
        DeclaringType: 40,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.InteropServices",
        Name: "IntrinsicAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeUsageAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Void",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Array",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int64",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NativeArray`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NativeObject",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "IList`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Reflection",
        Name: "MethodInfo",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.TestSuite",
        Name: "Comparison`1",
        DeclaringType: -1,
        Assembly: -1,
        IsGeneric: false
      },
      {
        Namespace: "",
        Name: "T",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: true
      },
      {
        Namespace: "System",
        Name: "Double",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "IAsyncResult",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AsyncCallback",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "IntPtr",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ValueType",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Process",
        Name: "SignalDaemon",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Browser.XmlHttpRequest",
        Name: "XmlHttpRequestManager",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Kernel",
        Name: "Scheduler",
        DeclaringType: -1,
        Assembly: 3,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Delegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS",
        Name: "SIP",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Collections.Generic",
        Name: "List`1",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "RuntimeHelpers",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Activator",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Console",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Object",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Exception",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.ProcessViewer",
        Name: "ProcessViewer",
        DeclaringType: -1,
        Assembly: 1,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Delegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventArgs",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Reflection",
        Name: "MethodBase",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Type",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Reflection",
        Name: "MemberInfo",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Lock",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Condition",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Thread",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Reflection",
        Name: "PropertyInfo",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Attribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NullReferenceException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Browser.Dom",
        Name: "DomManager",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Semaphore",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Resources",
        Name: "ResourceManager",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "Monitor",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "ArgumentException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "RuntimeHelpers",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ManualResetEvent",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadAbortException",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "MulticastDelegate",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.CompilerServices",
        Name: "CompilerGeneratedAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime.InteropServices",
        Name: "IntrinsicAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeUsageAttribute",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "XaeiOS.Boot",
        Name: "BootManager",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "var",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "NativeFunction",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadStart",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Threading",
        Name: "ThreadPriority",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "String",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "EventHandler",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "VTable",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Int32",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "RuntimeTypeHandle",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "XaeiOSObject",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Boolean",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Browser.XmlHttpRequest",
        Name: "RequestMethod",
        DeclaringType: -1,
        Assembly: 2,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "IDisposable",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "Array",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "RuntimeFieldHandle",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Assembly",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "UIntPtr",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Class",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "ICustomAttributeProvider",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System.Runtime",
        Name: "Method",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeTargets",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      },
      {
        Namespace: "System",
        Name: "AttributeTargets",
        DeclaringType: -1,
        Assembly: 0,
        IsGeneric: false
      }
    ],
    MethodReferences: [
      {
        Type: 0,
        Name: "Main",
        HasThis: false,
        Parameters: [
          0
        ]
      },
      {
        Type: 92,
        Name: "Start",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 93,
        Name: "StartDriver",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "RunProcessViewer",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "RunTestSuite",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 94,
        Name: "ConvertToManagedException",
        HasThis: false,
        Parameters: [
          1
        ]
      },
      {
        Type: 95,
        Name: "InternalCreate",
        HasThis: false,
        Parameters: [
          2,
          3,
          4
        ]
      },
      {
        Type: 0,
        Name: "<RunProcessViewer>b__0",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 96,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          5,
          6,
          7
        ]
      },
      {
        Type: 0,
        Name: "<RunProcessViewer>b__1",
        HasThis: false,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 96,
        Name: "add_Exited",
        HasThis: true,
        Parameters: [
          10
        ]
      },
      {
        Type: 96,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: "<RunTestSuite>b__4",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 0,
        Name: "<RunTestSuite>b__5",
        HasThis: false,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 0,
        Name: "GetTestCases",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 97,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 98,
        Name: "CreateArray",
        HasThis: false,
        Parameters: [
          11,
          12
        ]
      },
      {
        Type: 20,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 8,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          13,
          14
        ]
      },
      {
        Type: 23,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 21,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 11,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 5,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          15
        ]
      },
      {
        Type: 31,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          16
        ]
      },
      {
        Type: 7,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 97,
        Name: "Add",
        HasThis: true,
        Parameters: [
          17
        ]
      },
      {
        Type: 99,
        Name: "CreateInstance",
        HasThis: false,
        Parameters: [
          18
        ]
      },
      {
        Type: 12,
        Name: "GetTestCases",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 50,
        Name: "get_Count",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 50,
        Name: "get_Item",
        HasThis: true,
        Parameters: [
          19
        ]
      },
      {
        Type: 0,
        Name: "RunTests",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 97,
        Name: "get_Count",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 51,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          20,
          21,
          22
        ]
      },
      {
        Type: 0,
        Name: "Log",
        HasThis: false,
        Parameters: [
          23
        ]
      },
      {
        Type: 100,
        Name: "WriteLine",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 51,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          24
        ]
      },
      {
        Type: 100,
        Name: "WriteLine",
        HasThis: false,
        Parameters: [
          25
        ]
      },
      {
        Type: 100,
        Name: "Write",
        HasThis: false,
        Parameters: [
          25
        ]
      },
      {
        Type: 97,
        Name: "get_Item",
        HasThis: true,
        Parameters: [
          19
        ]
      },
      {
        Type: 49,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 49,
        Name: "get_Exception",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 101,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "get_StackTrace",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: "PerformTest",
        HasThis: false,
        Parameters: [
          26
        ]
      },
      {
        Type: 49,
        Name: "Test",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 49,
        Name: "get_Passed",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: "Log",
        HasThis: false,
        Parameters: [
          27,
          28
        ]
      },
      {
        Type: 103,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 103,
        Name: "set_UpdateInterval",
        HasThis: true,
        Parameters: [
          29
        ]
      },
      {
        Type: 103,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 0,
        Name: ".cctor",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 53,
        Name: "GetTypeFromHandle",
        HasThis: false,
        Parameters: [
          30
        ]
      },
      {
        Type: 2,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          31
        ]
      },
      {
        Type: 102,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          32
        ]
      },
      {
        Type: 4,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 4,
        Name: "get_Passed",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 4,
        Name: "get_Exception",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 4,
        Name: "Test",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 4,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 98,
        Name: "Cast",
        HasThis: false,
        Parameters: [
          33,
          34,
          35
        ]
      },
      {
        Type: 4,
        Name: "TestFailed",
        HasThis: true,
        Parameters: [
          36
        ]
      },
      {
        Type: 4,
        Name: "Log",
        HasThis: true,
        Parameters: [
          23
        ]
      },
      {
        Type: 4,
        Name: "Assert",
        HasThis: true,
        Parameters: [
          31,
          37
        ]
      },
      {
        Type: 10,
        Name: "AssertTrue",
        HasThis: false,
        Parameters: [
          31,
          37
        ]
      },
      {
        Type: 4,
        Name: "Fail",
        HasThis: true,
        Parameters: [
          31
        ]
      },
      {
        Type: 10,
        Name: "Fail",
        HasThis: false,
        Parameters: [
          31
        ]
      },
      {
        Type: 4,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          38,
          39
        ]
      },
      {
        Type: 10,
        Name: "AssertEquals",
        HasThis: false,
        Parameters: [
          38,
          39
        ]
      },
      {
        Type: 4,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          40,
          41
        ]
      },
      {
        Type: 10,
        Name: "AssertEquals",
        HasThis: false,
        Parameters: [
          40,
          41
        ]
      },
      {
        Type: 4,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          42,
          43
        ]
      },
      {
        Type: 10,
        Name: "AssertEquals",
        HasThis: false,
        Parameters: [
          42,
          43
        ]
      },
      {
        Type: 4,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          44,
          45
        ]
      },
      {
        Type: 10,
        Name: "AssertEquals",
        HasThis: false,
        Parameters: [
          44,
          45
        ]
      },
      {
        Type: 4,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          46
        ]
      },
      {
        Type: 101,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 5,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 93,
        Name: "DoSimpleXmlHttpRequest",
        HasThis: false,
        Parameters: [
          25
        ]
      },
      {
        Type: 93,
        Name: "DoSimpleXmlHttpRequest",
        HasThis: false,
        Parameters: [
          25,
          47,
          48,
          49,
          50,
          51
        ]
      },
      {
        Type: 51,
        Name: "Concat",
        HasThis: false,
        Parameters: [
          20,
          21
        ]
      },
      {
        Type: 6,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 6,
        Name: "Add",
        HasThis: true,
        Parameters: [
          52,
          53
        ]
      },
      {
        Type: 6,
        Name: "Remove",
        HasThis: true,
        Parameters: [
          52
        ]
      },
      {
        Type: 101,
        Name: "GetHashCode",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 7,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 8,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 59,
        Name: "Sleep",
        HasThis: false,
        Parameters: [
          54
        ]
      },
      {
        Type: 9,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 9,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 101,
        Name: "Equals",
        HasThis: true,
        Parameters: [
          55
        ]
      },
      {
        Type: 10,
        Name: "AssertNotNull",
        HasThis: false,
        Parameters: [
          31,
          56
        ]
      },
      {
        Type: 11,
        Name: "add_MyEvent",
        HasThis: true,
        Parameters: [
          57
        ]
      },
      {
        Type: 104,
        Name: "Combine",
        HasThis: false,
        Parameters: [
          58,
          59
        ]
      },
      {
        Type: 11,
        Name: "remove_MyEvent",
        HasThis: true,
        Parameters: [
          57
        ]
      },
      {
        Type: 104,
        Name: "Remove",
        HasThis: false,
        Parameters: [
          58,
          59
        ]
      },
      {
        Type: 11,
        Name: "add_NullEvent",
        HasThis: true,
        Parameters: [
          57
        ]
      },
      {
        Type: 11,
        Name: "remove_NullEvent",
        HasThis: true,
        Parameters: [
          57
        ]
      },
      {
        Type: 11,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 11,
        Name: "EventTest_MyEvent",
        HasThis: true,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 11,
        Name: "EventTest_MyEvent2",
        HasThis: true,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 11,
        Name: "EventTest_MyEvent3",
        HasThis: true,
        Parameters: [
          8,
          9
        ]
      },
      {
        Type: 95,
        Name: "Invoke",
        HasThis: true,
        Parameters: [
          60
        ]
      },
      {
        Type: 105,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "Assert",
        HasThis: true,
        Parameters: [
          31,
          37
        ]
      },
      {
        Type: 12,
        Name: "Fail",
        HasThis: true,
        Parameters: [
          31
        ]
      },
      {
        Type: 12,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          38,
          39
        ]
      },
      {
        Type: 12,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          40,
          41
        ]
      },
      {
        Type: 12,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          42,
          43
        ]
      },
      {
        Type: 12,
        Name: "AssertEquals",
        HasThis: true,
        Parameters: [
          44,
          45
        ]
      },
      {
        Type: 12,
        Name: "AssertNotNull",
        HasThis: true,
        Parameters: [
          31,
          56
        ]
      },
      {
        Type: 12,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_Name",
        HasThis: true,
        Parameters: [
          61
        ]
      },
      {
        Type: 12,
        Name: "get_Passed",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_Passed",
        HasThis: true,
        Parameters: [
          62
        ]
      },
      {
        Type: 12,
        Name: "get_Exception",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "set_Exception",
        HasThis: true,
        Parameters: [
          63
        ]
      },
      {
        Type: 12,
        Name: "Test",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "Setup",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 106,
        Name: "Invoke",
        HasThis: true,
        Parameters: [
          64,
          65
        ]
      },
      {
        Type: 12,
        Name: "TearDown",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 101,
        Name: "GetType",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 107,
        Name: "GetMethods",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 108,
        Name: "IsDefined",
        HasThis: true,
        Parameters: [
          66,
          67
        ]
      },
      {
        Type: 108,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 12,
        Name: "Log",
        HasThis: true,
        Parameters: [
          23
        ]
      },
      {
        Type: 12,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 13,
        Name: "TestMethodInliningBreaksLoops",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 37,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 109,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 110,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          68
        ]
      },
      {
        Type: 37,
        Name: "<TestMethodInliningBreaksLoops>b__0",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 111,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          5
        ]
      },
      {
        Type: 111,
        Name: "Start",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 109,
        Name: "Acquire",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 110,
        Name: "Await",
        HasThis: true,
        Parameters: [
          69
        ]
      },
      {
        Type: 111,
        Name: "Abort",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 13,
        Name: "CompareInts",
        HasThis: false,
        Parameters: [
          70,
          71
        ]
      },
      {
        Type: 13,
        Name: "GetPivotPoint",
        HasThis: false,
        Parameters: [
          72,
          73,
          74,
          75
        ]
      },
      {
        Type: 97,
        Name: "set_Item",
        HasThis: true,
        Parameters: [
          19,
          76
        ]
      },
      {
        Type: 13,
        Name: "GreaterThanOrEqualTo",
        HasThis: false,
        Parameters: [
          77,
          78,
          79
        ]
      },
      {
        Type: 13,
        Name: "LessThanOrEqualTo",
        HasThis: false,
        Parameters: [
          77,
          78,
          79
        ]
      },
      {
        Type: 13,
        Name: "GetPivotPoint2",
        HasThis: false,
        Parameters: [
          72,
          73,
          74,
          75
        ]
      },
      {
        Type: 13,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 14,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 14,
        Name: "TestScore",
        HasThis: true,
        Parameters: [
          80,
          81
        ]
      },
      {
        Type: 14,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 15,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 15,
        Name: "ThreadOneStart",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 111,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          5,
          6
        ]
      },
      {
        Type: 111,
        Name: "set_Name",
        HasThis: true,
        Parameters: [
          82
        ]
      },
      {
        Type: 15,
        Name: "ThreadTwoStart",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 15,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestGetTypeByName",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 53,
        Name: "GetType",
        HasThis: false,
        Parameters: [
          25
        ]
      },
      {
        Type: 16,
        Name: "TestGetType",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestGetMethods",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestGetProperties",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 107,
        Name: "GetProperties",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestSetProperty",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "set_MyProperty",
        HasThis: true,
        Parameters: [
          61
        ]
      },
      {
        Type: 112,
        Name: "get_SetMethod",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestIsDefinedOnType",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: "TestActivator",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 99,
        Name: "CreateInstance",
        HasThis: false,
        Parameters: [
          18
        ]
      },
      {
        Type: 16,
        Name: "get_MyProperty",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 16,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 17,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 113,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestExceptionTypeHandlers",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestExceptionTypeHandlers2",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "FirstTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "SecondTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "SecondTestHelper",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "get_Message",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 114,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          32
        ]
      },
      {
        Type: 19,
        Name: "TestBasicTryCatchFinally",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestBasicTryCatchFinallyThrowException",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestBasicNestedTryCatchFinally",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestComplexNestedTryCatchFinally",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestFinallyExecutesAfterCatchBlockThrows",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: "TestFinallyExecutesAfterCatchBlockThrows2",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 19,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 20,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 21,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 21,
        Name: "ControllerThreadStart",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 109,
        Name: "Release",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 115,
        Name: "CreateElement",
        HasThis: false,
        Parameters: [
          25
        ]
      },
      {
        Type: 116,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          83
        ]
      },
      {
        Type: 38,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 116,
        Name: "Acquire",
        HasThis: true,
        Parameters: [
          83
        ]
      },
      {
        Type: 39,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 39,
        Name: "<PerformTest>b__0",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 22,
        Name: "MoveElement",
        HasThis: true,
        Parameters: [
          46,
          84,
          85
        ]
      },
      {
        Type: 116,
        Name: "Acquire",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 116,
        Name: "Release",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 23,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 24,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          86
        ]
      },
      {
        Type: 117,
        Name: "RegisterResource",
        HasThis: false,
        Parameters: [
          87
        ]
      },
      {
        Type: 24,
        Name: "Dispose",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 24,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 25,
        Name: "TestOverrideInterfaceMethodOfAbstractBaseClass",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 64,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          88
        ]
      },
      {
        Type: 25,
        Name: "TestStaticConstructorsWorked",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 25,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 26,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 27,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          88
        ]
      },
      {
        Type: 28,
        Name: ".cctor",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 28,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 29,
        Name: ".cctor",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 29,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 30,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 31,
        Name: "PerformTest",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 110,
        Name: "Await",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 31,
        Name: "Work",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 31,
        Name: "ThreadStarted",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 118,
        Name: "Enter",
        HasThis: false,
        Parameters: [
          20
        ]
      },
      {
        Type: 110,
        Name: "Signal",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 118,
        Name: "Exit",
        HasThis: false,
        Parameters: [
          20
        ]
      },
      {
        Type: 31,
        Name: "ThreadFinished",
        HasThis: true,
        Parameters: [
          89
        ]
      },
      {
        Type: 119,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          32
        ]
      },
      {
        Type: 32,
        Name: "TestQuickSort",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 32,
        Name: "CompareInts",
        HasThis: false,
        Parameters: [
          70,
          71
        ]
      },
      {
        Type: 32,
        Name: "Sort",
        HasThis: false,
        Parameters: [
          90,
          91
        ]
      },
      {
        Type: 120,
        Name: "InitializeArray",
        HasThis: false,
        Parameters: [
          92,
          93
        ]
      },
      {
        Type: 32,
        Name: "Sorting",
        HasThis: false,
        Parameters: [
          94,
          95,
          74,
          75
        ]
      },
      {
        Type: 32,
        Name: "GetPivotPoint",
        HasThis: false,
        Parameters: [
          72,
          73,
          74,
          75
        ]
      },
      {
        Type: 32,
        Name: "GreaterThanOrEqualTo",
        HasThis: false,
        Parameters: [
          77,
          78,
          79
        ]
      },
      {
        Type: 32,
        Name: "LessThanOrEqualTo",
        HasThis: false,
        Parameters: [
          77,
          78,
          79
        ]
      },
      {
        Type: 32,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "TestAbortThread",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 41,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 41,
        Name: "<TestAbortThread>b__0",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "TestAbortThreadWithState",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 42,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 42,
        Name: "<TestAbortThreadWithState>b__3",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 111,
        Name: "Abort",
        HasThis: true,
        Parameters: [
          96
        ]
      },
      {
        Type: 35,
        Name: "TestLockIdiom",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 43,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 36,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 121,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 43,
        Name: "<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 121,
        Name: "WaitOne",
        HasThis: true,
        Parameters: [
          69
        ]
      },
      {
        Type: 35,
        Name: "TestLockIdiomUnlocksWhenExceptionsAreThrown",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 35,
        Name: "TestManualResetEvent",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 44,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 44,
        Name: "<TestManualResetEvent>b__a",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 121,
        Name: "Set",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 121,
        Name: "WaitOne",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 118,
        Name: "TryEnter",
        HasThis: false,
        Parameters: [
          20
        ]
      },
      {
        Type: 35,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 122,
        Name: "get_ExceptionState",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 101,
        Name: "Finalize",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "ToString",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "GetBaseException",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "get_HelpLink",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "set_HelpLink",
        HasThis: true,
        Parameters: [
          82
        ]
      },
      {
        Type: 102,
        Name: "get_Source",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 102,
        Name: "set_Source",
        HasThis: true,
        Parameters: [
          82
        ]
      },
      {
        Type: 71,
        Name: "Dispose",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 26,
        Name: "AddTen",
        HasThis: true,
        Parameters: [
          88
        ]
      },
      {
        Type: 123,
        Name: "Invoke",
        HasThis: true,
        Parameters: [
          60
        ]
      },
      {
        Type: 123,
        Name: "InvokeNative",
        HasThis: true,
        Parameters: [
          60
        ]
      },
      {
        Type: 123,
        Name: "InternalCombine",
        HasThis: true,
        Parameters: [
          2
        ]
      },
      {
        Type: 33,
        Name: "BeginInvoke",
        HasThis: true,
        Parameters: [
          77,
          78,
          97,
          98
        ]
      },
      {
        Type: 33,
        Name: "EndInvoke",
        HasThis: true,
        Parameters: [
          99
        ]
      },
      {
        Type: 98,
        Name: "InitializeMetadata",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 98,
        Name: "CreateAssembly",
        HasThis: false,
        Parameters: [
          100
        ]
      },
      {
        Type: 98,
        Name: "CreateClass",
        HasThis: false,
        Parameters: [
          101,
          102,
          103,
          104,
          105,
          106,
          107
        ]
      },
      {
        Type: 98,
        Name: "CreateMethod",
        HasThis: false,
        Parameters: [
          108,
          102,
          4,
          109
        ]
      },
      {
        Type: 98,
        Name: "CreateConstructor",
        HasThis: false,
        Parameters: [
          108,
          102,
          4
        ]
      },
      {
        Type: 73,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 98,
        Name: "CreateCustomAttribute",
        HasThis: false,
        Parameters: [
          110,
          111
        ]
      },
      {
        Type: 75,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          112
        ]
      },
      {
        Type: 124,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 98,
        Name: "CreateProperty",
        HasThis: false,
        Parameters: [
          108,
          102,
          113,
          114
        ]
      },
      {
        Type: 9,
        Name: "Alert",
        HasThis: false,
        Parameters: [
          23
        ]
      },
      {
        Type: 74,
        Name: "get_UseGlobalNamespace",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 74,
        Name: "set_UseGlobalNamespace",
        HasThis: true,
        Parameters: [
          115
        ]
      },
      {
        Type: 74,
        Name: "get_SetVTable",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 74,
        Name: "set_SetVTable",
        HasThis: true,
        Parameters: [
          115
        ]
      },
      {
        Type: 74,
        Name: "get_Name",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 74,
        Name: "set_Name",
        HasThis: true,
        Parameters: [
          82
        ]
      },
      {
        Type: 74,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 74,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          100
        ]
      },
      {
        Type: 125,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          25
        ]
      },
      {
        Type: 75,
        Name: "get_AllowMultiple",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 75,
        Name: "set_AllowMultiple",
        HasThis: true,
        Parameters: [
          115
        ]
      },
      {
        Type: 75,
        Name: "get_Inherited",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 75,
        Name: "set_Inherited",
        HasThis: true,
        Parameters: [
          115
        ]
      },
      {
        Type: 75,
        Name: "get_ValidOn",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 75,
        Name: ".ctor",
        HasThis: true,
        Parameters: []
      },
      {
        Type: 75,
        Name: ".cctor",
        HasThis: false,
        Parameters: []
      },
      {
        Type: 126,
        Name: ".ctor",
        HasThis: true,
        Parameters: [
          116
        ]
      },
      {
        Type: 127,
        Name: "BootModuleEntryPoint",
        HasThis: false,
        Parameters: []
      }
    ],
    ParameterReferences: [
      {
        Type: 77,
        Name: "args",
        Sequence: 1
      },
      {
        Type: 128,
        Name: "e",
        Sequence: 1
      },
      {
        Type: 95,
        Name: "d",
        Sequence: 1
      },
      {
        Type: 101,
        Name: "target",
        Sequence: 2
      },
      {
        Type: 129,
        Name: "function",
        Sequence: 3
      },
      {
        Type: 130,
        Name: "threadStart",
        Sequence: 1
      },
      {
        Type: 131,
        Name: "priority",
        Sequence: 2
      },
      {
        Type: 132,
        Name: "name",
        Sequence: 3
      },
      {
        Type: 1,
        Name: "sender",
        Sequence: 1
      },
      {
        Type: 55,
        Name: "e",
        Sequence: 2
      },
      {
        Type: 133,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 134,
        Name: "elementTypeVTable",
        Sequence: 1
      },
      {
        Type: 135,
        Name: "length",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "duration1",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "duration2",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "duration",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "numberOfThreads",
        Sequence: 1
      },
      {
        Type: 86,
        Name: "item",
        Sequence: 1
      },
      {
        Type: 53,
        Name: "",
        Sequence: 1
      },
      {
        Type: 135,
        Name: "index",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "",
        Sequence: 2
      },
      {
        Type: 1,
        Name: "",
        Sequence: 3
      },
      {
        Type: 51,
        Name: "s",
        Sequence: 1
      },
      {
        Type: 77,
        Name: "",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "",
        Sequence: 1
      },
      {
        Type: 49,
        Name: "test",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "context",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "s",
        Sequence: 2
      },
      {
        Type: 136,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 137,
        Name: "",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 132,
        Name: "message",
        Sequence: 1
      },
      {
        Type: 138,
        Name: "obj",
        Sequence: 1
      },
      {
        Type: 134,
        Name: "typeVtable",
        Sequence: 2
      },
      {
        Type: 139,
        Name: "throwError",
        Sequence: 3
      },
      {
        Type: 3,
        Name: "e",
        Sequence: 1
      },
      {
        Type: 78,
        Name: "condition",
        Sequence: 2
      },
      {
        Type: 79,
        Name: "expected",
        Sequence: 1
      },
      {
        Type: 79,
        Name: "actual",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "expected",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "actual",
        Sequence: 2
      },
      {
        Type: 51,
        Name: "expected",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "actual",
        Sequence: 2
      },
      {
        Type: 1,
        Name: "expected",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "actual",
        Sequence: 2
      },
      {
        Type: 51,
        Name: "name",
        Sequence: 1
      },
      {
        Type: 140,
        Name: "",
        Sequence: 2
      },
      {
        Type: 51,
        Name: "",
        Sequence: 3
      },
      {
        Type: 51,
        Name: "",
        Sequence: 4
      },
      {
        Type: 51,
        Name: "",
        Sequence: 5
      },
      {
        Type: 68,
        Name: "",
        Sequence: 6
      },
      {
        Type: 51,
        Name: "key",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "value",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "",
        Sequence: 1
      },
      {
        Type: 101,
        Name: "o",
        Sequence: 1
      },
      {
        Type: 1,
        Name: "value",
        Sequence: 2
      },
      {
        Type: 47,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 104,
        Name: "",
        Sequence: 1
      },
      {
        Type: 104,
        Name: "",
        Sequence: 2
      },
      {
        Type: 77,
        Name: "args",
        Sequence: 1
      },
      {
        Type: 51,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 78,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 3,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 101,
        Name: "self",
        Sequence: 1
      },
      {
        Type: 77,
        Name: "args",
        Sequence: 2
      },
      {
        Type: 107,
        Name: "attributeType",
        Sequence: 1
      },
      {
        Type: 139,
        Name: "inherit",
        Sequence: 2
      },
      {
        Type: 109,
        Name: "l",
        Sequence: 1
      },
      {
        Type: 135,
        Name: "timeoutMs",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "a",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "b",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "begPoint",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "endPoint",
        Sequence: 2
      },
      {
        Type: 84,
        Name: "data",
        Sequence: 3
      },
      {
        Type: 85,
        Name: "comparison",
        Sequence: 4
      },
      {
        Type: 86,
        Name: "value",
        Sequence: 2
      },
      {
        Type: 86,
        Name: "a",
        Sequence: 1
      },
      {
        Type: 86,
        Name: "b",
        Sequence: 2
      },
      {
        Type: 85,
        Name: "comparison",
        Sequence: 3
      },
      {
        Type: 68,
        Name: "index",
        Sequence: 1
      },
      {
        Type: 78,
        Name: "go",
        Sequence: 2
      },
      {
        Type: 132,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 135,
        Name: "resources",
        Sequence: 1
      },
      {
        Type: 62,
        Name: "element",
        Sequence: 2
      },
      {
        Type: 78,
        Name: "clockwise",
        Sequence: 3
      },
      {
        Type: 62,
        Name: "element",
        Sequence: 1
      },
      {
        Type: 141,
        Name: "",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "x",
        Sequence: 1
      },
      {
        Type: 78,
        Name: "failed",
        Sequence: 1
      },
      {
        Type: 84,
        Name: "data",
        Sequence: 1
      },
      {
        Type: 85,
        Name: "comparison",
        Sequence: 2
      },
      {
        Type: 142,
        Name: "",
        Sequence: 1
      },
      {
        Type: 143,
        Name: "",
        Sequence: 2
      },
      {
        Type: 68,
        Name: "beg",
        Sequence: 1
      },
      {
        Type: 68,
        Name: "end",
        Sequence: 2
      },
      {
        Type: 101,
        Name: "exceptionState",
        Sequence: 1
      },
      {
        Type: 89,
        Name: "callback",
        Sequence: 3
      },
      {
        Type: 1,
        Name: "object",
        Sequence: 4
      },
      {
        Type: 88,
        Name: "result",
        Sequence: 1
      },
      {
        Type: 132,
        Name: "name",
        Sequence: 1
      },
      {
        Type: 132,
        Name: "ns",
        Sequence: 1
      },
      {
        Type: 132,
        Name: "name",
        Sequence: 2
      },
      {
        Type: 144,
        Name: "assembly",
        Sequence: 3
      },
      {
        Type: 145,
        Name: "vtableDataPointer",
        Sequence: 4
      },
      {
        Type: 146,
        Name: "elementClass",
        Sequence: 5
      },
      {
        Type: 139,
        Name: "isInterface",
        Sequence: 6
      },
      {
        Type: 139,
        Name: "isArray",
        Sequence: 7
      },
      {
        Type: 146,
        Name: "declaringType",
        Sequence: 1
      },
      {
        Type: 135,
        Name: "vtableSlot",
        Sequence: 4
      },
      {
        Type: 147,
        Name: "attributeProvider",
        Sequence: 1
      },
      {
        Type: 148,
        Name: "constructor",
        Sequence: 2
      },
      {
        Type: 149,
        Name: "validOn",
        Sequence: 1
      },
      {
        Type: 148,
        Name: "getMethod",
        Sequence: 3
      },
      {
        Type: 148,
        Name: "setMethod",
        Sequence: 4
      },
      {
        Type: 139,
        Name: "value",
        Sequence: 1
      },
      {
        Type: 150,
        Name: "",
        Sequence: 1
      }
    ],
    FieldReferences: [
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate2",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate3",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate6",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "CS$<>9__CachedAnonymousMethodDelegate7",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "_testSuites",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "_passCount",
        IsStatic: true
      },
      {
        Type: 0,
        Name: "_failures",
        IsStatic: true
      },
      {
        Type: 28,
        Name: "property",
        IsStatic: true
      },
      {
        Type: 29,
        Name: "property",
        IsStatic: true
      },
      {
        Type: 40,
        Name: "$$method0x6000090-1",
        IsStatic: true
      }
    ],
    StaticConstructors: [
      52,
      211,
      213
    ]
  },
  Fixups: [
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Main(System.String[]) @ 34",
      Offset: 34,
      Type: 9,
      Index: 0
    },
    {
      Description: "System.Void XaeiOS.Process.SignalDaemon::Start() @ 602",
      Offset: 568,
      Type: 9,
      Index: 1
    },
    {
      Description: "System.Void System.Browser.XmlHttpRequest.XmlHttpRequestManager::StartDriver() @ 671",
      Offset: 69,
      Type: 9,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunProcessViewer() @ 1034",
      Offset: 363,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTestSuite() @ 1438",
      Offset: 404,
      Type: 9,
      Index: 4
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 2185",
      Offset: 747,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunProcessViewer() @ 2680",
      Offset: 495,
      Type: 9,
      Index: 3
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate2 @ 3228",
      Offset: 548,
      Type: 33,
      Index: 0
    },
    {
      Description: "System.Threading.ThreadStart @ 3912",
      Offset: 684,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 4091",
      Offset: 179,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0() @ 4104",
      Offset: 13,
      Type: 9,
      Index: 7
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate2 @ 4446",
      Offset: 342,
      Type: 33,
      Index: 0
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate2 @ 4861",
      Offset: 415,
      Type: 33,
      Index: 0
    },
    {
      Description: "XaeiOS.SIP @ 5058",
      Offset: 197,
      Type: 17,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String) @ 5233",
      Offset: 175,
      Type: 9,
      Index: 8
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate3 @ 5647",
      Offset: 414,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.EventHandler @ 6375",
      Offset: 728,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 6546",
      Offset: 171,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1(System.Object,System.EventArgs) @ 6559",
      Offset: 13,
      Type: 9,
      Index: 9
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate3 @ 6902",
      Offset: 343,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate3 @ 7219",
      Offset: 317,
      Type: 33,
      Index: 1
    },
    {
      Description: "System.Void XaeiOS.SIP::add_Exited(System.EventHandler) @ 7323",
      Offset: 104,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void XaeiOS.SIP::Start() @ 7731",
      Offset: 408,
      Type: 9,
      Index: 11
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 8473",
      Offset: 742,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTestSuite() @ 8977",
      Offset: 504,
      Type: 9,
      Index: 4
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate6 @ 9521",
      Offset: 544,
      Type: 33,
      Index: 2
    },
    {
      Description: "System.Threading.ThreadStart @ 10205",
      Offset: 684,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 10380",
      Offset: 175,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4() @ 10393",
      Offset: 13,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate6 @ 10731",
      Offset: 338,
      Type: 33,
      Index: 2
    },
    {
      Description: "System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate6 @ 11146",
      Offset: 415,
      Type: 33,
      Index: 2
    },
    {
      Description: "XaeiOS.SIP @ 11343",
      Offset: 197,
      Type: 17,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String) @ 11520",
      Offset: 177,
      Type: 9,
      Index: 8
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate7 @ 11938",
      Offset: 418,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.EventHandler @ 12666",
      Offset: 728,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 12833",
      Offset: 167,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5(System.Object,System.EventArgs) @ 12846",
      Offset: 13,
      Type: 9,
      Index: 13
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate7 @ 13185",
      Offset: 339,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate7 @ 13502",
      Offset: 317,
      Type: 33,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.SIP::add_Exited(System.EventHandler) @ 13606",
      Offset: 104,
      Type: 9,
      Index: 10
    },
    {
      Description: "System.Void XaeiOS.SIP::Start() @ 14014",
      Offset: 408,
      Type: 9,
      Index: 11
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 14756",
      Offset: 742,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::GetTestCases() @ 15266",
      Offset: 510,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> @ 15911",
      Offset: 645,
      Type: 17,
      Index: 48
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 16035",
      Offset: 124,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Type[] XaeiOS.TestSuite.TestRunner::_testSuites @ 16736",
      Offset: 701,
      Type: 33,
      Index: 4
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 17386",
      Offset: 650,
      Type: 9,
      Index: 16
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 17390",
      Offset: 4,
      Type: 17,
      Index: 49
    },
    {
      Description: "XaeiOS.TestSuite.Tests.NullReferenceExceptionTest @ 17492",
      Offset: 102,
      Type: 17,
      Index: 20
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::.ctor() @ 17609",
      Offset: 117,
      Type: 9,
      Index: 17
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadSleepTest @ 18107",
      Offset: 498,
      Type: 17,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::.ctor(System.Int32,System.Int32) @ 18242",
      Offset: 135,
      Type: 9,
      Index: 18
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ResourceTest @ 18738",
      Offset: 496,
      Type: 17,
      Index: 23
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::.ctor() @ 18841",
      Offset: 103,
      Type: 9,
      Index: 19
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SynchronizationTest @ 19334",
      Offset: 493,
      Type: 17,
      Index: 21
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::.ctor() @ 19444",
      Offset: 110,
      Type: 9,
      Index: 20
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest @ 19947",
      Offset: 503,
      Type: 17,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::.ctor() @ 20064",
      Offset: 117,
      Type: 9,
      Index: 21
    },
    {
      Description: "XaeiOS.TestSuite.Tests.EventTest @ 20581",
      Offset: 517,
      Type: 17,
      Index: 11
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::.ctor() @ 20681",
      Offset: 100,
      Type: 9,
      Index: 22
    },
    {
      Description: "XaeiOS.TestSuite.Tests.XmlHttpRequestTest @ 21171",
      Offset: 490,
      Type: 17,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::.ctor() @ 21280",
      Offset: 109,
      Type: 9,
      Index: 23
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest @ 21786",
      Offset: 506,
      Type: 17,
      Index: 22
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::.ctor(System.Int32) @ 21897",
      Offset: 111,
      Type: 9,
      Index: 24
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingStressTest @ 22430",
      Offset: 533,
      Type: 17,
      Index: 31
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::.ctor(System.Int32) @ 22560",
      Offset: 130,
      Type: 9,
      Index: 25
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest @ 23057",
      Offset: 497,
      Type: 17,
      Index: 7
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::.ctor() @ 23177",
      Offset: 120,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 24607",
      Offset: 1430,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Type[] XaeiOS.TestSuite.TestRunner::_testSuites @ 25227",
      Offset: 620,
      Type: 33,
      Index: 4
    },
    {
      Description: "!!0 System.Activator::CreateInstance<XaeiOS.TestSuite.TestSuite>(System.Type) @ 25310",
      Offset: 83,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.Collections.Generic.IList`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestSuite::GetTestCases() @ 25809",
      Offset: 499,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Collections.Generic.IList`1 @ 26611",
      Offset: 802,
      Type: 17,
      Index: 50
    },
    {
      Description: "System.Int32 System.Collections.Generic.IList`1::get_Count() @ 26613",
      Offset: 2,
      Type: 65,
      Index: 30
    },
    {
      Description: "System.Collections.Generic.IList`1 @ 27812",
      Offset: 1199,
      Type: 17,
      Index: 50
    },
    {
      Description: "T System.Collections.Generic.IList`1::get_Item(System.Int32) @ 27814",
      Offset: 2,
      Type: 65,
      Index: 31
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 28288",
      Offset: 474,
      Type: 65,
      Index: 27
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 29145",
      Offset: 857,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTests() @ 29658",
      Offset: 513,
      Type: 9,
      Index: 32
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.TestRunner::_passCount @ 30226",
      Offset: 568,
      Type: 33,
      Index: 5
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> @ 30326",
      Offset: 100,
      Type: 17,
      Index: 48
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 30450",
      Offset: 124,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 30849",
      Offset: 399,
      Type: 33,
      Index: 6
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::GetTestCases() @ 30934",
      Offset: 85,
      Type: 9,
      Index: 14
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 31418",
      Offset: 484,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 31880",
      Offset: 462,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 32418",
      Offset: 538,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 33165",
      Offset: 747,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Void System.Console::WriteLine() @ 34151",
      Offset: 986,
      Type: 9,
      Index: 36
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 34566",
      Offset: 415,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 34570",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.TestRunner::_passCount @ 34700",
      Offset: 130,
      Type: 33,
      Index: 5
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 34924",
      Offset: 224,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 35535",
      Offset: 611,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 36000",
      Offset: 465,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 36424",
      Offset: 424,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Void System.Console::WriteLine() @ 36937",
      Offset: 513,
      Type: 9,
      Index: 36
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 37671",
      Offset: 734,
      Type: 33,
      Index: 6
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 37754",
      Offset: 83,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Void System.Console::WriteLine() @ 38836",
      Offset: 1082,
      Type: 9,
      Index: 36
    },
    {
      Description: "System.Void System.Console::Write(System.String) @ 39246",
      Offset: 410,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Console::Write(System.String) @ 39753",
      Offset: 507,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Console::Write(System.String) @ 40166",
      Offset: 413,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 40585",
      Offset: 419,
      Type: 33,
      Index: 6
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 40668",
      Offset: 83,
      Type: 65,
      Index: 40
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 41143",
      Offset: 475,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 41145",
      Offset: 2,
      Type: 65,
      Index: 41
    },
    {
      Description: "System.Void System.Console::Write(System.String) @ 41602",
      Offset: 457,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Void System.Console::Write(System.String) @ 42015",
      Offset: 413,
      Type: 9,
      Index: 39
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 42436",
      Offset: 421,
      Type: 33,
      Index: 6
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 42519",
      Offset: 83,
      Type: 65,
      Index: 40
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 42994",
      Offset: 475,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 42996",
      Offset: 2,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.String System.Object::ToString() @ 43466",
      Offset: 470,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 43923",
      Offset: 457,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 44344",
      Offset: 421,
      Type: 33,
      Index: 6
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 44427",
      Offset: 83,
      Type: 65,
      Index: 40
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 44902",
      Offset: 475,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 44904",
      Offset: 2,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 45374",
      Offset: 470,
      Type: 65,
      Index: 44
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 45837",
      Offset: 463,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Void System.Console::WriteLine() @ 46254",
      Offset: 417,
      Type: 9,
      Index: 36
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 46863",
      Offset: 609,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::PerformTest(XaeiOS.TestSuite.ITest) @ 47329",
      Offset: 466,
      Type: 9,
      Index: 45
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 48204",
      Offset: 875,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::PerformTest(XaeiOS.TestSuite.ITest) @ 48714",
      Offset: 510,
      Type: 9,
      Index: 45
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 49321",
      Offset: 607,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 49323",
      Offset: 2,
      Type: 65,
      Index: 41
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 49891",
      Offset: 568,
      Type: 9,
      Index: 35
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 50797",
      Offset: 906,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 50799",
      Offset: 2,
      Type: 65,
      Index: 46
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 51691",
      Offset: 892,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 51693",
      Offset: 2,
      Type: 65,
      Index: 47
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.TestRunner::_passCount @ 52682",
      Offset: 989,
      Type: 33,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.TestRunner::_passCount @ 52757",
      Offset: 75,
      Type: 33,
      Index: 5
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 52855",
      Offset: 98,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 52859",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 52996",
      Offset: 137,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 52998",
      Offset: 2,
      Type: 65,
      Index: 41
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 53746",
      Offset: 748,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 54211",
      Offset: 465,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 54494",
      Offset: 283,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 54498",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 54635",
      Offset: 137,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 54637",
      Offset: 2,
      Type: 65,
      Index: 41
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 55401",
      Offset: 764,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 55403",
      Offset: 2,
      Type: 65,
      Index: 42
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 55989",
      Offset: 586,
      Type: 17,
      Index: 49
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 55991",
      Offset: 2,
      Type: 65,
      Index: 42
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 56464",
      Offset: 473,
      Type: 65,
      Index: 44
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 56985",
      Offset: 521,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 57450",
      Offset: 465,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures @ 57878",
      Offset: 428,
      Type: 33,
      Index: 6
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 57955",
      Offset: 77,
      Type: 65,
      Index: 27
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 58712",
      Offset: 757,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 59210",
      Offset: 498,
      Type: 9,
      Index: 35
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String) @ 59775",
      Offset: 565,
      Type: 9,
      Index: 48
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 60547",
      Offset: 772,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String) @ 61039",
      Offset: 492,
      Type: 9,
      Index: 48
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 61629",
      Offset: 590,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.String @ 61633",
      Offset: 4,
      Type: 17,
      Index: 51
    },
    {
      Description: "System.String System.Object::ToString() @ 61963",
      Offset: 330,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 62913",
      Offset: 950,
      Type: 9,
      Index: 38
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 63663",
      Offset: 750,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0() @ 64158",
      Offset: 495,
      Type: 9,
      Index: 7
    },
    {
      Description: "XaeiOS.ProcessViewer.ProcessViewer @ 64914",
      Offset: 756,
      Type: 17,
      Index: 52
    },
    {
      Description: "System.Void XaeiOS.ProcessViewer.ProcessViewer::.ctor() @ 65015",
      Offset: 101,
      Type: 9,
      Index: 49
    },
    {
      Description: "System.Void XaeiOS.ProcessViewer.ProcessViewer::set_UpdateInterval(System.Int32) @ 65397",
      Offset: 382,
      Type: 9,
      Index: 50
    },
    {
      Description: "System.Void XaeiOS.ProcessViewer.ProcessViewer::Start() @ 65801",
      Offset: 404,
      Type: 9,
      Index: 51
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 66530",
      Offset: 729,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1(System.Object,System.EventArgs) @ 67019",
      Offset: 489,
      Type: 9,
      Index: 9
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 68092",
      Offset: 1073,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4() @ 68578",
      Offset: 486,
      Type: 9,
      Index: 12
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTests() @ 69278",
      Offset: 700,
      Type: 9,
      Index: 32
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 70021",
      Offset: 743,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5(System.Object,System.EventArgs) @ 70507",
      Offset: 486,
      Type: 9,
      Index: 13
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 71596",
      Offset: 1089,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::.cctor() @ 72088",
      Offset: 492,
      Type: 9,
      Index: 52
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 72654",
      Offset: 566,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Type @ 72658",
      Offset: 4,
      Type: 17,
      Index: 53
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 72724",
      Offset: 66,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite @ 72794",
      Offset: 70,
      Type: 17,
      Index: 35
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 73277",
      Offset: 483,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite @ 73347",
      Offset: 70,
      Type: 17,
      Index: 25
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 73835",
      Offset: 488,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 73905",
      Offset: 70,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 74391",
      Offset: 486,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite @ 74461",
      Offset: 70,
      Type: 17,
      Index: 13
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 74949",
      Offset: 488,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite @ 75019",
      Offset: 70,
      Type: 17,
      Index: 19
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 75512",
      Offset: 493,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.QuickSortTestSuite @ 75582",
      Offset: 70,
      Type: 17,
      Index: 32
    },
    {
      Description: "System.Type[] XaeiOS.TestSuite.TestRunner::_testSuites @ 76024",
      Offset: 442,
      Type: 33,
      Index: 4
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 76484",
      Offset: 460,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 76976",
      Offset: 492,
      Type: 9,
      Index: 54
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 77518",
      Offset: 542,
      Type: 9,
      Index: 55
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 77962",
      Offset: 444,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 78451",
      Offset: 489,
      Type: 9,
      Index: 56
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 79427",
      Offset: 976,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 79919",
      Offset: 492,
      Type: 9,
      Index: 57
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 80900",
      Offset: 981,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 81392",
      Offset: 492,
      Type: 9,
      Index: 58
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 82381",
      Offset: 989,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 82873",
      Offset: 492,
      Type: 9,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::PerformTest() @ 83821",
      Offset: 948,
      Type: 65,
      Index: 60
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 84124",
      Offset: 303,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 84134",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::TestFailed(System.Exception) @ 84952",
      Offset: 818,
      Type: 9,
      Index: 62
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 85695",
      Offset: 743,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::TestFailed(System.Exception) @ 86184",
      Offset: 489,
      Type: 9,
      Index: 62
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 87219",
      Offset: 1035,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 87708",
      Offset: 489,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String) @ 88329",
      Offset: 621,
      Type: 9,
      Index: 48
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 89088",
      Offset: 759,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 89577",
      Offset: 489,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean) @ 90158",
      Offset: 581,
      Type: 9,
      Index: 65
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 90929",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Fail(System.String) @ 91415",
      Offset: 486,
      Type: 9,
      Index: 66
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::Fail(System.String) @ 91979",
      Offset: 564,
      Type: 9,
      Index: 67
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 92727",
      Offset: 748,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int64,System.Int64) @ 93213",
      Offset: 486,
      Type: 9,
      Index: 68
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int64,System.Int64) @ 93797",
      Offset: 584,
      Type: 9,
      Index: 69
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 94568",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int32,System.Int32) @ 95054",
      Offset: 486,
      Type: 9,
      Index: 70
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int32,System.Int32) @ 95638",
      Offset: 584,
      Type: 9,
      Index: 71
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 96409",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.String,System.String) @ 96895",
      Offset: 486,
      Type: 9,
      Index: 72
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.String,System.String) @ 97481",
      Offset: 586,
      Type: 9,
      Index: 73
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 98252",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Object,System.Object) @ 98738",
      Offset: 486,
      Type: 9,
      Index: 74
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Object,System.Object) @ 99324",
      Offset: 586,
      Type: 9,
      Index: 75
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 100095",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 100581",
      Offset: 486,
      Type: 9,
      Index: 76
    },
    {
      Description: "System.Void System.Object::.ctor() @ 101116",
      Offset: 535,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 101606",
      Offset: 490,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest() @ 102098",
      Offset: 492,
      Type: 9,
      Index: 78
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 102867",
      Offset: 769,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Browser.XmlHttpRequest.XmlHttpRequest System.Browser.XmlHttpRequest.XmlHttpRequestManager::DoSimpleXmlHttpRequest(System.String) @ 103262",
      Offset: 395,
      Type: 9,
      Index: 79
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 103801",
      Offset: 539,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 103805",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 104689",
      Offset: 884,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 105140",
      Offset: 451,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Browser.XmlHttpRequest.XmlHttpRequest System.Browser.XmlHttpRequest.XmlHttpRequestManager::DoSimpleXmlHttpRequest(System.String,System.Browser.XmlHttpRequest.RequestMethod,System.String,System.String,System.String,System.Int32) @ 105537",
      Offset: 397,
      Type: 9,
      Index: 80
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 105992",
      Offset: 455,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Browser.XmlHttpRequest.XmlHttpRequestTimeoutException @ 106002",
      Offset: 10,
      Type: 17,
      Index: 54
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 106875",
      Offset: 873,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 107403",
      Offset: 528,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 108147",
      Offset: 744,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::.ctor() @ 108639",
      Offset: 492,
      Type: 9,
      Index: 23
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 109207",
      Offset: 568,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 109976",
      Offset: 769,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest() @ 110465",
      Offset: 489,
      Type: 9,
      Index: 82
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String) @ 111542",
      Offset: 1077,
      Type: 9,
      Index: 83
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String) @ 111957",
      Offset: 415,
      Type: 9,
      Index: 83
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String) @ 112376",
      Offset: 419,
      Type: 9,
      Index: 83
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Remove(System.String) @ 112789",
      Offset: 413,
      Type: 9,
      Index: 84
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Remove(System.String) @ 113190",
      Offset: 401,
      Type: 9,
      Index: 84
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 113942",
      Offset: 752,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String) @ 114440",
      Offset: 498,
      Type: 9,
      Index: 83
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 115061",
      Offset: 621,
      Type: 65,
      Index: 85
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 118151",
      Offset: 3090,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Remove(System.String) @ 118667",
      Offset: 516,
      Type: 9,
      Index: 84
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 119292",
      Offset: 625,
      Type: 65,
      Index: 85
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 119777",
      Offset: 485,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 120394",
      Offset: 617,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 122369",
      Offset: 1975,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 122914",
      Offset: 545,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 123760",
      Offset: 846,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 126626",
      Offset: 2866,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 127540",
      Offset: 914,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 128080",
      Offset: 540,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 130244",
      Offset: 2164,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::.ctor() @ 130751",
      Offset: 507,
      Type: 9,
      Index: 21
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 131327",
      Offset: 576,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 132110",
      Offset: 783,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest() @ 132611",
      Offset: 501,
      Type: 9,
      Index: 86
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int64,System.Int64) @ 135091",
      Offset: 2480,
      Type: 9,
      Index: 68
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 135549",
      Offset: 458,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 135553",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 136314",
      Offset: 761,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 136783",
      Offset: 469,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 137812",
      Offset: 1029,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::.ctor() @ 138313",
      Offset: 501,
      Type: 9,
      Index: 26
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 138892",
      Offset: 579,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 139687",
      Offset: 795,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest() @ 140176",
      Offset: 489,
      Type: 9,
      Index: 87
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 140816",
      Offset: 640,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 141344",
      Offset: 528,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 141793",
      Offset: 449,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 142217",
      Offset: 424,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 142696",
      Offset: 479,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 143226",
      Offset: 530,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 143677",
      Offset: 451,
      Type: 9,
      Index: 88
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 144449",
      Offset: 772,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::.ctor(System.Int32,System.Int32) @ 144938",
      Offset: 489,
      Type: 9,
      Index: 18
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 145528",
      Offset: 590,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 146425",
      Offset: 897,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest() @ 146911",
      Offset: 486,
      Type: 9,
      Index: 89
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 148208",
      Offset: 1297,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::.ctor() @ 148694",
      Offset: 486,
      Type: 9,
      Index: 90
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 149263",
      Offset: 569,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 150038",
      Offset: 775,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean) @ 150527",
      Offset: 489,
      Type: 9,
      Index: 65
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 151661",
      Offset: 1134,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 151780",
      Offset: 119,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 152623",
      Offset: 843,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::Fail(System.String) @ 153115",
      Offset: 492,
      Type: 9,
      Index: 67
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 153713",
      Offset: 598,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 153832",
      Offset: 119,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 154583",
      Offset: 751,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int64,System.Int64) @ 155078",
      Offset: 495,
      Type: 9,
      Index: 69
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 156200",
      Offset: 1122,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 156204",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 156650",
      Offset: 446,
      Type: 9,
      Index: 37
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 157134",
      Offset: 484,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 157251",
      Offset: 117,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 158096",
      Offset: 845,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int32,System.Int32) @ 158594",
      Offset: 498,
      Type: 9,
      Index: 71
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 159716",
      Offset: 1122,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 159720",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 160166",
      Offset: 446,
      Type: 9,
      Index: 37
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 160650",
      Offset: 484,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 160767",
      Offset: 117,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 161612",
      Offset: 845,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.String,System.String) @ 162110",
      Offset: 498,
      Type: 9,
      Index: 73
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 163323",
      Offset: 1213,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.String @ 163327",
      Offset: 4,
      Type: 17,
      Index: 51
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 164088",
      Offset: 761,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 164205",
      Offset: 117,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 165050",
      Offset: 845,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Object,System.Object) @ 165548",
      Offset: 498,
      Type: 9,
      Index: 75
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 167205",
      Offset: 1657,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 167209",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 167595",
      Offset: 386,
      Type: 9,
      Index: 37
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 168079",
      Offset: 484,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 168196",
      Offset: 117,
      Type: 9,
      Index: 54
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 168705",
      Offset: 509,
      Type: 65,
      Index: 91
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 169779",
      Offset: 1074,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 169783",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 170169",
      Offset: 386,
      Type: 9,
      Index: 37
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 170655",
      Offset: 486,
      Type: 17,
      Index: 2
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 170772",
      Offset: 117,
      Type: 9,
      Index: 54
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 171526",
      Offset: 754,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertNotNull(System.String,System.Object) @ 172018",
      Offset: 492,
      Type: 9,
      Index: 92
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean) @ 172603",
      Offset: 585,
      Type: 9,
      Index: 65
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 173413",
      Offset: 810,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::add_MyEvent(System.EventHandler) @ 173902",
      Offset: 489,
      Type: 9,
      Index: 93
    },
    {
      Description: "System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate) @ 174552",
      Offset: 650,
      Type: 9,
      Index: 94
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 174990",
      Offset: 438,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 174997",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 175478",
      Offset: 481,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::remove_MyEvent(System.EventHandler) @ 175970",
      Offset: 492,
      Type: 9,
      Index: 95
    },
    {
      Description: "System.Delegate System.Delegate::Remove(System.Delegate,System.Delegate) @ 176623",
      Offset: 653,
      Type: 9,
      Index: 96
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 177060",
      Offset: 437,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 177067",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 177548",
      Offset: 481,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::add_NullEvent(System.EventHandler) @ 178040",
      Offset: 492,
      Type: 9,
      Index: 97
    },
    {
      Description: "System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate) @ 178694",
      Offset: 654,
      Type: 9,
      Index: 94
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 179132",
      Offset: 438,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 179139",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 179622",
      Offset: 483,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::remove_NullEvent(System.EventHandler) @ 180114",
      Offset: 492,
      Type: 9,
      Index: 98
    },
    {
      Description: "System.Delegate System.Delegate::Remove(System.Delegate,System.Delegate) @ 180771",
      Offset: 657,
      Type: 9,
      Index: 96
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 181208",
      Offset: 437,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 181215",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 181698",
      Offset: 483,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest() @ 182193",
      Offset: 495,
      Type: 9,
      Index: 99
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 182888",
      Offset: 695,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.EventHandler @ 183416",
      Offset: 528,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 183587",
      Offset: 171,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent(System.Object,System.EventArgs) @ 183600",
      Offset: 13,
      Type: 9,
      Index: 100
    },
    {
      Description: "System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate) @ 183977",
      Offset: 377,
      Type: 9,
      Index: 94
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 184448",
      Offset: 471,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 184455",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 184561",
      Offset: 106,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.EventHandler @ 185090",
      Offset: 529,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 185262",
      Offset: 172,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2(System.Object,System.EventArgs) @ 185275",
      Offset: 13,
      Type: 9,
      Index: 101
    },
    {
      Description: "System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate) @ 185653",
      Offset: 378,
      Type: 9,
      Index: 94
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 186125",
      Offset: 472,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 186132",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 186238",
      Offset: 106,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.EventHandler @ 186767",
      Offset: 529,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 186939",
      Offset: 172,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3(System.Object,System.EventArgs) @ 186952",
      Offset: 13,
      Type: 9,
      Index: 102
    },
    {
      Description: "System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate) @ 187331",
      Offset: 379,
      Type: 9,
      Index: 94
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 187805",
      Offset: 474,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.EventHandler @ 187812",
      Offset: 7,
      Type: 17,
      Index: 47
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 187918",
      Offset: 106,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 188354",
      Offset: 436,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 188834",
      Offset: 480,
      Type: 65,
      Index: 103
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 189315",
      Offset: 481,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 189837",
      Offset: 522,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 190359",
      Offset: 522,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 190815",
      Offset: 456,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.EventArgs @ 191662",
      Offset: 847,
      Type: 17,
      Index: 55
    },
    {
      Description: "System.Void System.EventArgs::.ctor() @ 191746",
      Offset: 84,
      Type: 9,
      Index: 104
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 192139",
      Offset: 393,
      Type: 65,
      Index: 103
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 192460",
      Offset: 321,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NullReferenceException @ 192470",
      Offset: 10,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 193316",
      Offset: 846,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 193859",
      Offset: 543,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 194603",
      Offset: 744,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3(System.Object,System.EventArgs) @ 195095",
      Offset: 492,
      Type: 9,
      Index: 102
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 195697",
      Offset: 602,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 196522",
      Offset: 825,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2(System.Object,System.EventArgs) @ 197008",
      Offset: 486,
      Type: 9,
      Index: 101
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 197610",
      Offset: 602,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 198435",
      Offset: 825,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent(System.Object,System.EventArgs) @ 198921",
      Offset: 486,
      Type: 9,
      Index: 100
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 199522",
      Offset: 601,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 200347",
      Offset: 825,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::.ctor() @ 200833",
      Offset: 486,
      Type: 9,
      Index: 22
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 201392",
      Offset: 559,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 202143",
      Offset: 751,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 202629",
      Offset: 486,
      Type: 9,
      Index: 105
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean) @ 203211",
      Offset: 582,
      Type: 9,
      Index: 65
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 203982",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 204468",
      Offset: 486,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::Fail(System.String) @ 205033",
      Offset: 565,
      Type: 9,
      Index: 67
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 205781",
      Offset: 748,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int64,System.Int64) @ 206267",
      Offset: 486,
      Type: 9,
      Index: 107
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int64,System.Int64) @ 206852",
      Offset: 585,
      Type: 9,
      Index: 69
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 207623",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32) @ 208109",
      Offset: 486,
      Type: 9,
      Index: 108
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int32,System.Int32) @ 208694",
      Offset: 585,
      Type: 9,
      Index: 71
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 209465",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.String,System.String) @ 209951",
      Offset: 486,
      Type: 9,
      Index: 109
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.String,System.String) @ 210538",
      Offset: 587,
      Type: 9,
      Index: 73
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 211309",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Object,System.Object) @ 211795",
      Offset: 486,
      Type: 9,
      Index: 110
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Object,System.Object) @ 212382",
      Offset: 587,
      Type: 9,
      Index: 75
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 213153",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object) @ 213639",
      Offset: 486,
      Type: 9,
      Index: 111
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertNotNull(System.String,System.Object) @ 214227",
      Offset: 588,
      Type: 9,
      Index: 92
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 214997",
      Offset: 770,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 215486",
      Offset: 489,
      Type: 9,
      Index: 112
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 216479",
      Offset: 993,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Name(System.String) @ 216968",
      Offset: 489,
      Type: 9,
      Index: 113
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 217960",
      Offset: 992,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 218449",
      Offset: 489,
      Type: 9,
      Index: 114
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 219447",
      Offset: 998,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Passed(System.Boolean) @ 219936",
      Offset: 489,
      Type: 9,
      Index: 115
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 220933",
      Offset: 997,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 221422",
      Offset: 489,
      Type: 9,
      Index: 116
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 222428",
      Offset: 1006,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Exception(System.Exception) @ 222917",
      Offset: 489,
      Type: 9,
      Index: 117
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 223922",
      Offset: 1005,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 224414",
      Offset: 492,
      Type: 9,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Passed(System.Boolean) @ 224972",
      Offset: 558,
      Type: 9,
      Index: 115
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 225444",
      Offset: 472,
      Type: 65,
      Index: 119
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 225897",
      Offset: 453,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 225901",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Object System.Reflection.MethodBase::Invoke(System.Object,System.Object[]) @ 225963",
      Offset: 62,
      Type: 65,
      Index: 120
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 226272",
      Offset: 309,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 226282",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Passed(System.Boolean) @ 227103",
      Offset: 821,
      Type: 9,
      Index: 115
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Exception(System.Exception) @ 227502",
      Offset: 399,
      Type: 9,
      Index: 117
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 227986",
      Offset: 484,
      Type: 65,
      Index: 121
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 229507",
      Offset: 1521,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Collections.Generic.IList`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestSuite::GetTestCases() @ 230020",
      Offset: 513,
      Type: 9,
      Index: 29
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> @ 230671",
      Offset: 651,
      Type: 17,
      Index: 48
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 230795",
      Offset: 124,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Type System.Object::GetType() @ 231219",
      Offset: 424,
      Type: 9,
      Index: 122
    },
    {
      Description: "System.Reflection.MethodInfo[] System.Type::GetMethods() @ 231702",
      Offset: 483,
      Type: 65,
      Index: 123
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 233158",
      Offset: 1456,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.TestAttribute @ 233243",
      Offset: 85,
      Type: 17,
      Index: 30
    },
    {
      Description: "System.Boolean System.Reflection.MemberInfo::IsDefined(System.Type,System.Boolean) @ 233686",
      Offset: 443,
      Type: 65,
      Index: 124
    },
    {
      Description: "!!0 System.Activator::CreateInstance<XaeiOS.TestSuite.TestSuite>(System.Type) @ 234727",
      Offset: 1041,
      Type: 9,
      Index: 28
    },
    {
      Description: "System.String System.Object::ToString() @ 235299",
      Offset: 572,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.String System.Reflection.MemberInfo::get_Name() @ 235787",
      Offset: 488,
      Type: 65,
      Index: 125
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Name(System.String) @ 236368",
      Offset: 581,
      Type: 9,
      Index: 113
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 236802",
      Offset: 434,
      Type: 65,
      Index: 27
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 237671",
      Offset: 869,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 238181",
      Offset: 510,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 238754",
      Offset: 573,
      Type: 9,
      Index: 112
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String) @ 239192",
      Offset: 438,
      Type: 9,
      Index: 48
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 239951",
      Offset: 759,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 240440",
      Offset: 489,
      Type: 9,
      Index: 119
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 241340",
      Offset: 900,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 241826",
      Offset: 486,
      Type: 9,
      Index: 121
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 242729",
      Offset: 903,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 243215",
      Offset: 486,
      Type: 9,
      Index: 127
    },
    {
      Description: "System.Void System.Object::.ctor() @ 243738",
      Offset: 523,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 244169",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::TestMethodInliningBreaksLoops() @ 244667",
      Offset: 498,
      Type: 9,
      Index: 128
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1 @ 245302",
      Offset: 635,
      Type: 17,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::.ctor() @ 245432",
      Offset: 130,
      Type: 9,
      Index: 129
    },
    {
      Description: "System.Threading.Lock @ 245914",
      Offset: 482,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 246002",
      Offset: 88,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.Condition @ 246425",
      Offset: 423,
      Type: 17,
      Index: 58
    },
    {
      Description: "System.Void System.Threading.Condition::.ctor(System.Threading.Lock) @ 246542",
      Offset: 117,
      Type: 9,
      Index: 131
    },
    {
      Description: "System.Threading.ThreadStart @ 247089",
      Offset: 547,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 247316",
      Offset: 227,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0() @ 247327",
      Offset: 11,
      Type: 9,
      Index: 132
    },
    {
      Description: "System.Threading.Thread @ 247826",
      Offset: 499,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 247947",
      Offset: 121,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 248280",
      Offset: 333,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 248331",
      Offset: 51,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Boolean System.Threading.Condition::Await(System.Int32) @ 248790",
      Offset: 459,
      Type: 9,
      Index: 136
    },
    {
      Description: "System.Void System.Threading.Thread::Abort() @ 249774",
      Offset: 984,
      Type: 9,
      Index: 137
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 250182",
      Offset: 408,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 250836",
      Offset: 654,
      Type: 9,
      Index: 106
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 251593",
      Offset: 757,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts(System.Int32,System.Int32) @ 252094",
      Offset: 501,
      Type: 9,
      Index: 138
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 254771",
      Offset: 2677,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 255290",
      Offset: 519,
      Type: 9,
      Index: 139
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 256968",
      Offset: 1678,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 257486",
      Offset: 518,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 258006",
      Offset: 520,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 259824",
      Offset: 1818,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 260345",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 260860",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 263565",
      Offset: 2705,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 264081",
      Offset: 516,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 264596",
      Offset: 515,
      Type: 65,
      Index: 140
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 265063",
      Offset: 467,
      Type: 65,
      Index: 140
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 265648",
      Offset: 585,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 266164",
      Offset: 516,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 266673",
      Offset: 509,
      Type: 65,
      Index: 140
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 267140",
      Offset: 467,
      Type: 65,
      Index: 140
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 268167",
      Offset: 1027,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 268688",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 269203",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 271364",
      Offset: 2161,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 271885",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 272400",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 275058",
      Offset: 2658,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 275577",
      Offset: 519,
      Type: 9,
      Index: 141
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 276216",
      Offset: 639,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 277057",
      Offset: 841,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 277549",
      Offset: 492,
      Type: 9,
      Index: 142
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 278185",
      Offset: 636,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 279021",
      Offset: 836,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint2(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 279519",
      Offset: 498,
      Type: 9,
      Index: 143
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 281082",
      Offset: 1563,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 281558",
      Offset: 476,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 282057",
      Offset: 499,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 283956",
      Offset: 1899,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::.ctor() @ 284451",
      Offset: 495,
      Type: 9,
      Index: 144
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 285022",
      Offset: 571,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 285748",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest() @ 286234",
      Offset: 486,
      Type: 9,
      Index: 145
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 287160",
      Offset: 926,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Double XaeiOS.TestSuite.Tests.CompilerFlowControlTest::TestScore(System.Int32,System.Boolean) @ 287652",
      Offset: 492,
      Type: 9,
      Index: 146
    },
    {
      Description: "System.Double XaeiOS.TestSuite.Tests.CompilerFlowControlTest::TestScore(System.Int32,System.Boolean) @ 288270",
      Offset: 618,
      Type: 9,
      Index: 146
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 291186",
      Offset: 2916,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::.ctor() @ 291678",
      Offset: 492,
      Type: 9,
      Index: 147
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 292251",
      Offset: 573,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 293034",
      Offset: 783,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest() @ 293529",
      Offset: 495,
      Type: 9,
      Index: 148
    },
    {
      Description: "System.Threading.ThreadStart @ 294288",
      Offset: 759,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 294473",
      Offset: 185,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart() @ 294486",
      Offset: 13,
      Type: 9,
      Index: 149
    },
    {
      Description: "System.Threading.Thread @ 294940",
      Offset: 454,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority) @ 295096",
      Offset: 156,
      Type: 9,
      Index: 150
    },
    {
      Description: "System.Void System.Threading.Thread::set_Name(System.String) @ 295431",
      Offset: 335,
      Type: 9,
      Index: 151
    },
    {
      Description: "System.Threading.ThreadStart @ 295543",
      Offset: 112,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 295729",
      Offset: 186,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart() @ 295742",
      Offset: 13,
      Type: 9,
      Index: 152
    },
    {
      Description: "System.Threading.Thread @ 296197",
      Offset: 455,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority) @ 296355",
      Offset: 158,
      Type: 9,
      Index: 150
    },
    {
      Description: "System.Void System.Threading.Thread::set_Name(System.String) @ 296692",
      Offset: 337,
      Type: 9,
      Index: 151
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 296772",
      Offset: 80,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 297096",
      Offset: 324,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 297514",
      Offset: 418,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 297566",
      Offset: 52,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 298768",
      Offset: 1202,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 299337",
      Offset: 569,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 299913",
      Offset: 576,
      Type: 9,
      Index: 88
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 300439",
      Offset: 526,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart() @ 300937",
      Offset: 498,
      Type: 9,
      Index: 149
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 301517",
      Offset: 580,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 301949",
      Offset: 432,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 303067",
      Offset: 1118,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 303722",
      Offset: 655,
      Type: 9,
      Index: 88
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 304242",
      Offset: 520,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart() @ 304731",
      Offset: 489,
      Type: 9,
      Index: 152
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 305308",
      Offset: 577,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 305734",
      Offset: 426,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 306132",
      Offset: 398,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 307053",
      Offset: 921,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::.ctor() @ 307539",
      Offset: 486,
      Type: 9,
      Index: 153
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 308107",
      Offset: 568,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 308878",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetTypeByName() @ 309367",
      Offset: 489,
      Type: 9,
      Index: 154
    },
    {
      Description: "System.Type System.Type::GetType(System.String) @ 309957",
      Offset: 590,
      Type: 9,
      Index: 155
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object) @ 310425",
      Offset: 468,
      Type: 9,
      Index: 111
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 311260",
      Offset: 835,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetType() @ 311752",
      Offset: 492,
      Type: 9,
      Index: 156
    },
    {
      Description: "System.Object @ 312344",
      Offset: 592,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 312424",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Type System.Object::GetType() @ 312748",
      Offset: 324,
      Type: 9,
      Index: 122
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 313184",
      Offset: 436,
      Type: 9,
      Index: 105
    },
    {
      Description: "System.String System.Object::ToString() @ 313732",
      Offset: 548,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.String,System.String) @ 314170",
      Offset: 438,
      Type: 9,
      Index: 109
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 314949",
      Offset: 779,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetMethods() @ 315447",
      Offset: 498,
      Type: 9,
      Index: 157
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 316040",
      Offset: 593,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 316113",
      Offset: 73,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Reflection.MethodInfo[] System.Type::GetMethods() @ 316551",
      Offset: 438,
      Type: 65,
      Index: 123
    },
    {
      Description: "System.String System.Reflection.MemberInfo::get_Name() @ 317953",
      Offset: 1402,
      Type: 65,
      Index: 125
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 318521",
      Offset: 568,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 319367",
      Offset: 846,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetProperties() @ 319871",
      Offset: 504,
      Type: 9,
      Index: 158
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 320467",
      Offset: 596,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 320540",
      Offset: 73,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Reflection.PropertyInfo[] System.Type::GetProperties() @ 320978",
      Offset: 438,
      Type: 65,
      Index: 159
    },
    {
      Description: "System.String System.Reflection.MemberInfo::get_Name() @ 322383",
      Offset: 1405,
      Type: 65,
      Index: 125
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 322955",
      Offset: 572,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 323801",
      Offset: 846,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestSetProperty() @ 324302",
      Offset: 501,
      Type: 9,
      Index: 160
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::set_MyProperty(System.String) @ 324887",
      Offset: 585,
      Type: 9,
      Index: 161
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 325316",
      Offset: 429,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 325386",
      Offset: 70,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Reflection.PropertyInfo[] System.Type::GetProperties() @ 325821",
      Offset: 435,
      Type: 65,
      Index: 159
    },
    {
      Description: "System.String System.Reflection.MemberInfo::get_Name() @ 326278",
      Offset: 457,
      Type: 65,
      Index: 125
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 326885",
      Offset: 607,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 327286",
      Offset: 401,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 327290",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 327426",
      Offset: 136,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 327496",
      Offset: 70,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Reflection.PropertyInfo[] System.Type::GetProperties() @ 327932",
      Offset: 436,
      Type: 65,
      Index: 159
    },
    {
      Description: "System.Reflection.MethodInfo System.Reflection.PropertyInfo::get_SetMethod() @ 328391",
      Offset: 459,
      Type: 65,
      Index: 162
    },
    {
      Description: "System.Object System.Reflection.MethodBase::Invoke(System.Object,System.Object[]) @ 328848",
      Offset: 457,
      Type: 65,
      Index: 120
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Object,System.Object) @ 329338",
      Offset: 490,
      Type: 9,
      Index: 110
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 330108",
      Offset: 770,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestIsDefinedOnType() @ 330609",
      Offset: 501,
      Type: 9,
      Index: 163
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 331207",
      Offset: 598,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 331280",
      Offset: 73,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 331716",
      Offset: 436,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute @ 331789",
      Offset: 73,
      Type: 17,
      Index: 17
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 332249",
      Offset: 460,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 332772",
      Offset: 523,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 332845",
      Offset: 73,
      Type: 17,
      Index: 16
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 333281",
      Offset: 436,
      Type: 9,
      Index: 53
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute @ 333354",
      Offset: 73,
      Type: 17,
      Index: 17
    },
    {
      Description: "System.Boolean System.Reflection.MemberInfo::IsDefined(System.Type,System.Boolean) @ 333817",
      Offset: 463,
      Type: 65,
      Index: 124
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 334278",
      Offset: 461,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 335038",
      Offset: 760,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestActivator() @ 335539",
      Offset: 501,
      Type: 9,
      Index: 164
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 336128",
      Offset: 589,
      Type: 9,
      Index: 53
    },
    {
      Description: "System.Object @ 336198",
      Offset: 70,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Object System.Activator::CreateInstance(System.Type) @ 336602",
      Offset: 404,
      Type: 9,
      Index: 165
    },
    {
      Description: "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle) @ 337069",
      Offset: 467,
      Type: 9,
      Index: 53
    },
    {
      Description: "System.Object @ 337139",
      Offset: 70,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Type System.Object::GetType() @ 337543",
      Offset: 404,
      Type: 9,
      Index: 122
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Object,System.Object) @ 337985",
      Offset: 442,
      Type: 9,
      Index: 110
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 338744",
      Offset: 759,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.ReflectionTestSuite::get_MyProperty() @ 339239",
      Offset: 495,
      Type: 9,
      Index: 166
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 340260",
      Offset: 1021,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::set_MyProperty(System.String) @ 340749",
      Offset: 489,
      Type: 9,
      Index: 161
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 341769",
      Offset: 1020,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::.ctor() @ 342255",
      Offset: 486,
      Type: 9,
      Index: 167
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 342824",
      Offset: 569,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 343550",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute::.ctor() @ 344036",
      Offset: 486,
      Type: 9,
      Index: 168
    },
    {
      Description: "System.Void System.Attribute::.ctor() @ 344629",
      Offset: 593,
      Type: 9,
      Index: 169
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 345355",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers() @ 345844",
      Offset: 489,
      Type: 9,
      Index: 170
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 346512",
      Offset: 668,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 346969",
      Offset: 457,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 347096",
      Offset: 127,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 347627",
      Offset: 531,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NullReferenceException @ 347637",
      Offset: 10,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 348220",
      Offset: 583,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 348230",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 349055",
      Offset: 825,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 349561",
      Offset: 506,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 349927",
      Offset: 366,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 350460",
      Offset: 533,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 350852",
      Offset: 392,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 351610",
      Offset: 758,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers2() @ 352102",
      Offset: 492,
      Type: 9,
      Index: 171
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 352771",
      Offset: 669,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 353228",
      Offset: 457,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 353355",
      Offset: 127,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 353886",
      Offset: 531,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NullReferenceException @ 353896",
      Offset: 10,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 354480",
      Offset: 584,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.SystemException @ 354490",
      Offset: 10,
      Type: 17,
      Index: 60
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 355067",
      Offset: 577,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 355077",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 355902",
      Offset: 825,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 356408",
      Offset: 506,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 356776",
      Offset: 368,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 357297",
      Offset: 521,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 357665",
      Offset: 368,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 358198",
      Offset: 533,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 358590",
      Offset: 392,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 359348",
      Offset: 758,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::FirstTest() @ 359840",
      Offset: 492,
      Type: 9,
      Index: 172
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 360492",
      Offset: 652,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 360949",
      Offset: 457,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 361076",
      Offset: 127,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 361607",
      Offset: 531,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 361617",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.String System.Object::ToString() @ 362443",
      Offset: 826,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 363009",
      Offset: 566,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 363745",
      Offset: 736,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTest() @ 364243",
      Offset: 498,
      Type: 9,
      Index: 173
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTestHelper() @ 364902",
      Offset: 659,
      Type: 9,
      Index: 174
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 365311",
      Offset: 409,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 365686",
      Offset: 375,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NullReferenceException @ 365696",
      Offset: 10,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.String System.Exception::get_Message() @ 367231",
      Offset: 1535,
      Type: 9,
      Index: 175
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 368486",
      Offset: 1255,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 369048",
      Offset: 562,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 369316",
      Offset: 268,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 369860",
      Offset: 544,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 370610",
      Offset: 750,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTestHelper() @ 371108",
      Offset: 498,
      Type: 9,
      Index: 174
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 371767",
      Offset: 659,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.NullReferenceException @ 372250",
      Offset: 483,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.Void System.NullReferenceException::.ctor(System.String) @ 372364",
      Offset: 114,
      Type: 9,
      Index: 176
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 372843",
      Offset: 479,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NotSupportedException @ 372853",
      Offset: 10,
      Type: 17,
      Index: 61
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 373638",
      Offset: 785,
      Type: 9,
      Index: 106
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 374558",
      Offset: 920,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinally() @ 375047",
      Offset: 489,
      Type: 9,
      Index: 177
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 375711",
      Offset: 664,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 376026",
      Offset: 315,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 376036",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 376806",
      Offset: 770,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 377291",
      Offset: 485,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 378358",
      Offset: 1067,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 379260",
      Offset: 902,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinallyThrowException() @ 379749",
      Offset: 489,
      Type: 9,
      Index: 178
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 380430",
      Offset: 681,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 380875",
      Offset: 445,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 380992",
      Offset: 117,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 381497",
      Offset: 505,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 381507",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 382280",
      Offset: 773,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 382771",
      Offset: 491,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 383718",
      Offset: 947,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 384627",
      Offset: 909,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicNestedTryCatchFinally() @ 385122",
      Offset: 495,
      Type: 9,
      Index: 179
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 385798",
      Offset: 676,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 386297",
      Offset: 499,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 386760",
      Offset: 463,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor() @ 386843",
      Offset: 83,
      Type: 9,
      Index: 180
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 387310",
      Offset: 467,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 387320",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 388081",
      Offset: 761,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 388091",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 388868",
      Offset: 777,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 389225",
      Offset: 357,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 389730",
      Offset: 505,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 390703",
      Offset: 973,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor() @ 391090",
      Offset: 387,
      Type: 9,
      Index: 180
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 391592",
      Offset: 502,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 392563",
      Offset: 971,
      Type: 9,
      Index: 105
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 393036",
      Offset: 473,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 394086",
      Offset: 1050,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestComplexNestedTryCatchFinally() @ 394581",
      Offset: 495,
      Type: 9,
      Index: 181
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 395256",
      Offset: 675,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 395751",
      Offset: 495,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 396244",
      Offset: 493,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 396711",
      Offset: 467,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 396841",
      Offset: 130,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 397374",
      Offset: 533,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 397384",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 398142",
      Offset: 758,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 398152",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 398928",
      Offset: 776,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 399282",
      Offset: 354,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 399793",
      Offset: 511,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 400765",
      Offset: 972,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 401266",
      Offset: 501,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 401392",
      Offset: 126,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 401944",
      Offset: 552,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 402453",
      Offset: 509,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 404836",
      Offset: 2383,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows() @ 405325",
      Offset: 489,
      Type: 9,
      Index: 182
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 406283",
      Offset: 958,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows2() @ 406772",
      Offset: 489,
      Type: 9,
      Index: 183
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 407456",
      Offset: 684,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 407901",
      Offset: 445,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 408018",
      Offset: 117,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 408525",
      Offset: 507,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 408535",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 409297",
      Offset: 762,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 409307",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 410348",
      Offset: 1041,
      Type: 9,
      Index: 105
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 411007",
      Offset: 659,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Exception @ 411458",
      Offset: 451,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 411581",
      Offset: 123,
      Type: 9,
      Index: 55
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 412195",
      Offset: 614,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 413579",
      Offset: 1384,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::.ctor() @ 414068",
      Offset: 489,
      Type: 9,
      Index: 184
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 414644",
      Offset: 576,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 415370",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest() @ 415859",
      Offset: 489,
      Type: 9,
      Index: 185
    },
    {
      Description: "System.String System.Object::ToString() @ 416523",
      Offset: 664,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 416961",
      Offset: 438,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Fail(System.String) @ 417351",
      Offset: 390,
      Type: 9,
      Index: 66
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 417740",
      Offset: 389,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.NullReferenceException @ 417750",
      Offset: 10,
      Type: 17,
      Index: 56
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 418333",
      Offset: 583,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Exception @ 418343",
      Offset: 10,
      Type: 17,
      Index: 3
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 419167",
      Offset: 824,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Fail(System.String) @ 419738",
      Offset: 571,
      Type: 9,
      Index: 66
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 420105",
      Offset: 367,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 420642",
      Offset: 537,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 421379",
      Offset: 737,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::.ctor() @ 421868",
      Offset: 489,
      Type: 9,
      Index: 17
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 422444",
      Offset: 576,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 423233",
      Offset: 789,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest() @ 423725",
      Offset: 492,
      Type: 9,
      Index: 186
    },
    {
      Description: "System.Threading.Lock @ 424329",
      Offset: 604,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 424417",
      Offset: 88,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.ThreadStart @ 424897",
      Offset: 480,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 425090",
      Offset: 193,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart() @ 425103",
      Offset: 13,
      Type: 9,
      Index: 187
    },
    {
      Description: "System.Threading.Thread @ 425562",
      Offset: 459,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority) @ 425718",
      Offset: 156,
      Type: 9,
      Index: 150
    },
    {
      Description: "System.Void System.Threading.Thread::set_Name(System.String) @ 426050",
      Offset: 332,
      Type: 9,
      Index: 151
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 426143",
      Offset: 93,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 426464",
      Offset: 321,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 426874",
      Offset: 410,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 427426",
      Offset: 552,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 427817",
      Offset: 391,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 428622",
      Offset: 805,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart() @ 429117",
      Offset: 495,
      Type: 9,
      Index: 187
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 429705",
      Offset: 588,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 430206",
      Offset: 501,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 430590",
      Offset: 384,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 431066",
      Offset: 476,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 431470",
      Offset: 404,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Lock::Release() @ 432014",
      Offset: 544,
      Type: 9,
      Index: 188
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 432335",
      Offset: 321,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 433134",
      Offset: 799,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::.ctor() @ 433623",
      Offset: 489,
      Type: 9,
      Index: 20
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 434192",
      Offset: 569,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 434963",
      Offset: 771,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest() @ 435473",
      Offset: 510,
      Type: 9,
      Index: 189
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 436119",
      Offset: 646,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Browser.Dom.IDomElement System.Browser.Dom.DomManager::CreateElement(System.String) @ 436597",
      Offset: 478,
      Type: 9,
      Index: 190
    },
    {
      Description: "System.Browser.Dom.IDomElement System.Browser.Dom.DomManager::CreateElement(System.String) @ 439385",
      Offset: 2788,
      Type: 9,
      Index: 190
    },
    {
      Description: "System.Browser.Dom.IDomElement System.Browser.Dom.DomManager::CreateElement(System.String) @ 442188",
      Offset: 2803,
      Type: 9,
      Index: 190
    },
    {
      Description: "System.Browser.Dom.IDomElement System.Browser.Dom.DomManager::CreateElement(System.String) @ 444997",
      Offset: 2809,
      Type: 9,
      Index: 190
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 448274",
      Offset: 3277,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Browser.Dom.IDomElement @ 448278",
      Offset: 4,
      Type: 17,
      Index: 62
    },
    {
      Description: "System.Threading.Semaphore @ 448602",
      Offset: 324,
      Type: 17,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Semaphore::.ctor(System.Int32) @ 448735",
      Offset: 133,
      Type: 9,
      Index: 191
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1 @ 449320",
      Offset: 585,
      Type: 17,
      Index: 38
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1::.ctor() @ 449437",
      Offset: 117,
      Type: 9,
      Index: 192
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 450866",
      Offset: 1429,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 451440",
      Offset: 574,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 451934",
      Offset: 494,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 452403",
      Offset: 469,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Semaphore::Acquire(System.Int32) @ 452971",
      Offset: 568,
      Type: 9,
      Index: 193
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3 @ 453564",
      Offset: 593,
      Type: 17,
      Index: 39
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::.ctor() @ 453681",
      Offset: 117,
      Type: 9,
      Index: 194
    },
    {
      Description: "System.Threading.ThreadStart @ 457316",
      Offset: 3635,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 457513",
      Offset: 197,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0() @ 457524",
      Offset: 11,
      Type: 9,
      Index: 195
    },
    {
      Description: "System.Threading.Thread @ 458007",
      Offset: 483,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority) @ 458165",
      Offset: 158,
      Type: 9,
      Index: 150
    },
    {
      Description: "System.Void System.Threading.Thread::set_Name(System.String) @ 459508",
      Offset: 1343,
      Type: 9,
      Index: 151
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 459829",
      Offset: 321,
      Type: 9,
      Index: 134
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 460470",
      Offset: 641,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::MoveElement(System.String,System.Browser.Dom.IDomElement,System.Boolean) @ 460998",
      Offset: 528,
      Type: 9,
      Index: 196
    },
    {
      Description: "System.Void System.Threading.Semaphore::Acquire() @ 461698",
      Offset: 700,
      Type: 9,
      Index: 197
    },
    {
      Description: "System.Void System.Threading.Semaphore::Release() @ 465478",
      Offset: 3780,
      Type: 9,
      Index: 198
    },
    {
      Description: "System.String System.Object::ToString() @ 472794",
      Offset: 7316,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 473670",
      Offset: 876,
      Type: 9,
      Index: 88
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 474203",
      Offset: 533,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::.ctor(System.Int32) @ 474707",
      Offset: 504,
      Type: 9,
      Index: 24
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 475276",
      Offset: 569,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 476126",
      Offset: 850,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest() @ 476627",
      Offset: 501,
      Type: 9,
      Index: 199
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 477210",
      Offset: 583,
      Type: 9,
      Index: 63
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomElementResource @ 483367",
      Offset: 6157,
      Type: 17,
      Index: 24
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement) @ 483511",
      Offset: 144,
      Type: 9,
      Index: 200
    },
    {
      Description: "System.Void System.Resources.ResourceManager::RegisterResource(System.IDisposable) @ 483928",
      Offset: 417,
      Type: 9,
      Index: 201
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomElementResource @ 489617",
      Offset: 5689,
      Type: 17,
      Index: 24
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement) @ 489761",
      Offset: 144,
      Type: 9,
      Index: 200
    },
    {
      Description: "System.Void System.Resources.ResourceManager::RegisterResource(System.IDisposable) @ 490178",
      Offset: 417,
      Type: 9,
      Index: 201
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 490626",
      Offset: 448,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 491082",
      Offset: 456,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 491512",
      Offset: 430,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 492086",
      Offset: 574,
      Type: 65,
      Index: 202
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 492497",
      Offset: 411,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 492939",
      Offset: 442,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 493395",
      Offset: 456,
      Type: 9,
      Index: 88
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 494171",
      Offset: 776,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::.ctor() @ 494672",
      Offset: 501,
      Type: 9,
      Index: 19
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 495234",
      Offset: 562,
      Type: 9,
      Index: 76
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 495991",
      Offset: 757,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 496483",
      Offset: 492,
      Type: 9,
      Index: 202
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 500132",
      Offset: 3649,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString() @ 500630",
      Offset: 498,
      Type: 9,
      Index: 203
    },
    {
      Description: "System.String System.Object::ToString() @ 501858",
      Offset: 1228,
      Type: 65,
      Index: 43
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 502846",
      Offset: 988,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement) @ 503338",
      Offset: 492,
      Type: 9,
      Index: 200
    },
    {
      Description: "System.Void System.Object::.ctor() @ 503906",
      Offset: 568,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 504402",
      Offset: 496,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass() @ 504891",
      Offset: 489,
      Type: 9,
      Index: 204
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder @ 505522",
      Offset: 631,
      Type: 17,
      Index: 27
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::.ctor() @ 505648",
      Offset: 126,
      Type: 9,
      Index: 205
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder @ 506040",
      Offset: 392,
      Type: 17,
      Index: 64
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 506042",
      Offset: 2,
      Type: 65,
      Index: 206
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32) @ 506478",
      Offset: 436,
      Type: 9,
      Index: 108
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 507230",
      Offset: 752,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestStaticConstructorsWorked() @ 507722",
      Offset: 492,
      Type: 9,
      Index: 207
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::property @ 508325",
      Offset: 603,
      Type: 33,
      Index: 7
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object) @ 508441",
      Offset: 116,
      Type: 9,
      Index: 111
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::property @ 508975",
      Offset: 534,
      Type: 33,
      Index: 8
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object) @ 509091",
      Offset: 116,
      Type: 9,
      Index: 111
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 509968",
      Offset: 877,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::.ctor() @ 510457",
      Offset: 489,
      Type: 9,
      Index: 208
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 511030",
      Offset: 573,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 511756",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::.ctor() @ 512242",
      Offset: 486,
      Type: 9,
      Index: 209
    },
    {
      Description: "System.Void System.Object::.ctor() @ 512795",
      Offset: 553,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 513226",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 513715",
      Offset: 489,
      Type: 9,
      Index: 210
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 515750",
      Offset: 2035,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::.ctor() @ 516239",
      Offset: 489,
      Type: 9,
      Index: 205
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::.ctor() @ 516825",
      Offset: 586,
      Type: 9,
      Index: 209
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 517551",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.cctor() @ 518040",
      Offset: 489,
      Type: 9,
      Index: 211
    },
    {
      Description: "System.Object @ 518655",
      Offset: 615,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 518735",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::property @ 519052",
      Offset: 317,
      Type: 33,
      Index: 7
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::property @ 519177",
      Offset: 125,
      Type: 33,
      Index: 7
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 519299",
      Offset: 122,
      Type: 9,
      Index: 81
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 520309",
      Offset: 1010,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.ctor() @ 520798",
      Offset: 489,
      Type: 9,
      Index: 212
    },
    {
      Description: "System.Void System.Object::.ctor() @ 521365",
      Offset: 567,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 521796",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.cctor() @ 522285",
      Offset: 489,
      Type: 9,
      Index: 213
    },
    {
      Description: "System.Object @ 522900",
      Offset: 615,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 522980",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::property @ 523297",
      Offset: 317,
      Type: 33,
      Index: 8
    },
    {
      Description: "System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::property @ 523422",
      Offset: 125,
      Type: 33,
      Index: 8
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 523544",
      Offset: 122,
      Type: 9,
      Index: 81
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 524554",
      Offset: 1010,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.ctor() @ 525043",
      Offset: 489,
      Type: 9,
      Index: 214
    },
    {
      Description: "System.Void System.Object::.ctor() @ 525610",
      Offset: 567,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 526041",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 526527",
      Offset: 486,
      Type: 9,
      Index: 215
    },
    {
      Description: "System.Void System.Attribute::.ctor() @ 527084",
      Offset: 557,
      Type: 9,
      Index: 169
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 527810",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest() @ 528308",
      Offset: 498,
      Type: 9,
      Index: 216
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 528972",
      Offset: 664,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 529510",
      Offset: 538,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 529958",
      Offset: 448,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Threading.Thread @ 529962",
      Offset: 4,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Object @ 531058",
      Offset: 1096,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 531139",
      Offset: 81,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Threading.Lock @ 531560",
      Offset: 421,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 531649",
      Offset: 89,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.Condition @ 532219",
      Offset: 570,
      Type: 17,
      Index: 58
    },
    {
      Description: "System.Void System.Threading.Condition::.ctor(System.Threading.Lock) @ 532338",
      Offset: 119,
      Type: 9,
      Index: 131
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 532897",
      Offset: 559,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 533374",
      Offset: 477,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 533916",
      Offset: 542,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Condition::Await() @ 535322",
      Offset: 1406,
      Type: 9,
      Index: 217
    },
    {
      Description: "System.Void System.Threading.Lock::Release() @ 535798",
      Offset: 476,
      Type: 9,
      Index: 188
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 536130",
      Offset: 332,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Semaphore::Acquire(System.Int32) @ 536732",
      Offset: 602,
      Type: 9,
      Index: 193
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 537215",
      Offset: 483,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 537843",
      Offset: 628,
      Type: 9,
      Index: 64
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 538361",
      Offset: 518,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 538911",
      Offset: 550,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 539383",
      Offset: 472,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Threading.ThreadStart @ 539702",
      Offset: 319,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 539884",
      Offset: 182,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work() @ 539897",
      Offset: 13,
      Type: 9,
      Index: 218
    },
    {
      Description: "System.Threading.Thread @ 540353",
      Offset: 456,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority) @ 540511",
      Offset: 158,
      Type: 9,
      Index: 150
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 541353",
      Offset: 842,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadStarted() @ 541860",
      Offset: 507,
      Type: 9,
      Index: 219
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 542521",
      Offset: 661,
      Type: 9,
      Index: 220
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 544027",
      Offset: 1506,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 544550",
      Offset: 523,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void System.Threading.Condition::Signal() @ 545367",
      Offset: 817,
      Type: 9,
      Index: 221
    },
    {
      Description: "System.Void System.Threading.Lock::Release() @ 546150",
      Offset: 783,
      Type: 9,
      Index: 188
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 547117",
      Offset: 967,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 547658",
      Offset: 541,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 548137",
      Offset: 479,
      Type: 9,
      Index: 222
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 549524",
      Offset: 1387,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work() @ 550028",
      Offset: 504,
      Type: 9,
      Index: 218
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadStarted() @ 550610",
      Offset: 582,
      Type: 9,
      Index: 219
    },
    {
      Description: "System.Void System.Threading.Semaphore::Acquire() @ 551075",
      Offset: 465,
      Type: 9,
      Index: 197
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 552374",
      Offset: 1299,
      Type: 9,
      Index: 223
    },
    {
      Description: "System.Void System.Threading.Semaphore::Release() @ 552904",
      Offset: 530,
      Type: 9,
      Index: 198
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 553915",
      Offset: 1011,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 554413",
      Offset: 498,
      Type: 9,
      Index: 223
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 555082",
      Offset: 669,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void System.Threading.Lock::Release() @ 556461",
      Offset: 1379,
      Type: 9,
      Index: 188
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 557129",
      Offset: 668,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::.ctor(System.Int32) @ 557621",
      Offset: 492,
      Type: 9,
      Index: 25
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 558210",
      Offset: 589,
      Type: 9,
      Index: 76
    },
    {
      Description: "System.ArgumentException @ 559211",
      Offset: 1001,
      Type: 17,
      Index: 65
    },
    {
      Description: "System.Void System.ArgumentException::.ctor(System.String) @ 559358",
      Offset: 147,
      Type: 9,
      Index: 224
    },
    {
      Description: "System.Threading.Lock @ 559887",
      Offset: 529,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 559976",
      Offset: 89,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.Semaphore @ 560457",
      Offset: 481,
      Type: 17,
      Index: 63
    },
    {
      Description: "System.Void System.Threading.Semaphore::.ctor(System.Int32) @ 560578",
      Offset: 121,
      Type: 9,
      Index: 191
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 561532",
      Offset: 954,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::TestQuickSort() @ 562036",
      Offset: 504,
      Type: 9,
      Index: 225
    },
    {
      Description: "System.Collections.Generic.List`1<System.Int32> @ 562644",
      Offset: 608,
      Type: 17,
      Index: 66
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 562758",
      Offset: 114,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 563211",
      Offset: 453,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 563620",
      Offset: 409,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 564031",
      Offset: 411,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 564442",
      Offset: 411,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 564851",
      Offset: 409,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 565268",
      Offset: 417,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 566009",
      Offset: 741,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 567013",
      Offset: 1004,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 567482",
      Offset: 469,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 568032",
      Offset: 550,
      Type: 9,
      Index: 38
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1<System.Int32> @ 568488",
      Offset: 456,
      Type: 17,
      Index: 67
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 568680",
      Offset: 192,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 568693",
      Offset: 13,
      Type: 9,
      Index: 226
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sort<System.Int32>(System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 569072",
      Offset: 379,
      Type: 9,
      Index: 227
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 569527",
      Offset: 455,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 569996",
      Offset: 469,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 570556",
      Offset: 560,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 570984",
      Offset: 428,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Int32 @ 570988",
      Offset: 4,
      Type: 17,
      Index: 68
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}/__StaticArrayInitTypeSize=24 <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}::$$method0x6000090-1 @ 571053",
      Offset: 65,
      Type: 33,
      Index: 9
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array,System.RuntimeFieldHandle) @ 571179",
      Offset: 126,
      Type: 9,
      Index: 228
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 571981",
      Offset: 802,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Collections.Generic.List`1<System.Int32> @ 573001",
      Offset: 1020,
      Type: 17,
      Index: 66
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 573116",
      Offset: 115,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 574442",
      Offset: 1326,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 574913",
      Offset: 471,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 575463",
      Offset: 550,
      Type: 9,
      Index: 38
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1<System.Int32> @ 575919",
      Offset: 456,
      Type: 17,
      Index: 67
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 576111",
      Offset: 192,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 576124",
      Offset: 13,
      Type: 9,
      Index: 226
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sort<System.Int32>(System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 576503",
      Offset: 379,
      Type: 9,
      Index: 227
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 576960",
      Offset: 457,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 577431",
      Offset: 471,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 577991",
      Offset: 560,
      Type: 9,
      Index: 38
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 578745",
      Offset: 754,
      Type: 65,
      Index: 33
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 579845",
      Offset: 1100,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32) @ 580318",
      Offset: 473,
      Type: 9,
      Index: 108
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 580948",
      Offset: 630,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 581567",
      Offset: 619,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 581571",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 581974",
      Offset: 403,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 582445",
      Offset: 471,
      Type: 9,
      Index: 38
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 582876",
      Offset: 431,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32) @ 583347",
      Offset: 471,
      Type: 9,
      Index: 108
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 583994",
      Offset: 647,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object,System.Object) @ 584470",
      Offset: 476,
      Type: 9,
      Index: 34
    },
    {
      Description: "System.Void System.Console::WriteLine(System.String) @ 584998",
      Offset: 528,
      Type: 9,
      Index: 38
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 585864",
      Offset: 866,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 586365",
      Offset: 501,
      Type: 9,
      Index: 226
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 587338",
      Offset: 973,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 587827",
      Offset: 489,
      Type: 9,
      Index: 227
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 588471",
      Offset: 644,
      Type: 65,
      Index: 33
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 588911",
      Offset: 440,
      Type: 9,
      Index: 229
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 589725",
      Offset: 814,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 590244",
      Offset: 519,
      Type: 9,
      Index: 230
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 591913",
      Offset: 1669,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 592431",
      Offset: 518,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 592951",
      Offset: 520,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 594769",
      Offset: 1818,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 595290",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 595805",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 598510",
      Offset: 2705,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 599026",
      Offset: 516,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 599541",
      Offset: 515,
      Type: 65,
      Index: 140
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 600008",
      Offset: 467,
      Type: 65,
      Index: 140
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 600593",
      Offset: 585,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 601109",
      Offset: 516,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 601618",
      Offset: 509,
      Type: 65,
      Index: 140
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::set_Item(System.Int32,T) @ 602085",
      Offset: 467,
      Type: 65,
      Index: 140
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 603112",
      Offset: 1027,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 603633",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 604148",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 606309",
      Offset: 2161,
      Type: 65,
      Index: 40
    },
    {
      Description: "T System.Collections.Generic.List`1::get_Item(System.Int32) @ 606830",
      Offset: 521,
      Type: 65,
      Index: 40
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 607345",
      Offset: 515,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 610003",
      Offset: 2658,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 610522",
      Offset: 519,
      Type: 9,
      Index: 229
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::GetPivotPoint<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 611719",
      Offset: 1197,
      Type: 9,
      Index: 230
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 612761",
      Offset: 1042,
      Type: 9,
      Index: 229
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting<T>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 613761",
      Offset: 1000,
      Type: 9,
      Index: 229
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 614578",
      Offset: 817,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 615070",
      Offset: 492,
      Type: 9,
      Index: 231
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 615700",
      Offset: 630,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 616541",
      Offset: 841,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 617033",
      Offset: 492,
      Type: 9,
      Index: 232
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 617660",
      Offset: 627,
      Type: 65,
      Index: 103
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 618496",
      Offset: 836,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::.ctor() @ 618985",
      Offset: 489,
      Type: 9,
      Index: 233
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 619547",
      Offset: 562,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 620273",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThread() @ 620771",
      Offset: 498,
      Type: 9,
      Index: 234
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1 @ 621384",
      Offset: 613,
      Type: 17,
      Index: 41
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::.ctor() @ 621511",
      Offset: 127,
      Type: 9,
      Index: 235
    },
    {
      Description: "System.Threading.Lock @ 621993",
      Offset: 482,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 622081",
      Offset: 88,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.Condition @ 622504",
      Offset: 423,
      Type: 17,
      Index: 58
    },
    {
      Description: "System.Void System.Threading.Condition::.ctor(System.Threading.Lock) @ 622621",
      Offset: 117,
      Type: 9,
      Index: 131
    },
    {
      Description: "System.Threading.ThreadStart @ 623114",
      Offset: 493,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 623324",
      Offset: 210,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0() @ 623335",
      Offset: 11,
      Type: 9,
      Index: 236
    },
    {
      Description: "System.Threading.Thread @ 623817",
      Offset: 482,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 623938",
      Offset: 121,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 624271",
      Offset: 333,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 624322",
      Offset: 51,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 624724",
      Offset: 402,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 625224",
      Offset: 500,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 625647",
      Offset: 423,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Abort() @ 626139",
      Offset: 492,
      Type: 9,
      Index: 137
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 626541",
      Offset: 402,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Boolean System.Threading.Condition::Await(System.Int32) @ 627060",
      Offset: 519,
      Type: 9,
      Index: 136
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 627525",
      Offset: 465,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 628361",
      Offset: 836,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThreadWithState() @ 628871",
      Offset: 510,
      Type: 9,
      Index: 237
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4 @ 629493",
      Offset: 622,
      Type: 17,
      Index: 42
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::.ctor() @ 629620",
      Offset: 127,
      Type: 9,
      Index: 238
    },
    {
      Description: "System.Threading.Lock @ 630102",
      Offset: 482,
      Type: 17,
      Index: 57
    },
    {
      Description: "System.Void System.Threading.Lock::.ctor() @ 630190",
      Offset: 88,
      Type: 9,
      Index: 130
    },
    {
      Description: "System.Threading.Condition @ 630613",
      Offset: 423,
      Type: 17,
      Index: 58
    },
    {
      Description: "System.Void System.Threading.Condition::.ctor(System.Threading.Lock) @ 630730",
      Offset: 117,
      Type: 9,
      Index: 131
    },
    {
      Description: "System.Threading.ThreadStart @ 631223",
      Offset: 493,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 631442",
      Offset: 219,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3() @ 631453",
      Offset: 11,
      Type: 9,
      Index: 239
    },
    {
      Description: "System.Threading.Thread @ 631944",
      Offset: 491,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 632065",
      Offset: 121,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 632398",
      Offset: 333,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void System.Threading.Lock::Acquire() @ 632449",
      Offset: 51,
      Type: 9,
      Index: 135
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 632851",
      Offset: 402,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 633323",
      Offset: 472,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void System.Threading.Thread::Abort(System.Object) @ 633746",
      Offset: 423,
      Type: 9,
      Index: 240
    },
    {
      Description: "System.Boolean System.Threading.Condition::Await(System.Int32) @ 634244",
      Offset: 498,
      Type: 9,
      Index: 136
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 634709",
      Offset: 465,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 635545",
      Offset: 836,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiom() @ 636046",
      Offset: 501,
      Type: 9,
      Index: 241
    },
    {
      Description: "System.Object @ 636639",
      Offset: 593,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 636719",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 637037",
      Offset: 318,
      Type: 9,
      Index: 220
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 637508",
      Offset: 471,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 638005",
      Offset: 497,
      Type: 9,
      Index: 222
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 638931",
      Offset: 926,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 639832",
      Offset: 901,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown() @ 640330",
      Offset: 498,
      Type: 9,
      Index: 242
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7 @ 640980",
      Offset: 650,
      Type: 17,
      Index: 43
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::.ctor() @ 641107",
      Offset: 127,
      Type: 9,
      Index: 243
    },
    {
      Description: "System.Object @ 641515",
      Offset: 408,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 641595",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 642639",
      Offset: 1044,
      Type: 9,
      Index: 220
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 643123",
      Offset: 484,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 643632",
      Offset: 509,
      Type: 17,
      Index: 36
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor() @ 643768",
      Offset: 136,
      Type: 9,
      Index: 244
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 644335",
      Offset: 567,
      Type: 9,
      Index: 222
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 644656",
      Offset: 321,
      Type: 9,
      Index: 61
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 644666",
      Offset: 10,
      Type: 17,
      Index: 36
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 646269",
      Offset: 1603,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 646793",
      Offset: 524,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Threading.ManualResetEvent @ 647564",
      Offset: 771,
      Type: 17,
      Index: 69
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::.ctor() @ 647665",
      Offset: 101,
      Type: 9,
      Index: 245
    },
    {
      Description: "System.Threading.ThreadStart @ 648159",
      Offset: 494,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 648404",
      Offset: 245,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6() @ 648415",
      Offset: 11,
      Type: 9,
      Index: 246
    },
    {
      Description: "System.Threading.Thread @ 648931",
      Offset: 516,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 649054",
      Offset: 123,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 649388",
      Offset: 334,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Boolean System.Threading.ManualResetEvent::WaitOne(System.Int32) @ 649510",
      Offset: 122,
      Type: 9,
      Index: 247
    },
    {
      Description: "System.Void System.Threading.Thread::Abort() @ 650493",
      Offset: 983,
      Type: 9,
      Index: 137
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 650962",
      Offset: 469,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 651836",
      Offset: 874,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiomUnlocksWhenExceptionsAreThrown() @ 652337",
      Offset: 501,
      Type: 9,
      Index: 248
    },
    {
      Description: "System.Object @ 652963",
      Offset: 626,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.Void System.Object::.ctor() @ 653043",
      Offset: 80,
      Type: 9,
      Index: 77
    },
    {
      Description: "System.Void System.Threading.Monitor::Enter(System.Object) @ 653433",
      Offset: 390,
      Type: 9,
      Index: 220
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 653910",
      Offset: 477,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 654413",
      Offset: 503,
      Type: 17,
      Index: 36
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor() @ 654549",
      Offset: 136,
      Type: 9,
      Index: 244
    },
    {
      Description: "System.Void System.Threading.Monitor::Exit(System.Object) @ 655107",
      Offset: 558,
      Type: 9,
      Index: 222
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 655423",
      Offset: 316,
      Type: 9,
      Index: 61
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 655433",
      Offset: 10,
      Type: 17,
      Index: 36
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 657027",
      Offset: 1594,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 657544",
      Offset: 517,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Threading.ManualResetEvent @ 658292",
      Offset: 748,
      Type: 17,
      Index: 69
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::.ctor() @ 658393",
      Offset: 101,
      Type: 9,
      Index: 245
    },
    {
      Description: "System.Threading.ThreadStart @ 658885",
      Offset: 492,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 659106",
      Offset: 221,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9() @ 659119",
      Offset: 13,
      Type: 9,
      Index: 249
    },
    {
      Description: "System.Threading.Thread @ 659608",
      Offset: 489,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 659731",
      Offset: 123,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::set_Name(System.String) @ 660062",
      Offset: 331,
      Type: 9,
      Index: 151
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 660148",
      Offset: 86,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 660588",
      Offset: 440,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Boolean System.Threading.ManualResetEvent::WaitOne(System.Int32) @ 660714",
      Offset: 126,
      Type: 9,
      Index: 247
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 661686",
      Offset: 972,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Abort() @ 662154",
      Offset: 468,
      Type: 9,
      Index: 137
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 662545",
      Offset: 391,
      Type: 9,
      Index: 106
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 663402",
      Offset: 857,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestManualResetEvent() @ 663903",
      Offset: 501,
      Type: 9,
      Index: 250
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb @ 664529",
      Offset: 626,
      Type: 17,
      Index: 44
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::.ctor() @ 664656",
      Offset: 127,
      Type: 9,
      Index: 251
    },
    {
      Description: "System.Threading.ManualResetEvent @ 665133",
      Offset: 477,
      Type: 17,
      Index: 69
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::.ctor() @ 665233",
      Offset: 100,
      Type: 9,
      Index: 245
    },
    {
      Description: "System.Threading.ManualResetEvent @ 665708",
      Offset: 475,
      Type: 17,
      Index: 69
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::.ctor() @ 665808",
      Offset: 100,
      Type: 9,
      Index: 245
    },
    {
      Description: "System.Threading.ThreadStart @ 666353",
      Offset: 545,
      Type: 17,
      Index: 45
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 666568",
      Offset: 215,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a() @ 666579",
      Offset: 11,
      Type: 9,
      Index: 252
    },
    {
      Description: "System.Threading.Thread @ 667063",
      Offset: 484,
      Type: 17,
      Index: 59
    },
    {
      Description: "System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart) @ 667184",
      Offset: 121,
      Type: 9,
      Index: 133
    },
    {
      Description: "System.Void System.Threading.Thread::Start() @ 667514",
      Offset: 330,
      Type: 9,
      Index: 134
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 667565",
      Offset: 51,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 668061",
      Offset: 496,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 668477",
      Offset: 416,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::Set() @ 669040",
      Offset: 563,
      Type: 9,
      Index: 253
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 669365",
      Offset: 325,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::WaitOne() @ 670008",
      Offset: 643,
      Type: 9,
      Index: 254
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 670407",
      Offset: 399,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 670915",
      Offset: 508,
      Type: 9,
      Index: 105
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 671797",
      Offset: 882,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9() @ 672295",
      Offset: 498,
      Type: 9,
      Index: 249
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 672910",
      Offset: 615,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Boolean System.Threading.Monitor::TryEnter(System.Object) @ 673461",
      Offset: 551,
      Type: 9,
      Index: 255
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 674431",
      Offset: 970,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::Set() @ 674937",
      Offset: 506,
      Type: 9,
      Index: 253
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 675117",
      Offset: 180,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 675934",
      Offset: 817,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::.ctor() @ 676423",
      Offset: 489,
      Type: 9,
      Index: 256
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 676991",
      Offset: 568,
      Type: 9,
      Index: 127
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 677717",
      Offset: 726,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor() @ 678203",
      Offset: 486,
      Type: 9,
      Index: 244
    },
    {
      Description: "System.Void System.Exception::.ctor(System.String) @ 678769",
      Offset: 566,
      Type: 9,
      Index: 55
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 679259",
      Offset: 490,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0() @ 679754",
      Offset: 495,
      Type: 9,
      Index: 132
    },
    {
      Description: "System.Collections.Generic.List`1<System.Int32> @ 680447",
      Offset: 693,
      Type: 17,
      Index: 66
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::.ctor() @ 680864",
      Offset: 417,
      Type: 9,
      Index: 15
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 681260",
      Offset: 396,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 681657",
      Offset: 397,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 682056",
      Offset: 399,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 682455",
      Offset: 399,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 682852",
      Offset: 397,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Void System.Collections.Generic.List`1::Add(T) @ 683257",
      Offset: 405,
      Type: 65,
      Index: 27
    },
    {
      Description: "System.Int32 System.Collections.Generic.List`1::get_Count() @ 683665",
      Offset: 408,
      Type: 65,
      Index: 33
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1<System.Int32> @ 684148",
      Offset: 483,
      Type: 17,
      Index: 67
    },
    {
      Description: "System.Void System.Delegate::InternalCreate(System.Delegate,System.Object,System.NativeFunction) @ 684349",
      Offset: 201,
      Type: 9,
      Index: 6
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts(System.Int32,System.Int32) @ 684362",
      Offset: 13,
      Type: 9,
      Index: 138
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint<System.Int32>(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 684750",
      Offset: 388,
      Type: 9,
      Index: 139
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 685406",
      Offset: 656,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Condition::Signal() @ 685905",
      Offset: 499,
      Type: 9,
      Index: 221
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 686208",
      Offset: 303,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Threading.ThreadAbortException @ 686218",
      Offset: 10,
      Type: 17,
      Index: 70
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 687083",
      Offset: 865,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 687871",
      Offset: 788,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::.ctor() @ 688366",
      Offset: 495,
      Type: 9,
      Index: 129
    },
    {
      Description: "System.Void System.Object::.ctor() @ 688926",
      Offset: 560,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 689357",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1::.ctor() @ 689843",
      Offset: 486,
      Type: 9,
      Index: 192
    },
    {
      Description: "System.Void System.Object::.ctor() @ 690389",
      Offset: 546,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 690820",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0() @ 691318",
      Offset: 498,
      Type: 9,
      Index: 195
    },
    {
      Description: "System.Array System.Runtime.CompilerServices.RuntimeHelpers::CreateArray(System.Runtime.VTable,System.Int32) @ 691982",
      Offset: 664,
      Type: 9,
      Index: 16
    },
    {
      Description: "System.Object @ 691986",
      Offset: 4,
      Type: 17,
      Index: 1
    },
    {
      Description: "System.String System.String::Concat(System.Object[]) @ 692515",
      Offset: 529,
      Type: 9,
      Index: 37
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 692978",
      Offset: 463,
      Type: 9,
      Index: 63
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 693565",
      Offset: 587,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::MoveElement(System.String,System.Browser.Dom.IDomElement,System.Boolean) @ 694212",
      Offset: 647,
      Type: 9,
      Index: 196
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 694991",
      Offset: 779,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::.ctor() @ 695489",
      Offset: 498,
      Type: 9,
      Index: 194
    },
    {
      Description: "System.Void System.Object::.ctor() @ 696035",
      Offset: 546,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 696466",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0() @ 696955",
      Offset: 489,
      Type: 9,
      Index: 236
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 697956",
      Offset: 1001,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 698413",
      Offset: 457,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 698876",
      Offset: 463,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 699242",
      Offset: 366,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Threading.ThreadAbortException @ 699252",
      Offset: 10,
      Type: 17,
      Index: 70
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 700105",
      Offset: 853,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Condition::Signal() @ 700590",
      Offset: 485,
      Type: 9,
      Index: 221
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 701321",
      Offset: 731,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::.ctor() @ 701810",
      Offset: 489,
      Type: 9,
      Index: 235
    },
    {
      Description: "System.Void System.Object::.ctor() @ 702367",
      Offset: 557,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 702798",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3() @ 703293",
      Offset: 495,
      Type: 9,
      Index: 239
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 704315",
      Offset: 1022,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Thread::Sleep(System.Int32) @ 704784",
      Offset: 469,
      Type: 9,
      Index: 88
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 705260",
      Offset: 476,
      Type: 9,
      Index: 106
    },
    {
      Description: "System.Object System.Runtime.CompilerServices.RuntimeHelpers::Cast(System.Runtime.XaeiOSObject,System.Runtime.VTable,System.Boolean) @ 705632",
      Offset: 372,
      Type: 9,
      Index: 61
    },
    {
      Description: "System.Threading.ThreadAbortException @ 705642",
      Offset: 10,
      Type: 17,
      Index: 70
    },
    {
      Description: "System.Object System.Threading.ThreadAbortException::get_ExceptionState() @ 706493",
      Offset: 851,
      Type: 9,
      Index: 257
    },
    {
      Description: "System.Object System.Threading.ThreadAbortException::get_ExceptionState() @ 707652",
      Offset: 1159,
      Type: 9,
      Index: 257
    },
    {
      Description: "System.String System.Object::ToString() @ 708119",
      Offset: 467,
      Type: 65,
      Index: 43
    },
    {
      Description: "System.Object System.Threading.ThreadAbortException::get_ExceptionState() @ 709462",
      Offset: 1343,
      Type: 9,
      Index: 257
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 709928",
      Offset: 466,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 710473",
      Offset: 545,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Object System.Threading.ThreadAbortException::get_ExceptionState() @ 710798",
      Offset: 325,
      Type: 9,
      Index: 257
    },
    {
      Description: "System.String System.String::Concat(System.Object,System.Object) @ 711264",
      Offset: 466,
      Type: 9,
      Index: 81
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 711793",
      Offset: 529,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.Condition::Signal() @ 712253",
      Offset: 460,
      Type: 9,
      Index: 221
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 712997",
      Offset: 744,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::.ctor() @ 713492",
      Offset: 495,
      Type: 9,
      Index: 238
    },
    {
      Description: "System.Void System.Object::.ctor() @ 714049",
      Offset: 557,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 714480",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6() @ 714969",
      Offset: 489,
      Type: 9,
      Index: 246
    },
    {
      Description: "System.Boolean System.Threading.Monitor::TryEnter(System.Object) @ 715669",
      Offset: 700,
      Type: 9,
      Index: 255
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::Set() @ 716264",
      Offset: 595,
      Type: 9,
      Index: 253
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 716927",
      Offset: 663,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::.ctor() @ 717416",
      Offset: 489,
      Type: 9,
      Index: 243
    },
    {
      Description: "System.Void System.Object::.ctor() @ 717973",
      Offset: 557,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 718404",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a() @ 718893",
      Offset: 489,
      Type: 9,
      Index: 252
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 719563",
      Offset: 670,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::WaitOne() @ 720080",
      Offset: 517,
      Type: 9,
      Index: 254
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 720523",
      Offset: 443,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 721075",
      Offset: 552,
      Type: 9,
      Index: 126
    },
    {
      Description: "System.Void System.Threading.ManualResetEvent::Set() @ 721595",
      Offset: 520,
      Type: 9,
      Index: 253
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 721972",
      Offset: 377,
      Type: 9,
      Index: 126
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 722769",
      Offset: 797,
      Type: 9,
      Index: 5
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::.ctor() @ 723258",
      Offset: 489,
      Type: 9,
      Index: 251
    },
    {
      Description: "System.Void System.Object::.ctor() @ 723815",
      Offset: 557,
      Type: 9,
      Index: 77
    },
    {
      Description: "XaeiOS.Kernel.XaeiOSException XaeiOS.Kernel.Scheduler::ConvertToManagedException(System.var) @ 724246",
      Offset: 431,
      Type: 9,
      Index: 5
    },
    {
      Description: "XaeiOS.TestSuite.TestRunner @ 5",
      Offset: 5,
      Type: 18,
      Index: 0
    },
    {
      Description: "System.String System.Object::ToString() @ 59",
      Offset: 54,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 117",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 177",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 247",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 961",
      Offset: 714,
      Type: 18,
      Index: 2
    },
    {
      Description: "System.String System.Exception::ToString() @ 1020",
      Offset: 59,
      Type: 10,
      Index: 259
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 1081",
      Offset: 61,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 1141",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 1211",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.Exception System.Exception::GetBaseException() @ 1267",
      Offset: 56,
      Type: 10,
      Index: 260
    },
    {
      Description: "System.String System.Exception::get_HelpLink() @ 1339",
      Offset: 72,
      Type: 10,
      Index: 261
    },
    {
      Description: "System.Void System.Exception::set_HelpLink(System.String) @ 1404",
      Offset: 65,
      Type: 10,
      Index: 262
    },
    {
      Description: "System.String System.Exception::get_Source() @ 1480",
      Offset: 76,
      Type: 10,
      Index: 263
    },
    {
      Description: "System.Void System.Exception::set_Source(System.String) @ 1543",
      Offset: 63,
      Type: 10,
      Index: 264
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 1617",
      Offset: 74,
      Type: 10,
      Index: 44
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 1683",
      Offset: 66,
      Type: 18,
      Index: 49
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 2004",
      Offset: 321,
      Type: 18,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 2064",
      Offset: 60,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 2127",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 2140",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 2216",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 2229",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 2310",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 2323",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 2412",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 2425",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 2515",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 2573",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 2633",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 2703",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 2759",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 2829",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 2902",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 2980",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "XaeiOS.TestSuite.Tests.XmlHttpRequestTest @ 3114",
      Offset: 134,
      Type: 18,
      Index: 5
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 3190",
      Offset: 76,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 3253",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 3266",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 3342",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 3355",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 3436",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 3449",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 3538",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 3551",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 3641",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 3699",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 3759",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 3829",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 3885",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 3955",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 4028",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 4106",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest() @ 4170",
      Offset: 64,
      Type: 10,
      Index: 78
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest @ 4256",
      Offset: 86,
      Type: 18,
      Index: 6
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 4340",
      Offset: 84,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 4403",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 4416",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 4492",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 4505",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 4586",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 4599",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 4688",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 4701",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 4791",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 4849",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 4909",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 4979",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 5035",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 5105",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 5178",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 5256",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest() @ 5320",
      Offset: 64,
      Type: 10,
      Index: 82
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest @ 5414",
      Offset: 94,
      Type: 18,
      Index: 7
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 5501",
      Offset: 87,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 5564",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 5577",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 5653",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 5666",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 5747",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 5760",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 5849",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 5862",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 5952",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 6010",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 6070",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 6140",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 6196",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 6266",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 6339",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 6417",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest() @ 6481",
      Offset: 64,
      Type: 10,
      Index: 86
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadSleepTest @ 6578",
      Offset: 97,
      Type: 18,
      Index: 8
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 6651",
      Offset: 73,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 6714",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 6727",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 6803",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 6816",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 6897",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 6910",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 6999",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 7012",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 7102",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 7160",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 7220",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 7290",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 7346",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 7416",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 7489",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 7567",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest() @ 7631",
      Offset: 64,
      Type: 10,
      Index: 87
    },
    {
      Description: "XaeiOS.TestSuite.Tests.AlertHelloWorldTest @ 7714",
      Offset: 83,
      Type: 18,
      Index: 9
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 7791",
      Offset: 77,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 7854",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 7867",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 7943",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 7956",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 8037",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 8050",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 8139",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 8152",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 8242",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 8300",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 8360",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 8430",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 8486",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 8556",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 8629",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 8707",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest() @ 8771",
      Offset: 64,
      Type: 10,
      Index: 89
    },
    {
      Description: "XaeiOS.TestSuite.Assert @ 8858",
      Offset: 87,
      Type: 18,
      Index: 10
    },
    {
      Description: "System.String System.Object::ToString() @ 8908",
      Offset: 50,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 8966",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 9026",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 9096",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.EventTest @ 9151",
      Offset: 55,
      Type: 18,
      Index: 11
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 9218",
      Offset: 67,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 9281",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 9294",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 9370",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 9383",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 9464",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 9477",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 9566",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 9579",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 9669",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 9727",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 9787",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 9857",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 9913",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 9983",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 10056",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 10134",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest() @ 10198",
      Offset: 64,
      Type: 10,
      Index: 99
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 10275",
      Offset: 77,
      Type: 18,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 10336",
      Offset: 61,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 10399",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 10412",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 10489",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 10502",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 10584",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 10597",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 10687",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 10700",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 10791",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 10849",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 10909",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 10979",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 11035",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 11106",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 11180",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 11259",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 11324",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 11390",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite @ 11458",
      Offset: 68,
      Type: 18,
      Index: 13
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 11537",
      Offset: 79,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 11600",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 11613",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 11690",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 11703",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 11785",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 11798",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 11888",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 11901",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 11992",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 12050",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 12110",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 12180",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 12236",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 12307",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 12381",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 12460",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 12525",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 12591",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerFlowControlTest @ 12738",
      Offset: 147,
      Type: 18,
      Index: 14
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 12819",
      Offset: 81,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 12882",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 12895",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 12971",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 12984",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 13065",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 13078",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 13167",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 13180",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 13270",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 13328",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 13388",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 13458",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 13514",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 13584",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 13657",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 13735",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest() @ 13799",
      Offset: 64,
      Type: 10,
      Index: 145
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingTest @ 13890",
      Offset: 91,
      Type: 18,
      Index: 15
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 13966",
      Offset: 76,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 14029",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 14042",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 14118",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 14131",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 14212",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 14225",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 14314",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 14327",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 14417",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 14475",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 14535",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 14605",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 14661",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 14731",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 14804",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 14882",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest() @ 14946",
      Offset: 64,
      Type: 10,
      Index: 148
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 15032",
      Offset: 86,
      Type: 18,
      Index: 16
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 15109",
      Offset: 77,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 15172",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 15185",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 15262",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 15275",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 15357",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 15370",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 15460",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 15473",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 15564",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 15622",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 15682",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 15752",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 15808",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 15879",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 15953",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 16032",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 16097",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 16163",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute @ 16231",
      Offset: 68,
      Type: 18,
      Index: 17
    },
    {
      Description: "System.String System.Object::ToString() @ 16324",
      Offset: 93,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 16382",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 16442",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 16512",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite @ 16567",
      Offset: 55,
      Type: 18,
      Index: 19
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 16651",
      Offset: 84,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 16714",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 16727",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 16804",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 16817",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 16899",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 16912",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 17002",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 17015",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 17106",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 17164",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 17224",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 17294",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 17350",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 17421",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 17495",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 17574",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 17639",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 17705",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.NullReferenceExceptionTest @ 17773",
      Offset: 68,
      Type: 18,
      Index: 20
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 17857",
      Offset: 84,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 17920",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 17933",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 18009",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 18022",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 18103",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 18116",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 18205",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 18218",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 18308",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 18366",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 18426",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 18496",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 18552",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 18622",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 18695",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 18773",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest() @ 18837",
      Offset: 64,
      Type: 10,
      Index: 185
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SynchronizationTest @ 18931",
      Offset: 94,
      Type: 18,
      Index: 21
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 19008",
      Offset: 77,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 19071",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 19084",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 19160",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 19173",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 19254",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 19267",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 19356",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 19369",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 19459",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 19517",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 19577",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 19647",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 19703",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 19773",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 19846",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 19924",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest() @ 19988",
      Offset: 64,
      Type: 10,
      Index: 186
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest @ 20075",
      Offset: 87,
      Type: 18,
      Index: 22
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 20140",
      Offset: 65,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 20203",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 20216",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 20292",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 20305",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 20386",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 20399",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 20488",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 20501",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 20591",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 20649",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 20709",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 20779",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 20835",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 20905",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 20978",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 21056",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest() @ 21120",
      Offset: 64,
      Type: 10,
      Index: 189
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ResourceTest @ 21195",
      Offset: 75,
      Type: 18,
      Index: 23
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 21265",
      Offset: 70,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 21328",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 21341",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 21417",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 21430",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 21511",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 21524",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 21613",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 21626",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 21716",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 21774",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 21834",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 21904",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 21960",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 22030",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 22103",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 22181",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest() @ 22245",
      Offset: 64,
      Type: 10,
      Index: 199
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomElementResource @ 22325",
      Offset: 80,
      Type: 18,
      Index: 24
    },
    {
      Description: "System.IDisposable @ 22401",
      Offset: 76,
      Type: 18,
      Index: 71
    },
    {
      Description: "System.Void System.IDisposable::Dispose() @ 22460",
      Offset: 59,
      Type: 66,
      Index: 265
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 22473",
      Offset: 13,
      Type: 10,
      Index: 202
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString() @ 22585",
      Offset: 112,
      Type: 10,
      Index: 203
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 22671",
      Offset: 86,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 22731",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 22801",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 22857",
      Offset: 56,
      Type: 10,
      Index: 202
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite @ 22939",
      Offset: 82,
      Type: 18,
      Index: 25
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 23020",
      Offset: 81,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 23083",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 23096",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 23173",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 23186",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 23268",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 23281",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 23371",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 23384",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 23475",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 23533",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 23593",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 23663",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 23719",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 23790",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 23864",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 23943",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 24008",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 24074",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder @ 24142",
      Offset: 68,
      Type: 18,
      Index: 64
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase @ 24328",
      Offset: 186,
      Type: 18,
      Index: 26
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder @ 24419",
      Offset: 91,
      Type: 18,
      Index: 64
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 24513",
      Offset: 94,
      Type: 66,
      Index: 206
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::AddTen(System.Int32) @ 24526",
      Offset: 13,
      Type: 10,
      Index: 266
    },
    {
      Description: "System.String System.Object::ToString() @ 24664",
      Offset: 138,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 24722",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 24782",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 24852",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder @ 25017",
      Offset: 165,
      Type: 18,
      Index: 27
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder @ 25111",
      Offset: 94,
      Type: 18,
      Index: 64
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 25205",
      Offset: 94,
      Type: 66,
      Index: 206
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 25218",
      Offset: 13,
      Type: 10,
      Index: 210
    },
    {
      Description: "System.String System.Object::ToString() @ 25359",
      Offset: 141,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 25417",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 25477",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 25547",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 25603",
      Offset: 56,
      Type: 10,
      Index: 210
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1 @ 25715",
      Offset: 112,
      Type: 18,
      Index: 28
    },
    {
      Description: "System.String System.Object::ToString() @ 25812",
      Offset: 97,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 25870",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 25930",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 26000",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2 @ 26162",
      Offset: 162,
      Type: 18,
      Index: 29
    },
    {
      Description: "System.String System.Object::ToString() @ 26259",
      Offset: 97,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 26317",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 26377",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 26447",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.TestAttribute @ 26609",
      Offset: 162,
      Type: 18,
      Index: 30
    },
    {
      Description: "System.String System.Object::ToString() @ 26666",
      Offset: 57,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 26724",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 26784",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 26854",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingStressTest @ 26909",
      Offset: 55,
      Type: 18,
      Index: 31
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 26991",
      Offset: 82,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 27054",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 27067",
      Offset: 13,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 27143",
      Offset: 76,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 27156",
      Offset: 13,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 27237",
      Offset: 81,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 27250",
      Offset: 13,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 27339",
      Offset: 89,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 27352",
      Offset: 13,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.String System.Object::ToString() @ 27442",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 27500",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 27560",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 27630",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 27686",
      Offset: 56,
      Type: 10,
      Index: 56
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 27756",
      Offset: 70,
      Type: 10,
      Index: 57
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 27829",
      Offset: 73,
      Type: 10,
      Index: 58
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 27907",
      Offset: 78,
      Type: 10,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest() @ 27971",
      Offset: 64,
      Type: 10,
      Index: 216
    },
    {
      Description: "XaeiOS.TestSuite.QuickSortTestSuite @ 28063",
      Offset: 92,
      Type: 18,
      Index: 32
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 28133",
      Offset: 70,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 28196",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 28209",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 28286",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 28299",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 28381",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 28394",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 28484",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 28497",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 28588",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 28646",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 28706",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 28776",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 28832",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 28903",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 28977",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 29056",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 29121",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 29187",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1 @ 29255",
      Offset: 68,
      Type: 18,
      Index: 33
    },
    {
      Description: "System.String System.Object::ToString() @ 29311",
      Offset: 56,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 29369",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 29429",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 29499",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.Object System.MulticastDelegate::Invoke(System.Object[]) @ 29555",
      Offset: 56,
      Type: 10,
      Index: 267
    },
    {
      Description: "System.Object System.MulticastDelegate::InvokeNative(System.Object[]) @ 29637",
      Offset: 82,
      Type: 10,
      Index: 268
    },
    {
      Description: "System.Void System.MulticastDelegate::InternalCombine(System.Delegate) @ 29725",
      Offset: 88,
      Type: 10,
      Index: 269
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 29814",
      Offset: 89,
      Type: 10,
      Index: 103
    },
    {
      Description: "System.IAsyncResult XaeiOS.TestSuite.Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) @ 29888",
      Offset: 74,
      Type: 10,
      Index: 270
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Comparison`1::EndInvoke(System.IAsyncResult) @ 30009",
      Offset: 121,
      Type: 10,
      Index: 271
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite @ 30101",
      Offset: 92,
      Type: 18,
      Index: 35
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 30177",
      Offset: 76,
      Type: 18,
      Index: 49
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 30240",
      Offset: 63,
      Type: 66,
      Index: 41
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 30253",
      Offset: 13,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 30330",
      Offset: 77,
      Type: 66,
      Index: 47
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 30343",
      Offset: 13,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 30425",
      Offset: 82,
      Type: 66,
      Index: 42
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 30438",
      Offset: 13,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 30528",
      Offset: 90,
      Type: 66,
      Index: 46
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 30541",
      Offset: 13,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.String System.Object::ToString() @ 30632",
      Offset: 91,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 30690",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 30750",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 30820",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 30876",
      Offset: 56,
      Type: 10,
      Index: 112
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 30947",
      Offset: 71,
      Type: 10,
      Index: 114
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 31021",
      Offset: 74,
      Type: 10,
      Index: 116
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 31100",
      Offset: 79,
      Type: 10,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 31165",
      Offset: 65,
      Type: 10,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 31231",
      Offset: 66,
      Type: 10,
      Index: 121
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 31299",
      Offset: 68,
      Type: 18,
      Index: 36
    },
    {
      Description: "System.String System.Exception::ToString() @ 31395",
      Offset: 96,
      Type: 10,
      Index: 259
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 31456",
      Offset: 61,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 31516",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 31586",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "System.Exception System.Exception::GetBaseException() @ 31642",
      Offset: 56,
      Type: 10,
      Index: 260
    },
    {
      Description: "System.String System.Exception::get_HelpLink() @ 31714",
      Offset: 72,
      Type: 10,
      Index: 261
    },
    {
      Description: "System.Void System.Exception::set_HelpLink(System.String) @ 31779",
      Offset: 65,
      Type: 10,
      Index: 262
    },
    {
      Description: "System.String System.Exception::get_Source() @ 31855",
      Offset: 76,
      Type: 10,
      Index: 263
    },
    {
      Description: "System.Void System.Exception::set_Source(System.String) @ 31918",
      Offset: 63,
      Type: 10,
      Index: 264
    },
    {
      Description: "System.String System.Exception::get_StackTrace() @ 31992",
      Offset: 74,
      Type: 10,
      Index: 44
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1 @ 32058",
      Offset: 66,
      Type: 18,
      Index: 37
    },
    {
      Description: "System.String System.Object::ToString() @ 32148",
      Offset: 90,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 32206",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 32266",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 32336",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1 @ 32391",
      Offset: 55,
      Type: 18,
      Index: 38
    },
    {
      Description: "System.String System.Object::ToString() @ 32467",
      Offset: 76,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 32525",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 32585",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 32655",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3 @ 32710",
      Offset: 55,
      Type: 18,
      Index: 39
    },
    {
      Description: "System.String System.Object::ToString() @ 32786",
      Offset: 76,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 32844",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 32904",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 32974",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7} @ 33029",
      Offset: 55,
      Type: 18,
      Index: 40
    },
    {
      Description: "System.String System.Object::ToString() @ 33124",
      Offset: 95,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 33182",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 33242",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 33312",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}/__StaticArrayInitTypeSize=24 @ 33620",
      Offset: 308,
      Type: 18,
      Index: 72
    },
    {
      Description: "System.String System.Object::ToString() @ 33744",
      Offset: 124,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 33802",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 33862",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 33932",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1 @ 33987",
      Offset: 55,
      Type: 18,
      Index: 41
    },
    {
      Description: "System.String System.Object::ToString() @ 34074",
      Offset: 87,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 34132",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 34192",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 34262",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4 @ 34317",
      Offset: 55,
      Type: 18,
      Index: 42
    },
    {
      Description: "System.String System.Object::ToString() @ 34404",
      Offset: 87,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 34462",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 34522",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 34592",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7 @ 34647",
      Offset: 55,
      Type: 18,
      Index: 43
    },
    {
      Description: "System.String System.Object::ToString() @ 34734",
      Offset: 87,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 34792",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 34852",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 34922",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb @ 34977",
      Offset: 55,
      Type: 18,
      Index: 44
    },
    {
      Description: "System.String System.Object::ToString() @ 35064",
      Offset: 87,
      Type: 10,
      Index: 43
    },
    {
      Description: "System.Int32 System.Object::GetHashCode() @ 35122",
      Offset: 58,
      Type: 10,
      Index: 85
    },
    {
      Description: "System.Boolean System.Object::Equals(System.Object) @ 35182",
      Offset: 60,
      Type: 10,
      Index: 91
    },
    {
      Description: "System.Void System.Object::Finalize() @ 35252",
      Offset: 70,
      Type: 10,
      Index: 258
    },
    {
      Description: "XaeiOS.TestSuite.TestRunner @ 2",
      Offset: 2,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Object @ 10",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 68",
      Offset: 58,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Exception @ 76",
      Offset: 8,
      Type: 20,
      Index: 3
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 142",
      Offset: 66,
      Type: 20,
      Index: 4
    },
    {
      Description: "System.Object @ 150",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.XmlHttpRequestTest @ 206",
      Offset: 56,
      Type: 20,
      Index: 5
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 214",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest @ 298",
      Offset: 84,
      Type: 20,
      Index: 6
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 306",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest @ 398",
      Offset: 92,
      Type: 20,
      Index: 7
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 406",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadSleepTest @ 501",
      Offset: 95,
      Type: 20,
      Index: 8
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 509",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.AlertHelloWorldTest @ 590",
      Offset: 81,
      Type: 20,
      Index: 9
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 598",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Assert @ 683",
      Offset: 85,
      Type: 20,
      Index: 10
    },
    {
      Description: "System.Object @ 691",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.EventTest @ 745",
      Offset: 54,
      Type: 20,
      Index: 11
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 753",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 828",
      Offset: 75,
      Type: 20,
      Index: 12
    },
    {
      Description: "System.Object @ 836",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite @ 893",
      Offset: 57,
      Type: 20,
      Index: 13
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 901",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerFlowControlTest @ 989",
      Offset: 88,
      Type: 20,
      Index: 14
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 997",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingTest @ 1086",
      Offset: 89,
      Type: 20,
      Index: 15
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 1094",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 1178",
      Offset: 84,
      Type: 20,
      Index: 16
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 1186",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute @ 1272",
      Offset: 86,
      Type: 20,
      Index: 17
    },
    {
      Description: "System.Attribute @ 1280",
      Offset: 8,
      Type: 20,
      Index: 18
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite @ 1380",
      Offset: 100,
      Type: 20,
      Index: 19
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 1388",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Tests.NullReferenceExceptionTest @ 1481",
      Offset: 93,
      Type: 20,
      Index: 20
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 1489",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SynchronizationTest @ 1581",
      Offset: 92,
      Type: 20,
      Index: 21
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 1589",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest @ 1674",
      Offset: 85,
      Type: 20,
      Index: 22
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 1682",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ResourceTest @ 1755",
      Offset: 73,
      Type: 20,
      Index: 23
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 1763",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomElementResource @ 1841",
      Offset: 78,
      Type: 20,
      Index: 24
    },
    {
      Description: "System.Object @ 1849",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite @ 1921",
      Offset: 72,
      Type: 20,
      Index: 25
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 1929",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase @ 2019",
      Offset: 90,
      Type: 20,
      Index: 26
    },
    {
      Description: "System.Object @ 2027",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder @ 2114",
      Offset: 87,
      Type: 20,
      Index: 27
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase @ 2122",
      Offset: 8,
      Type: 20,
      Index: 26
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1 @ 2255",
      Offset: 133,
      Type: 20,
      Index: 28
    },
    {
      Description: "System.Object @ 2263",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2 @ 2364",
      Offset: 101,
      Type: 20,
      Index: 29
    },
    {
      Description: "System.Object @ 2372",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.TestAttribute @ 2473",
      Offset: 101,
      Type: 20,
      Index: 30
    },
    {
      Description: "System.Attribute @ 2481",
      Offset: 8,
      Type: 20,
      Index: 18
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingStressTest @ 2545",
      Offset: 64,
      Type: 20,
      Index: 31
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 2553",
      Offset: 8,
      Type: 20,
      Index: 4
    },
    {
      Description: "XaeiOS.TestSuite.QuickSortTestSuite @ 2643",
      Offset: 90,
      Type: 20,
      Index: 32
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 2651",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1 @ 2730",
      Offset: 79,
      Type: 20,
      Index: 33
    },
    {
      Description: "System.MulticastDelegate @ 2738",
      Offset: 8,
      Type: 20,
      Index: 34
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite @ 2809",
      Offset: 71,
      Type: 20,
      Index: 35
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 2817",
      Offset: 8,
      Type: 20,
      Index: 12
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 2902",
      Offset: 85,
      Type: 20,
      Index: 36
    },
    {
      Description: "System.Exception @ 2910",
      Offset: 8,
      Type: 20,
      Index: 3
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1 @ 3013",
      Offset: 103,
      Type: 20,
      Index: 37
    },
    {
      Description: "System.Object @ 3021",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1 @ 3115",
      Offset: 94,
      Type: 20,
      Index: 38
    },
    {
      Description: "System.Object @ 3123",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3 @ 3203",
      Offset: 80,
      Type: 20,
      Index: 39
    },
    {
      Description: "System.Object @ 3211",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7} @ 3291",
      Offset: 80,
      Type: 20,
      Index: 40
    },
    {
      Description: "System.Object @ 3299",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1 @ 3398",
      Offset: 99,
      Type: 20,
      Index: 41
    },
    {
      Description: "System.Object @ 3406",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4 @ 3497",
      Offset: 91,
      Type: 20,
      Index: 42
    },
    {
      Description: "System.Object @ 3505",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7 @ 3596",
      Offset: 91,
      Type: 20,
      Index: 43
    },
    {
      Description: "System.Object @ 3604",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb @ 3695",
      Offset: 91,
      Type: 20,
      Index: 44
    },
    {
      Description: "System.Object @ 3703",
      Offset: 8,
      Type: 20,
      Index: 1
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata() @ 3839",
      Offset: 136,
      Type: 12,
      Index: 272
    },
    {
      Description: "System.Runtime.Assembly System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly(System.String) @ 3926",
      Offset: 87,
      Type: 12,
      Index: 273
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 4055",
      Offset: 129,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.TestRunner @ 4095",
      Offset: 40,
      Type: 20,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4281",
      Offset: 186,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Main(System.String[]) @ 4299",
      Offset: 18,
      Type: 12,
      Index: 0
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4431",
      Offset: 132,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunProcessViewer() @ 4461",
      Offset: 30,
      Type: 12,
      Index: 3
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4605",
      Offset: 144,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTestSuite() @ 4631",
      Offset: 26,
      Type: 12,
      Index: 4
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4771",
      Offset: 140,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::GetTestCases() @ 4797",
      Offset: 26,
      Type: 12,
      Index: 14
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 4937",
      Offset: 140,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::RunTests() @ 4959",
      Offset: 22,
      Type: 12,
      Index: 32
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5095",
      Offset: 136,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::PerformTest(XaeiOS.TestSuite.ITest) @ 5120",
      Offset: 25,
      Type: 12,
      Index: 45
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5259",
      Offset: 139,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String) @ 5276",
      Offset: 17,
      Type: 12,
      Index: 35
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5407",
      Offset: 131,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String) @ 5424",
      Offset: 17,
      Type: 12,
      Index: 48
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 5556",
      Offset: 132,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0() @ 5592",
      Offset: 36,
      Type: 12,
      Index: 7
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 5744",
      Offset: 152,
      Type: 12,
      Index: 274
    },
    {
      Description: "System.Runtime.CompilerServices.CompilerGeneratedAttribute @ 5815",
      Offset: 71,
      Type: 20,
      Index: 73
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 6034",
      Offset: 219,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 6054",
      Offset: 20,
      Type: 12,
      Index: 277
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 6179",
      Offset: 125,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 6191",
      Offset: 12,
      Type: 12,
      Index: 279
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 6304",
      Offset: 113,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 6316",
      Offset: 12,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 6438",
      Offset: 122,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1(System.Object,System.EventArgs) @ 6474",
      Offset: 36,
      Type: 12,
      Index: 9
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 6617",
      Offset: 143,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 6629",
      Offset: 12,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 6751",
      Offset: 122,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4() @ 6783",
      Offset: 32,
      Type: 12,
      Index: 12
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 6922",
      Offset: 139,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 6934",
      Offset: 12,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 7056",
      Offset: 122,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5(System.Object,System.EventArgs) @ 7088",
      Offset: 32,
      Type: 12,
      Index: 13
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 7227",
      Offset: 139,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 7239",
      Offset: 12,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 7361",
      Offset: 122,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestRunner::.cctor() @ 7381",
      Offset: 20,
      Type: 12,
      Index: 52
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7515",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.AssertException @ 7560",
      Offset: 45,
      Type: 20,
      Index: 2
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 7753",
      Offset: 193,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String) @ 7773",
      Offset: 20,
      Type: 12,
      Index: 54
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 7907",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.ITest @ 7942",
      Offset: 35,
      Type: 20,
      Index: 49
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8123",
      Offset: 181,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String XaeiOS.TestSuite.ITest::get_Name() @ 8148",
      Offset: 25,
      Type: 68,
      Index: 41
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8285",
      Offset: 137,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.ITest::get_Passed() @ 8312",
      Offset: 27,
      Type: 68,
      Index: 47
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8451",
      Offset: 139,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.ITest::get_Exception() @ 8481",
      Offset: 30,
      Type: 68,
      Index: 42
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 8623",
      Offset: 142,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.ITest::Test() @ 8644",
      Offset: 21,
      Type: 68,
      Index: 46
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 8777",
      Offset: 133,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 8925",
      Offset: 148,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 9077",
      Offset: 152,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 9235",
      Offset: 158,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.TestBase @ 9273",
      Offset: 38,
      Type: 20,
      Index: 4
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9459",
      Offset: 186,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 9482",
      Offset: 23,
      Type: 12,
      Index: 56
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestBase::get_Name() @ 9484",
      Offset: 2,
      Type: 68,
      Index: 56
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9637",
      Offset: 153,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 9662",
      Offset: 25,
      Type: 12,
      Index: 57
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() @ 9664",
      Offset: 2,
      Type: 68,
      Index: 57
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 9819",
      Offset: 155,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 9847",
      Offset: 28,
      Type: 12,
      Index: 58
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestBase::get_Exception() @ 9849",
      Offset: 2,
      Type: 68,
      Index: 58
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10007",
      Offset: 158,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 10026",
      Offset: 19,
      Type: 12,
      Index: 59
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Test() @ 10028",
      Offset: 2,
      Type: 68,
      Index: 59
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10177",
      Offset: 149,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::PerformTest() @ 10205",
      Offset: 28,
      Type: 68,
      Index: 60
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10345",
      Offset: 140,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::TestFailed(System.Exception) @ 10370",
      Offset: 25,
      Type: 12,
      Index: 62
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10511",
      Offset: 141,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Log(System.String) @ 10529",
      Offset: 18,
      Type: 12,
      Index: 63
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10663",
      Offset: 134,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean) @ 10684",
      Offset: 21,
      Type: 12,
      Index: 64
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10821",
      Offset: 137,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::Fail(System.String) @ 10840",
      Offset: 19,
      Type: 12,
      Index: 66
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 10975",
      Offset: 135,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int64,System.Int64) @ 11002",
      Offset: 27,
      Type: 12,
      Index: 68
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 11145",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int32,System.Int32) @ 11172",
      Offset: 27,
      Type: 12,
      Index: 70
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 11315",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.String,System.String) @ 11342",
      Offset: 27,
      Type: 12,
      Index: 72
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 11485",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Object,System.Object) @ 11512",
      Offset: 27,
      Type: 12,
      Index: 74
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 11655",
      Offset: 143,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String) @ 11675",
      Offset: 20,
      Type: 12,
      Index: 76
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11809",
      Offset: 134,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 11957",
      Offset: 148,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 12109",
      Offset: 152,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 12267",
      Offset: 158,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.XmlHttpRequestTest @ 12321",
      Offset: 54,
      Type: 20,
      Index: 5
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 12523",
      Offset: 202,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest() @ 12549",
      Offset: 26,
      Type: 12,
      Index: 78
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest() @ 12551",
      Offset: 2,
      Type: 68,
      Index: 78
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 12707",
      Offset: 156,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::.ctor() @ 12727",
      Offset: 20,
      Type: 12,
      Index: 23
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 12861",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest @ 12923",
      Offset: 62,
      Type: 20,
      Index: 6
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13133",
      Offset: 210,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest() @ 13159",
      Offset: 26,
      Type: 12,
      Index: 82
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest() @ 13161",
      Offset: 2,
      Type: 68,
      Index: 82
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13317",
      Offset: 156,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String) @ 13335",
      Offset: 18,
      Type: 12,
      Index: 83
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 13469",
      Offset: 134,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Remove(System.String) @ 13490",
      Offset: 21,
      Type: 12,
      Index: 84
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 13627",
      Offset: 137,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::.ctor() @ 13647",
      Offset: 20,
      Type: 12,
      Index: 21
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 13781",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest @ 13846",
      Offset: 65,
      Type: 20,
      Index: 7
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 14059",
      Offset: 213,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest() @ 14085",
      Offset: 26,
      Type: 12,
      Index: 86
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest() @ 14087",
      Offset: 2,
      Type: 68,
      Index: 86
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 14243",
      Offset: 156,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::.ctor() @ 14263",
      Offset: 20,
      Type: 12,
      Index: 26
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 14397",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadSleepTest @ 14448",
      Offset: 51,
      Type: 20,
      Index: 8
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 14647",
      Offset: 199,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest() @ 14673",
      Offset: 26,
      Type: 12,
      Index: 87
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest() @ 14675",
      Offset: 2,
      Type: 68,
      Index: 87
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 14831",
      Offset: 156,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::.ctor(System.Int32,System.Int32) @ 14851",
      Offset: 20,
      Type: 12,
      Index: 18
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 14985",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.AlertHelloWorldTest @ 15040",
      Offset: 55,
      Type: 20,
      Index: 9
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 15243",
      Offset: 203,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest() @ 15269",
      Offset: 26,
      Type: 12,
      Index: 89
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest() @ 15271",
      Offset: 2,
      Type: 68,
      Index: 89
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 15427",
      Offset: 156,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::Alert(System.String) @ 15447",
      Offset: 20,
      Type: 12,
      Index: 282
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 15583",
      Offset: 136,
      Type: 12,
      Index: 274
    },
    {
      Description: "System.Runtime.InteropServices.IntrinsicAttribute @ 15645",
      Offset: 62,
      Type: 20,
      Index: 74
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 15855",
      Offset: 210,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean System.Runtime.InteropServices.IntrinsicAttribute::get_UseGlobalNamespace() @ 15892",
      Offset: 37,
      Type: 12,
      Index: 283
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 16045",
      Offset: 153,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::set_UseGlobalNamespace(System.Boolean) @ 16082",
      Offset: 37,
      Type: 12,
      Index: 284
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 16235",
      Offset: 153,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean System.Runtime.InteropServices.IntrinsicAttribute::get_SetVTable() @ 16263",
      Offset: 28,
      Type: 12,
      Index: 285
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 16407",
      Offset: 144,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::set_SetVTable(System.Boolean) @ 16435",
      Offset: 28,
      Type: 12,
      Index: 286
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 16579",
      Offset: 144,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String System.Runtime.InteropServices.IntrinsicAttribute::get_Name() @ 16602",
      Offset: 23,
      Type: 12,
      Index: 287
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 16741",
      Offset: 139,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::set_Name(System.String) @ 16764",
      Offset: 23,
      Type: 12,
      Index: 288
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 16903",
      Offset: 139,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::.ctor() @ 16923",
      Offset: 20,
      Type: 12,
      Index: 289
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 17057",
      Offset: 134,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::.ctor(System.String) @ 17077",
      Offset: 20,
      Type: 12,
      Index: 290
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 17211",
      Offset: 134,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 17391",
      Offset: 180,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 17553",
      Offset: 162,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 17696",
      Offset: 143,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 17708",
      Offset: 12,
      Type: 12,
      Index: 279
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 17821",
      Offset: 113,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.InteropServices.IntrinsicAttribute::.ctor(System.String) @ 17833",
      Offset: 12,
      Type: 12,
      Index: 291
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 17955",
      Offset: 122,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::.ctor() @ 17975",
      Offset: 20,
      Type: 12,
      Index: 90
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 18109",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Assert @ 18145",
      Offset: 36,
      Type: 20,
      Index: 10
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 18329",
      Offset: 184,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean) @ 18354",
      Offset: 25,
      Type: 12,
      Index: 65
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 18495",
      Offset: 141,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::Fail(System.String) @ 18514",
      Offset: 19,
      Type: 12,
      Index: 67
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 18649",
      Offset: 135,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int64,System.Int64) @ 18676",
      Offset: 27,
      Type: 12,
      Index: 69
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 18819",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int32,System.Int32) @ 18846",
      Offset: 27,
      Type: 12,
      Index: 71
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 18989",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.String,System.String) @ 19016",
      Offset: 27,
      Type: 12,
      Index: 73
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 19159",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Object,System.Object) @ 19186",
      Offset: 27,
      Type: 12,
      Index: 75
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 19329",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Assert::AssertNotNull(System.String,System.Object) @ 19357",
      Offset: 28,
      Type: 12,
      Index: 92
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 19501",
      Offset: 144,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.EventTest @ 19546",
      Offset: 45,
      Type: 20,
      Index: 11
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 19739",
      Offset: 193,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::add_MyEvent(System.EventHandler) @ 19765",
      Offset: 26,
      Type: 12,
      Index: 93
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 19907",
      Offset: 142,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::remove_MyEvent(System.EventHandler) @ 19936",
      Offset: 29,
      Type: 12,
      Index: 95
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20081",
      Offset: 145,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::add_NullEvent(System.EventHandler) @ 20109",
      Offset: 28,
      Type: 12,
      Index: 97
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20253",
      Offset: 144,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::remove_NullEvent(System.EventHandler) @ 20284",
      Offset: 31,
      Type: 12,
      Index: 98
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20431",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest() @ 20457",
      Offset: 26,
      Type: 12,
      Index: 99
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest() @ 20459",
      Offset: 2,
      Type: 68,
      Index: 99
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20615",
      Offset: 156,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3(System.Object,System.EventArgs) @ 20648",
      Offset: 33,
      Type: 12,
      Index: 102
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20797",
      Offset: 149,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2(System.Object,System.EventArgs) @ 20830",
      Offset: 33,
      Type: 12,
      Index: 101
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 20979",
      Offset: 149,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent(System.Object,System.EventArgs) @ 21011",
      Offset: 32,
      Type: 12,
      Index: 100
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 21159",
      Offset: 148,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.EventTest::.ctor() @ 21179",
      Offset: 20,
      Type: 12,
      Index: 22
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 21313",
      Offset: 134,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.TestSuite @ 21352",
      Offset: 39,
      Type: 20,
      Index: 12
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 21539",
      Offset: 187,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean) @ 21560",
      Offset: 21,
      Type: 12,
      Index: 105
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 21697",
      Offset: 137,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String) @ 21716",
      Offset: 19,
      Type: 12,
      Index: 106
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 21851",
      Offset: 135,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int64,System.Int64) @ 21878",
      Offset: 27,
      Type: 12,
      Index: 107
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 22021",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32) @ 22048",
      Offset: 27,
      Type: 12,
      Index: 108
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 22191",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.String,System.String) @ 22218",
      Offset: 27,
      Type: 12,
      Index: 109
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 22361",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Object,System.Object) @ 22388",
      Offset: 27,
      Type: 12,
      Index: 110
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 22532",
      Offset: 144,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object) @ 22560",
      Offset: 28,
      Type: 12,
      Index: 111
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 22706",
      Offset: 146,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 22729",
      Offset: 23,
      Type: 12,
      Index: 112
    },
    {
      Description: "System.String XaeiOS.TestSuite.TestSuite::get_Name() @ 22731",
      Offset: 2,
      Type: 68,
      Index: 112
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 22876",
      Offset: 145,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 22889",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 23013",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Name(System.String) @ 23036",
      Offset: 23,
      Type: 12,
      Index: 113
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 23167",
      Offset: 131,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 23180",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 23304",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 23329",
      Offset: 25,
      Type: 12,
      Index: 114
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() @ 23331",
      Offset: 2,
      Type: 68,
      Index: 114
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 23478",
      Offset: 147,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 23491",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 23615",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Passed(System.Boolean) @ 23640",
      Offset: 25,
      Type: 12,
      Index: 115
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 23773",
      Offset: 133,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 23786",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 23910",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 23938",
      Offset: 28,
      Type: 12,
      Index: 116
    },
    {
      Description: "System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() @ 23940",
      Offset: 2,
      Type: 68,
      Index: 116
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 24090",
      Offset: 150,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 24103",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 24227",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::set_Exception(System.Exception) @ 24255",
      Offset: 28,
      Type: 12,
      Index: 117
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 24391",
      Offset: 136,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 24404",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 24528",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 24547",
      Offset: 19,
      Type: 12,
      Index: 118
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Test() @ 24549",
      Offset: 2,
      Type: 68,
      Index: 118
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 24700",
      Offset: 151,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Collections.Generic.IList`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestSuite::GetTestCases() @ 24727",
      Offset: 27,
      Type: 12,
      Index: 29
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 24872",
      Offset: 145,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Log(System.String) @ 24890",
      Offset: 18,
      Type: 12,
      Index: 126
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 25026",
      Offset: 136,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 25046",
      Offset: 20,
      Type: 12,
      Index: 119
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::Setup() @ 25048",
      Offset: 2,
      Type: 68,
      Index: 119
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 25200",
      Offset: 152,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 25223",
      Offset: 23,
      Type: 12,
      Index: 121
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::TearDown() @ 25225",
      Offset: 2,
      Type: 68,
      Index: 121
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 25380",
      Offset: 155,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestSuite::.ctor() @ 25400",
      Offset: 20,
      Type: 12,
      Index: 127
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 25536",
      Offset: 136,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 25694",
      Offset: 158,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 25856",
      Offset: 162,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 26024",
      Offset: 168,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite @ 26081",
      Offset: 57,
      Type: 20,
      Index: 13
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 26288",
      Offset: 207,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::TestMethodInliningBreaksLoops() @ 26333",
      Offset: 45,
      Type: 12,
      Index: 128
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 26496",
      Offset: 163,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.TestAttribute @ 26539",
      Offset: 43,
      Type: 20,
      Index: 30
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 26732",
      Offset: 193,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 26753",
      Offset: 21,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 26890",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "System.AttributeUsageAttribute @ 26933",
      Offset: 43,
      Type: 20,
      Index: 75
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 27126",
      Offset: 193,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean System.AttributeUsageAttribute::get_AllowMultiple() @ 27159",
      Offset: 33,
      Type: 12,
      Index: 292
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 27310",
      Offset: 151,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::set_AllowMultiple(System.Boolean) @ 27343",
      Offset: 33,
      Type: 12,
      Index: 293
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 27494",
      Offset: 151,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean System.AttributeUsageAttribute::get_Inherited() @ 27523",
      Offset: 29,
      Type: 12,
      Index: 294
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 27670",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::set_Inherited(System.Boolean) @ 27699",
      Offset: 29,
      Type: 12,
      Index: 295
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 27846",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.AttributeTargets System.AttributeUsageAttribute::get_ValidOn() @ 27873",
      Offset: 27,
      Type: 12,
      Index: 296
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 28018",
      Offset: 145,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 28039",
      Offset: 21,
      Type: 12,
      Index: 279
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 28176",
      Offset: 137,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor() @ 28197",
      Offset: 21,
      Type: 12,
      Index: 297
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 28334",
      Offset: 137,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.cctor() @ 28356",
      Offset: 22,
      Type: 12,
      Index: 298
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 28494",
      Offset: 138,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 28672",
      Offset: 178,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 28842",
      Offset: 170,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 28992",
      Offset: 150,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 29005",
      Offset: 13,
      Type: 12,
      Index: 279
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 29119",
      Offset: 114,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.AttributeUsageAttribute::.ctor(System.AttributeTargets) @ 29132",
      Offset: 13,
      Type: 12,
      Index: 299
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 29246",
      Offset: 114,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 29259",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 29383",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts(System.Int32,System.Int32) @ 29410",
      Offset: 27,
      Type: 12,
      Index: 138
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 29555",
      Offset: 145,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 29584",
      Offset: 29,
      Type: 12,
      Index: 139
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 29731",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 29767",
      Offset: 36,
      Type: 12,
      Index: 141
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 29921",
      Offset: 154,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 29954",
      Offset: 33,
      Type: 12,
      Index: 142
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 30105",
      Offset: 151,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint2(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 30135",
      Offset: 30,
      Type: 12,
      Index: 143
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 30283",
      Offset: 148,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::.ctor() @ 30304",
      Offset: 21,
      Type: 12,
      Index: 144
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 30441",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerFlowControlTest @ 30500",
      Offset: 59,
      Type: 20,
      Index: 14
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 30709",
      Offset: 209,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest() @ 30736",
      Offset: 27,
      Type: 12,
      Index: 145
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest() @ 30738",
      Offset: 2,
      Type: 68,
      Index: 145
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 30897",
      Offset: 159,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Double XaeiOS.TestSuite.Tests.CompilerFlowControlTest::TestScore(System.Int32,System.Boolean) @ 30922",
      Offset: 25,
      Type: 12,
      Index: 146
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 31065",
      Offset: 143,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::.ctor() @ 31086",
      Offset: 21,
      Type: 12,
      Index: 147
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 31223",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingTest @ 31277",
      Offset: 54,
      Type: 20,
      Index: 15
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 31481",
      Offset: 204,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest() @ 31508",
      Offset: 27,
      Type: 12,
      Index: 148
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest() @ 31510",
      Offset: 2,
      Type: 68,
      Index: 148
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 31669",
      Offset: 159,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart() @ 31699",
      Offset: 30,
      Type: 12,
      Index: 149
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 31847",
      Offset: 148,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart() @ 31877",
      Offset: 30,
      Type: 12,
      Index: 152
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 32025",
      Offset: 148,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::.ctor() @ 32046",
      Offset: 21,
      Type: 12,
      Index: 153
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 32183",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite @ 32238",
      Offset: 55,
      Type: 20,
      Index: 16
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 32443",
      Offset: 205,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetTypeByName() @ 32476",
      Offset: 33,
      Type: 12,
      Index: 154
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 32617",
      Offset: 141,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 32630",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 32754",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetType() @ 32781",
      Offset: 27,
      Type: 12,
      Index: 156
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 32916",
      Offset: 135,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 32929",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 33053",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetMethods() @ 33083",
      Offset: 30,
      Type: 12,
      Index: 157
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 33221",
      Offset: 138,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 33234",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 33358",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetProperties() @ 33391",
      Offset: 33,
      Type: 12,
      Index: 158
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 33532",
      Offset: 141,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 33545",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 33669",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestSetProperty() @ 33700",
      Offset: 31,
      Type: 12,
      Index: 160
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 33839",
      Offset: 139,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 33852",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 33976",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestIsDefinedOnType() @ 34011",
      Offset: 35,
      Type: 12,
      Index: 163
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 34154",
      Offset: 143,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 34167",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 34291",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestActivator() @ 34320",
      Offset: 29,
      Type: 12,
      Index: 164
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 34457",
      Offset: 137,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 34470",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 34594",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.ReflectionTestSuite::get_MyProperty() @ 34624",
      Offset: 30,
      Type: 12,
      Index: 166
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 34762",
      Offset: 138,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 34775",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 34899",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::set_MyProperty(System.String) @ 34929",
      Offset: 30,
      Type: 12,
      Index: 161
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 35067",
      Offset: 138,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 35080",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 35204",
      Offset: 124,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::.ctor() @ 35225",
      Offset: 21,
      Type: 12,
      Index: 167
    },
    {
      Description: "System.Runtime.Property System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(System.Runtime.Class,System.String,System.Runtime.Method,System.Runtime.Method) @ 35362",
      Offset: 137,
      Type: 12,
      Index: 281
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 35534",
      Offset: 172,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute @ 35571",
      Offset: 37,
      Type: 20,
      Index: 17
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 35758",
      Offset: 187,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute::.ctor() @ 35779",
      Offset: 21,
      Type: 12,
      Index: 168
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 35906",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute::.ctor() @ 35919",
      Offset: 13,
      Type: 12,
      Index: 168
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 36043",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite @ 36105",
      Offset: 62,
      Type: 20,
      Index: 19
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 36317",
      Offset: 212,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers() @ 36358",
      Offset: 41,
      Type: 12,
      Index: 170
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 36507",
      Offset: 149,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 36520",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 36644",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers2() @ 36686",
      Offset: 42,
      Type: 12,
      Index: 171
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 36836",
      Offset: 150,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 36849",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 36973",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::FirstTest() @ 36998",
      Offset: 25,
      Type: 12,
      Index: 172
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 37131",
      Offset: 133,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 37144",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 37268",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTest() @ 37294",
      Offset: 26,
      Type: 12,
      Index: 173
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 37428",
      Offset: 134,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 37441",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 37565",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTestHelper() @ 37597",
      Offset: 32,
      Type: 12,
      Index: 174
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 37747",
      Offset: 150,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinally() @ 37787",
      Offset: 40,
      Type: 12,
      Index: 177
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 37935",
      Offset: 148,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 37948",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 38072",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinallyThrowException() @ 38126",
      Offset: 54,
      Type: 12,
      Index: 178
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 38288",
      Offset: 162,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 38301",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 38425",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicNestedTryCatchFinally() @ 38471",
      Offset: 46,
      Type: 12,
      Index: 179
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 38625",
      Offset: 154,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 38638",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 38762",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestComplexNestedTryCatchFinally() @ 38810",
      Offset: 48,
      Type: 12,
      Index: 181
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 38966",
      Offset: 156,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 38979",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 39103",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows() @ 39159",
      Offset: 56,
      Type: 12,
      Index: 182
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 39323",
      Offset: 164,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 39336",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 39460",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows2() @ 39517",
      Offset: 57,
      Type: 12,
      Index: 183
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 39682",
      Offset: 165,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 39695",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 39819",
      Offset: 124,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::.ctor() @ 39840",
      Offset: 21,
      Type: 12,
      Index: 184
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 39977",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.NullReferenceExceptionTest @ 40039",
      Offset: 62,
      Type: 20,
      Index: 20
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 40251",
      Offset: 212,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest() @ 40278",
      Offset: 27,
      Type: 12,
      Index: 185
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest() @ 40280",
      Offset: 2,
      Type: 68,
      Index: 185
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 40439",
      Offset: 159,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::.ctor() @ 40460",
      Offset: 21,
      Type: 12,
      Index: 17
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 40597",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.SynchronizationTest @ 40652",
      Offset: 55,
      Type: 20,
      Index: 21
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 40857",
      Offset: 205,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest() @ 40884",
      Offset: 27,
      Type: 12,
      Index: 186
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest() @ 40886",
      Offset: 2,
      Type: 68,
      Index: 186
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 41045",
      Offset: 159,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart() @ 41082",
      Offset: 37,
      Type: 12,
      Index: 187
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 41237",
      Offset: 155,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::.ctor() @ 41258",
      Offset: 21,
      Type: 12,
      Index: 20
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 41395",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest @ 41438",
      Offset: 43,
      Type: 20,
      Index: 22
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 41631",
      Offset: 193,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest() @ 41658",
      Offset: 27,
      Type: 12,
      Index: 189
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest() @ 41660",
      Offset: 2,
      Type: 68,
      Index: 189
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 41819",
      Offset: 159,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::MoveElement(System.String,System.Browser.Dom.IDomElement,System.Boolean) @ 41846",
      Offset: 27,
      Type: 12,
      Index: 196
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 41991",
      Offset: 145,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest::.ctor(System.Int32) @ 42012",
      Offset: 21,
      Type: 12,
      Index: 24
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 42149",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ResourceTest @ 42197",
      Offset: 48,
      Type: 20,
      Index: 23
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 42395",
      Offset: 198,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest() @ 42422",
      Offset: 27,
      Type: 12,
      Index: 199
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest() @ 42424",
      Offset: 2,
      Type: 68,
      Index: 199
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 42583",
      Offset: 159,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ResourceTest::.ctor() @ 42604",
      Offset: 21,
      Type: 12,
      Index: 19
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 42741",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomElementResource @ 42795",
      Offset: 54,
      Type: 20,
      Index: 24
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 42999",
      Offset: 204,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 43022",
      Offset: 23,
      Type: 12,
      Index: 202
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() @ 43024",
      Offset: 2,
      Type: 68,
      Index: 202
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 43179",
      Offset: 155,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString() @ 43203",
      Offset: 24,
      Type: 12,
      Index: 203
    },
    {
      Description: "System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString() @ 43205",
      Offset: 2,
      Type: 68,
      Index: 203
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 43361",
      Offset: 156,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement) @ 43382",
      Offset: 21,
      Type: 12,
      Index: 200
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 43519",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite @ 43578",
      Offset: 59,
      Type: 20,
      Index: 25
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 43787",
      Offset: 209,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass() @ 43849",
      Offset: 62,
      Type: 12,
      Index: 204
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 44019",
      Offset: 170,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 44032",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 44156",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestStaticConstructorsWorked() @ 44200",
      Offset: 44,
      Type: 12,
      Index: 207
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 44352",
      Offset: 152,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 44365",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 44489",
      Offset: 124,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::.ctor() @ 44510",
      Offset: 21,
      Type: 12,
      Index: 208
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 44647",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder @ 44667",
      Offset: 20,
      Type: 20,
      Index: 64
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 44835",
      Offset: 168,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder::AddTen(System.Int32) @ 44859",
      Offset: 24,
      Type: 68,
      Index: 206
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 44997",
      Offset: 138,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase @ 45020",
      Offset: 23,
      Type: 20,
      Index: 26
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 45193",
      Offset: 173,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::AddTen(System.Int32) @ 45217",
      Offset: 24,
      Type: 68,
      Index: 266
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 45355",
      Offset: 138,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::.ctor() @ 45376",
      Offset: 21,
      Type: 12,
      Index: 209
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 45513",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder @ 45539",
      Offset: 26,
      Type: 20,
      Index: 27
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 45715",
      Offset: 176,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 45737",
      Offset: 22,
      Type: 12,
      Index: 210
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) @ 45739",
      Offset: 2,
      Type: 68,
      Index: 210
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 45893",
      Offset: 154,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::.ctor() @ 45914",
      Offset: 21,
      Type: 12,
      Index: 205
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 46051",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1 @ 46088",
      Offset: 37,
      Type: 20,
      Index: 28
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 46275",
      Offset: 187,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.cctor() @ 46297",
      Offset: 22,
      Type: 12,
      Index: 211
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 46435",
      Offset: 138,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.ctor() @ 46456",
      Offset: 21,
      Type: 12,
      Index: 212
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 46593",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2 @ 46630",
      Offset: 37,
      Type: 20,
      Index: 29
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 46817",
      Offset: 187,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.cctor() @ 46839",
      Offset: 22,
      Type: 12,
      Index: 213
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 46977",
      Offset: 138,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.ctor() @ 46998",
      Offset: 21,
      Type: 12,
      Index: 214
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 47135",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.MultiThreadingStressTest @ 47195",
      Offset: 60,
      Type: 20,
      Index: 31
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 47405",
      Offset: 210,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest() @ 47432",
      Offset: 27,
      Type: 12,
      Index: 216
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest() @ 47434",
      Offset: 2,
      Type: 68,
      Index: 216
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 47593",
      Offset: 159,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadStarted() @ 47622",
      Offset: 29,
      Type: 12,
      Index: 219
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 47769",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work() @ 47789",
      Offset: 20,
      Type: 12,
      Index: 218
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 47927",
      Offset: 138,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadFinished(System.Boolean) @ 47957",
      Offset: 30,
      Type: 12,
      Index: 223
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 48105",
      Offset: 148,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::.ctor(System.Int32) @ 48126",
      Offset: 21,
      Type: 12,
      Index: 25
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 48263",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.QuickSortTestSuite @ 48311",
      Offset: 48,
      Type: 20,
      Index: 32
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 48509",
      Offset: 198,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::TestQuickSort() @ 48538",
      Offset: 29,
      Type: 12,
      Index: 225
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 48675",
      Offset: 137,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 48688",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 48812",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::CompareInts(System.Int32,System.Int32) @ 48839",
      Offset: 27,
      Type: 12,
      Index: 226
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 48984",
      Offset: 145,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 49004",
      Offset: 20,
      Type: 12,
      Index: 227
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 49142",
      Offset: 138,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 49171",
      Offset: 29,
      Type: 12,
      Index: 230
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 49318",
      Offset: 147,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>) @ 49341",
      Offset: 23,
      Type: 12,
      Index: 229
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 49482",
      Offset: 141,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 49518",
      Offset: 36,
      Type: 12,
      Index: 231
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 49672",
      Offset: 154,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>) @ 49705",
      Offset: 33,
      Type: 12,
      Index: 232
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 49856",
      Offset: 151,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.QuickSortTestSuite::.ctor() @ 49877",
      Offset: 21,
      Type: 12,
      Index: 233
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 50014",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Comparison`1 @ 50056",
      Offset: 42,
      Type: 20,
      Index: 33
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 50248",
      Offset: 192,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Object System.Delegate::Invoke(System.Object[]) @ 50272",
      Offset: 24,
      Type: 68,
      Index: 103
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 50410",
      Offset: 138,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.IAsyncResult XaeiOS.TestSuite.Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) @ 50439",
      Offset: 29,
      Type: 68,
      Index: 270
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 50582",
      Offset: 143,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Int32 XaeiOS.TestSuite.Comparison`1::EndInvoke(System.IAsyncResult) @ 50609",
      Offset: 27,
      Type: 68,
      Index: 271
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 50750",
      Offset: 141,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 50892",
      Offset: 142,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite @ 50946",
      Offset: 54,
      Type: 20,
      Index: 35
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 51150",
      Offset: 204,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThread() @ 51181",
      Offset: 31,
      Type: 12,
      Index: 234
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 51320",
      Offset: 139,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 51333",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 51457",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThreadWithState() @ 51497",
      Offset: 40,
      Type: 12,
      Index: 237
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 51645",
      Offset: 148,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 51658",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 51782",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiom() @ 51811",
      Offset: 29,
      Type: 12,
      Index: 241
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 51948",
      Offset: 137,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 51961",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 52085",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown() @ 52150",
      Offset: 65,
      Type: 12,
      Index: 242
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 52323",
      Offset: 173,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 52336",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 52460",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiomUnlocksWhenExceptionsAreThrown() @ 52519",
      Offset: 59,
      Type: 12,
      Index: 248
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 52686",
      Offset: 167,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 52699",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 52823",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestManualResetEvent() @ 52859",
      Offset: 36,
      Type: 12,
      Index: 250
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 53003",
      Offset: 144,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void XaeiOS.TestSuite.TestAttribute::.ctor() @ 53016",
      Offset: 13,
      Type: 12,
      Index: 215
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 53140",
      Offset: 124,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9() @ 53205",
      Offset: 65,
      Type: 12,
      Index: 249
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 53378",
      Offset: 173,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 53391",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 53515",
      Offset: 124,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::.ctor() @ 53536",
      Offset: 21,
      Type: 12,
      Index: 256
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 53673",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException @ 53714",
      Offset: 41,
      Type: 20,
      Index: 36
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 53905",
      Offset: 191,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor() @ 53926",
      Offset: 21,
      Type: 12,
      Index: 244
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 54063",
      Offset: 137,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1 @ 54095",
      Offset: 32,
      Type: 20,
      Index: 37
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 54277",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0() @ 54328",
      Offset: 51,
      Type: 12,
      Index: 132
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 54497",
      Offset: 169,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::.ctor() @ 54518",
      Offset: 21,
      Type: 12,
      Index: 129
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 54645",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 54658",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 54782",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1 @ 54814",
      Offset: 32,
      Type: 20,
      Index: 38
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 54996",
      Offset: 182,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1::.ctor() @ 55017",
      Offset: 21,
      Type: 12,
      Index: 192
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 55144",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 55157",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 55281",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3 @ 55313",
      Offset: 32,
      Type: 20,
      Index: 39
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 55495",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0() @ 55528",
      Offset: 33,
      Type: 12,
      Index: 195
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 55679",
      Offset: 151,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::.ctor() @ 55700",
      Offset: 21,
      Type: 12,
      Index: 194
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 55827",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 55840",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 55964",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7} @ 56046",
      Offset: 82,
      Type: 20,
      Index: 40
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 56268",
      Offset: 222,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 56281",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 56405",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}/__StaticArrayInitTypeSize=24 @ 56447",
      Offset: 42,
      Type: 20,
      Index: 72
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 56639",
      Offset: 192,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1 @ 56671",
      Offset: 32,
      Type: 20,
      Index: 41
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 56853",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0() @ 56890",
      Offset: 37,
      Type: 12,
      Index: 236
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 57045",
      Offset: 155,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::.ctor() @ 57066",
      Offset: 21,
      Type: 12,
      Index: 235
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 57193",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 57206",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 57330",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4 @ 57362",
      Offset: 32,
      Type: 20,
      Index: 42
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 57544",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3() @ 57590",
      Offset: 46,
      Type: 12,
      Index: 239
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 57754",
      Offset: 164,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::.ctor() @ 57775",
      Offset: 21,
      Type: 12,
      Index: 238
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 57902",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 57915",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 58039",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7 @ 58071",
      Offset: 32,
      Type: 20,
      Index: 43
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 58253",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6() @ 58324",
      Offset: 71,
      Type: 12,
      Index: 246
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 58513",
      Offset: 189,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::.ctor() @ 58534",
      Offset: 21,
      Type: 12,
      Index: 243
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 58661",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 58674",
      Offset: 13,
      Type: 12,
      Index: 280
    },
    {
      Description: "System.Runtime.Class System.Runtime.CompilerServices.RuntimeHelpers::CreateClass(System.String,System.String,System.Runtime.Assembly,System.UIntPtr,System.Runtime.Class,System.Boolean,System.Boolean) @ 58798",
      Offset: 124,
      Type: 12,
      Index: 274
    },
    {
      Description: "XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb @ 58830",
      Offset: 32,
      Type: 20,
      Index: 44
    },
    {
      Description: "System.Runtime.Method System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(System.Runtime.Class,System.String,System.NativeFunction,System.Int32) @ 59012",
      Offset: 182,
      Type: 12,
      Index: 275
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a() @ 59054",
      Offset: 42,
      Type: 12,
      Index: 252
    },
    {
      Description: "System.Runtime.Constructor System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(System.Runtime.Class,System.String,System.NativeFunction) @ 59214",
      Offset: 160,
      Type: 12,
      Index: 276
    },
    {
      Description: "System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::.ctor() @ 59235",
      Offset: 21,
      Type: 12,
      Index: 251
    },
    {
      Description: "System.Runtime.CustomAttribute System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(System.Runtime.ICustomAttributeProvider,System.Runtime.Method) @ 59362",
      Offset: 127,
      Type: 12,
      Index: 278
    },
    {
      Description: "System.Void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() @ 59375",
      Offset: 13,
      Type: 12,
      Index: 280
    }
  ]
}
]]></Header><Code Length="170"><![CDATA[function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestRunner::Main(System.String[])
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[]()/*XaeiOS.Process.SignalDaemon::Start()*/;
                    $$[]()/*System.Browser.XmlHttpRequest.XmlHttpRequestManager::StartDriver()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*XaeiOS.TestSuite.TestRunner::RunProcessViewer()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*XaeiOS.TestSuite.TestRunner::RunTestSuite()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.TestRunner::RunProcessViewer()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = _[]/*$t0 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate2*/;
                    if(r1)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0)*/;
                    $$[](r0,null,$$[])/*$t3..ctor(null, XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    _[] = r0/*XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate2 = $t3*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = _[]/*$t4 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate2*/;
                    r2 = (t=[null,null,null,null,null,null,null,null,null,null,null,null,false,null,null,null],t.$=_[],t)/*$t7 = new System.Void XaeiOS.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String)($t4, 3, "Process Viewer")*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0,3,"Process Viewer"])/*$t7..ctor($t4, 3, "Process Viewer")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    r0 = _[]/*$t8 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate3*/;
                    r1 = r2/*$ts0 = $t7*/;
                    if(r0)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t11 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1)*/;
                    $$[](r0,null,$$[])/*$t11..ctor(null, XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    _[] = r0/*XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate3 = $t11*/;
                    r1 = r2/*$ts0 = $t7*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    $ep = 9;
                    r0 = _[]/*$t12 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate3*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*$ts0.add_Exited($t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t7.Start()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.TestRunner::RunTestSuite()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = _[]/*$t0 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate6*/;
                    if(r1)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4)*/;
                    $$[](r0,null,$$[])/*$t3..ctor(null, XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    _[] = r0/*XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate6 = $t3*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = _[]/*$t4 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate6*/;
                    r2 = (t=[null,null,null,null,null,null,null,null,null,null,null,null,false,null,null,null],t.$=_[],t)/*$t7 = new System.Void XaeiOS.SIP::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.String)($t4, 3, "XaeiOS.TestSuite")*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0,3,"XaeiOS.TestSuite"])/*$t7..ctor($t4, 3, "XaeiOS.TestSuite")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    r0 = _[]/*$t8 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate7*/;
                    r1 = r2/*$ts0 = $t7*/;
                    if(r0)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t11 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5)*/;
                    $$[](r0,null,$$[])/*$t11..ctor(null, XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    _[] = r0/*XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate7 = $t11*/;
                    r1 = r2/*$ts0 = $t7*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    $ep = 9;
                    r0 = _[]/*$t12 = XaeiOS.TestSuite.TestRunner.CS$<>9__CachedAnonymousMethodDelegate7*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*$ts0.add_Exited($t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t7.Start()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4)
// : System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::GetTestCases()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r4 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest>::.ctor()()*/;
                    $$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 3;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r2 = _[]/*$t2 = XaeiOS.TestSuite.TestRunner._testSuites*/;
                    if((r0 < r2.length))
                    {
                        $ep = 19;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r3 = $$[](_[],10)/*V_9.1 = new XaeiOS.TestSuite.ITest[10]*/;
                    r2 = (t=[null,false,null],t.$=_[],t)/*$t10 = new System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t10..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r3[0] = r2/*V_9.1[0] = $t10*/;
                    r2 = (t=[null,false,null,null,null],t.$=_[],t)/*$t14 = new System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::.ctor(System.Int32,System.Int32)(4, 3)*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,4,3])/*$t14..ctor(4, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r3[1] = r2/*V_9.1[1] = $t14*/;
                    r2 = (t=[null,false,null],t.$=_[],t)/*$t16 = new System.Void XaeiOS.TestSuite.Tests.ResourceTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t16..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r3[2] = r2/*V_9.1[2] = $t16*/;
                    r2 = (t=[null,false,null,null],t.$=_[],t)/*$t18 = new System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t18..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r3[3] = r2/*V_9.1[3] = $t18*/;
                    r2 = (t=[null,false,null,null,null,null],t.$=_[],t)/*$t20 = new System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t20..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r3[4] = r2/*V_9.1[4] = $t20*/;
                    r2 = (t=[null,false,null,false,false,false,null,null],t.$=_[],t)/*$t22 = new System.Void XaeiOS.TestSuite.Tests.EventTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t22..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r3[5] = r2/*V_9.1[5] = $t22*/;
                    r2 = (t=[null,false,null],t.$=_[],t)/*$t24 = new System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t24..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r3[6] = r2/*V_9.1[6] = $t24*/;
                    r2 = (t=[null,false,null,false,null,null],t.$=_[],t)/*$t27 = new System.Void XaeiOS.TestSuite.Tests.DomTest::.ctor(System.Int32)(8)*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,8])/*$t27..ctor(8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r3[7] = r2/*V_9.1[7] = $t27*/;
                    r2 = (t=[null,false,null,null,null,null,null,null,null,null,null],t.$=_[],t)/*$t30 = new System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::.ctor(System.Int32)(100)*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,100])/*$t30..ctor(100)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r3[8] = r2/*V_9.1[8] = $t30*/;
                    r2 = (t=[null,false,null],t.$=_[],t)/*$t32 = new System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$t32..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    r3[9] = r2/*V_9.1[9] = $t32*/;
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 15;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    if((r0 < r3.length))
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                    return r4/*$t0*/;
                }
                case 17:
                {
                    $ep = 18;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,r3[r0]])/*$t0.Add(V_9.1[V_1.6])*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    r0 = (r0 + 1)/*V_1.3 = V_1.6 Add 1*/;
                    $ep = 15;
                    continue $ctrl;
                }
                case 19:
                {
                    $ep = 20;
                    r2 = _[]/*$t41 = XaeiOS.TestSuite.TestRunner._testSuites*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,r2[r0]])/*$rv = System.Activator::CreateInstance($t41[V_1.5])*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r2 = $rv/*V_3.1 = $rv*/;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$rv = V_3.1.GetTestCases()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    r3 = $rv/*V_4.1 = $rv*/;
                    r1 = 0/*V_5.1 = 0*/;
                    $ep = 22;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    $rv = r3.$.i[][].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null])/*$rv = V_4.1.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    r2 = $rv/*$t46 = $rv*/;
                    if((r1 < r2))
                    {
                        $ep = 25;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 24;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 24:
                {
                    r0 = (r0 + 1)/*V_1.4 = V_1.5 Add 1*/;
                    $ep = 3;
                    continue $ctrl;
                }
                case 25:
                {
                    $ep = 26;
                    $rv = r3.$.i[][].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,r1])/*$rv = V_4.1.get_Item(V_5.3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    r2 = $rv/*$t51 = $rv*/;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t),[null,null,r2])/*$t0.Add($t51)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    r1 = (r1 + 1)/*V_5.2 = V_5.3 Add 1*/;
                    $ep = 22;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2,r3)
// : System.Void XaeiOS.TestSuite.TestRunner::RunTests()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    _[] = 0/*XaeiOS.TestSuite.TestRunner._passCount = 0*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t1 = new System.Void System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest>::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    _[] = r1/*XaeiOS.TestSuite.TestRunner._failures = $t1*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = XaeiOS.TestSuite.TestRunner::GetTestCases()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r2 = $rv/*V_0.1 = $rv*/;
                    $rv = r2.$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = V_0.1.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = $rv/*$t4 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,"Performing ",new Number(r1)," tests"])/*$rv = System.String::Concat("Performing ", box(System.Int32,$t4), " tests")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r1 = $rv/*$t7 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*XaeiOS.TestSuite.TestRunner::Log($t7)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 7;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $rv = r2.$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = V_0.1.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r1 = $rv/*$t9 = $rv*/;
                    if((r0 < r1))
                    {
                        $ep = 37;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*System.Console::WriteLine()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r3 = $$[](_[],5)/*V_3.1 = new System.Object[5]*/;
                    r3[0] = "Passed "/*V_3.1[0] = "Passed "*/;
                    r1 = _[]/*$t17 = XaeiOS.TestSuite.TestRunner._passCount*/;
                    r3[1] = new Number(r1)/*V_3.1[1] = box(System.Int32,$t17)*/;
                    r3[2] = " of "/*V_3.1[2] = " of "*/;
                    $rv = r2.$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = V_0.1.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r1 = $rv/*$t22 = $rv*/;
                    r3[3] = new Number(r1)/*V_3.1[3] = box(System.Int32,$t22)*/;
                    r3[4] = " tests."/*V_3.1[4] = " tests."*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r3])/*$rv = System.String::Concat(V_3.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r1 = $rv/*$t26 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*XaeiOS.TestSuite.TestRunner::Log($t26)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,"================================================="])/*System.Console::WriteLine("=================================================")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*System.Console::WriteLine()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 16;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r1 = _[]/*$t29 = XaeiOS.TestSuite.TestRunner._failures*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t29.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    r1 = $rv/*$t30 = $rv*/;
                    if((r0 < r1))
                    {
                        $ep = 19;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 18;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 18:
                {
                    return;
                }
                case 19:
                {
                    $ep = 20;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*System.Console::WriteLine()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,"Failure "])/*System.Console::Write("Failure ")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    r1 = (r0 + 1).toString()/*$t36 = V_1.6 Add 1.ToString()*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*System.Console::Write($t36)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,": "])/*System.Console::Write(": ")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r1 = _[]/*$t38 = XaeiOS.TestSuite.TestRunner._failures*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r0])/*$rv = $t38.get_Item(V_1.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r1 = $rv/*$t39 = $rv*/;
                    $rv = r1.$.i[][].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t39.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r1 = $rv/*$t40 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*System.Console::Write($t40)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null," - "])/*System.Console::Write(" - ")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r1 = _[]/*$t42 = XaeiOS.TestSuite.TestRunner._failures*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r0])/*$rv = $t42.get_Item(V_1.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    r1 = $rv/*$t43 = $rv*/;
                    $rv = r1.$.i[][].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t43.get_Exception()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r1 = $rv/*$t44 = $rv*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t44.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    r1 = $rv/*$t45 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*System.Console::WriteLine($t45)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    r1 = _[]/*$t46 = XaeiOS.TestSuite.TestRunner._failures*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r0])/*$rv = $t46.get_Item(V_1.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    r1 = $rv/*$t47 = $rv*/;
                    $rv = r1.$.i[][].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t47.get_Exception()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    $ep = 34;
                    r1 = $rv/*$t48 = $rv*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*$rv = $t48.get_StackTrace()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    $ep = 35;
                    r1 = $rv/*$t49 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*System.Console::WriteLine($t49)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null])/*System.Console::WriteLine()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    r0 = (r0 + 1)/*V_1.3 = V_1.6 Add 1*/;
                    $ep = 16;
                    continue $ctrl;
                }
                case 37:
                {
                    $ep = 38;
                    $rv = r2.$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r0])/*$rv = V_0.1.get_Item(V_1.5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    $ep = 39;
                    r1 = $rv/*$t52 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t),[null,null,r1])/*XaeiOS.TestSuite.TestRunner::PerformTest($t52)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    r0 = (r0 + 1)/*V_1.4 = V_1.5 Add 1*/;
                    $ep = 7;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3)
// : System.Void XaeiOS.TestSuite.TestRunner::PerformTest(XaeiOS.TestSuite.ITest)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t2 = $rv*/;
                    r0 = ("Performing test: " + r0)/*$t3 = System.String::Concat("Performing test: ", $t2)*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r0])/*XaeiOS.TestSuite.TestRunner::Log($t3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = new Date()/*$t4 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r0.getTime()/*$rv = $t4.GetTime()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = $rv/*V_0.1 = $rv*/;
                    $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*test.Test()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = new Date()/*$t7 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r0.getTime()/*$rv = $t7.GetTime()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r3 = $rv/*$t8 = $rv*/;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Passed()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r0 = $rv/*$t11 = $rv*/;
                    if((!r0))
                    {
                        $ep = 11;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 8;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r0 = _[]/*$t15 = XaeiOS.TestSuite.TestRunner._passCount*/;
                    _[] = (r0 + 1)/*XaeiOS.TestSuite.TestRunner._passCount = $t15 Add 1*/;
                    r1 = $$[](_[],5)/*V_3.1 = new System.Object[5]*/;
                    r1[0] = "Test: "/*V_3.1[0] = "Test: "*/;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $rv/*$t24 = $rv*/;
                    r1[1] = r0/*V_3.1[1] = $t24*/;
                    r1[2] = " [PASSED]: "/*V_3.1[2] = " [PASSED]: "*/;
                    r1[3] = new Number((r3 - r2))/*V_3.1[3] = box(System.Int64,$t8 Subtract V_0.1)*/;
                    r1[4] = " ms"/*V_3.1[4] = " ms"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$rv = System.String::Concat(V_3.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 18;
                    r0 = $rv/*$t31 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r0])/*XaeiOS.TestSuite.TestRunner::Log($t31)*/;
                    continue $ctrl;
                }
                case 11:
                {
                    $ep = 12;
                    r1 = $$[](_[],8)/*V_3.2 = new System.Object[8]*/;
                    r1[0] = "Test: "/*V_3.2[0] = "Test: "*/;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = $rv/*$t38 = $rv*/;
                    r1[1] = r0/*V_3.2[1] = $t38*/;
                    r1[2] = " [FAILED]: "/*V_3.2[2] = " [FAILED]: "*/;
                    r1[3] = new Number((r3 - r2))/*V_3.2[3] = box(System.Int64,$t8 Subtract V_0.1)*/;
                    r1[4] = " ms => "/*V_3.2[4] = " ms => "*/;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Exception()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t47 = $rv*/;
                    r1[5] = r0/*V_3.2[5] = $t47*/;
                    r1[6] = " - "/*V_3.2[6] = " - "*/;
                    $rv = $f[2].$.i[][].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = test.get_Exception()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r0 = $rv/*$t52 = $rv*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$rv = $t52.get_StackTrace()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = $rv/*$t53 = $rv*/;
                    r1[7] = r0/*V_3.2[7] = $t53*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$rv = System.String::Concat(V_3.2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r0 = $rv/*$t54 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r0])/*XaeiOS.TestSuite.TestRunner::Log($t54)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r0 = _[]/*$t55 = XaeiOS.TestSuite.TestRunner._failures*/;
                    r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,$f[2]])/*$t55.Add(test)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestRunner::Log(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"TestRunner",$f[2]])/*XaeiOS.TestSuite.TestRunner::Log("TestRunner", s)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.TestRunner::Log(System.String,System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = $$[](_[],6)/*V_0.1 = new System.String[6]*/;
                    r1[0] = "["/*V_0.1[0] = "["*/;
                    r1[1] = $f[2]/*V_0.1[1] = context*/;
                    r1[2] = "] @ "/*V_0.1[2] = "] @ "*/;
                    r0 = new Date()/*$t9 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = $t9.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t10 = $rv*/;
                    r1[3] = r0/*V_0.1[3] = $t10*/;
                    r1[4] = " : "/*V_0.1[4] = " : "*/;
                    r1[5] = $f[3]/*V_0.1[5] = s*/;
                    r0 = r1.join('')/*$t15 = System.String::Concat(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*System.Console::WriteLine($t15)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__0()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    LogWrite("INFO", "Starting Process Viewer")/*System.Diagnostics.Logging::Info("Starting Process Viewer")*/;
                    r0 = (t=[null,null,null,null,null,null,null,null],t.$=_[],t)/*$t1 = new System.Void XaeiOS.ProcessViewer.ProcessViewer::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,2000])/*$t1.set_UpdateInterval(2000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t1.Start()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestRunner::<RunProcessViewer>b__1(System.Object,System.EventArgs)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    LogWrite("INFO", "Process Viewer exited")/*System.Diagnostics.Logging::Info("Process Viewer exited")*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__4()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    LogWrite("INFO", "Starting XaeiOS.TestSuite")/*System.Diagnostics.Logging::Info("Starting XaeiOS.TestSuite")*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*XaeiOS.TestSuite.TestRunner::RunTests()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestRunner::<RunTestSuite>b__5(System.Object,System.EventArgs)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    LogWrite("INFO", "XaeiOS.TestSuite process exited")/*System.Diagnostics.Logging::Info("XaeiOS.TestSuite process exited")*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.TestRunner::.cctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = $$[](_[],6)/*V_0.1 = new System.Type[6]*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ThreadingTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t4 = $rv*/;
                    r1[0] = r0/*V_0.1[0] = $t4*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ClassStructureTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t7 = $rv*/;
                    r1[1] = r0/*V_0.1[1] = $t7*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = $rv/*$t10 = $rv*/;
                    r1[2] = r0/*V_0.1[2] = $t10*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.CompilerBugsTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t13 = $rv*/;
                    r1[3] = r0/*V_0.1[3] = $t13*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = $rv/*$t16 = $rv*/;
                    r1[4] = r0/*V_0.1[4] = $t16*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.QuickSortTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r0 = $rv/*$t19 = $rv*/;
                    r1[5] = r0/*V_0.1[5] = $t19*/;
                    _[] = r1/*XaeiOS.TestSuite.TestRunner._testSuites = V_0.1*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this,$f[2])/*this..ctor(message)*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String XaeiOS.TestSuite.TestBase::get_Name()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[0]/*V_0.1 = this._name*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.TestBase::get_Passed()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[1]/*V_0.1 = this._passed*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Exception XaeiOS.TestSuite.TestBase::get_Exception()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[2]/*V_0.1 = this._exception*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.TestBase::Test()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[1] = 1/*this._passed = 1*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 6;
                    $f.$ecp = 3/*Frame.ExceptionCatchPointer = 3*/;
                    this.$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*this.PerformTest()*/;
                    continue $ctrl;
                }
                case 3:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $f.$e/*$t3 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.TestFailed($t3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::TestFailed(System.Exception)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[1] = 0/*this._passed = 0*/;
                    this[2] = $f[2]/*this._exception = e*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.TestBase::Log(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[0]/*$t1 = this._name*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*XaeiOS.TestSuite.TestRunner::Log($t1, s)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::Assert(System.String,System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertTrue(message, condition)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::Fail(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2]])/*XaeiOS.TestSuite.Assert::Fail(message)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int64,System.Int64)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.String,System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::AssertEquals(System.Object,System.Object)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestBase::.ctor(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    this[0] = $f[2]/*this._name = name*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = ("Retrieving " + "http://www.tenpow.com/" + " via XmlHttpRequest")/*$t4 = System.String::Concat("Retrieving ", "http://www.tenpow.com/", " via XmlHttpRequest")*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"http://www.tenpow.com/"])/*System.Browser.XmlHttpRequest.XmlHttpRequestManager::DoSimpleXmlHttpRequest("http://www.tenpow.com/")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    r0 = $$[](_[],5)/*V_4.1 = new System.Object[5]*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0[0] = "Retrieving "/*V_4.1[0] = "Retrieving "*/;
                    r0[1] = "http://www.deviantart.com/"/*V_4.1[1] = "http://www.deviantart.com/"*/;
                    r0[2] = " using a timeout value of "/*V_4.1[2] = " using a timeout value of "*/;
                    r0[3] = new Number(1)/*V_4.1[3] = box(System.Int32,1)*/;
                    r0[4] = " milliseconds.  An exception will most likely be thrown."/*V_4.1[4] = " milliseconds.  An exception will most likely be thrown."*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.String::Concat(V_4.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t20 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t20)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 11;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"http://www.deviantart.com/",0,null,null,null,1])/*System.Browser.XmlHttpRequest.XmlHttpRequestManager::DoSimpleXmlHttpRequest("http://www.deviantart.com/", 0, null, null, null, 1)*/;
                    continue $ctrl;
                }
                case 7:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Browser.XmlHttpRequest.XmlHttpRequestTimeoutException*/)
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 8;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 8:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $f.$e/*$t26 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"The request timed out as expected: ",r1])/*$rv = System.String::Concat("The request timed out as expected: ", V_1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $rv/*$t29 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t29)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"XmlHttpRequest test"])/*this..ctor("XmlHttpRequest test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = new Array()/*$t1 = new System.Void System.NativeArray`1<System.String>::.ctor()()*/;
                    this[3] = r0/*this._keys = $t1*/;
                    r0 = new Object()/*$t3 = new System.Void System.NativeObject::.ctor()()*/;
                    this[4] = r0/*this._keysToIndexMapping = $t3*/;
                    r0 = new Object()/*$t5 = new System.Void System.NativeObject::.ctor()()*/;
                    this[5] = r0/*this._internalObject = $t5*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"hello","world"])/*this.Add("hello", "world")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"goodbye","buddy"])/*this.Add("goodbye", "buddy")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"yester","day"])/*this.Add("yester", "day")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"hello"])/*this.Remove("hello")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"goodbye"])/*this.Remove("goodbye")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Add(System.String,System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[2].$[].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = key.GetHashCode()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r2 = $rv/*V_0.1 = $rv*/;
                    r0 = this[5]/*$t3 = this._internalObject*/;
                    r0 = r2 in r0/*V_1.1 = $t3.ContainsKey(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    if(r0)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = this[4]/*$t7 = this._keysToIndexMapping*/;
                    r0 = this[3]/*$t10 = this._keys*/;
                    $rv = r0.length/*$rv = $t10.get_Length()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t12 = $rv*/;
                    r1[r2] = r0/*$t7.set_Item(V_0.1, $t12)*/;
                    r0 = this[3]/*$t14 = this._keys*/;
                    r0.push($f[2])/*$t14.Push(key)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = this[5]/*$t17 = this._internalObject*/;
                    r0[r2] = $f[3]/*$t17.set_Item(V_0.1, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6)
// : System.Boolean XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::Remove(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[2].$[].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null])/*$rv = key.GetHashCode()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r3 = $rv/*V_0.1 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,"Making sure internal object contains hashcode key ",new Number(r3)])/*$rv = System.String::Concat("Making sure internal object contains hashcode key ", box(System.Int32,V_0.1))*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r2 = $rv/*$t5 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,r2])/*this.Log($t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = this[5]/*$t7 = this._internalObject*/;
                    r2 = r3 in r2/*V_7.1 = $t7.ContainsKey(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    if(r2)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    r0 = 0/*V_6.1 = 0*/;
                    $ep = 19;
                    continue $ctrl;
                }
                case 7:
                {
                    $ep = 8;
                    r2 = this[4]/*$t12 = this._keysToIndexMapping*/;
                    r5 = r2[r3]/*V_1.1 = $t12.get_Item(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,"Key index is ",new Number(r5)])/*$rv = System.String::Concat("Key index is ", box(System.Int32,V_1.1))*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r2 = $rv/*$t19 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,r2])/*this.Log($t19)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r2 = this[4]/*$t21 = this._keysToIndexMapping*/;
                    delete r2[r3]/*$t21.RemoveKey(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,"Key index removed from keys to index mapping. Rebuilding keys array"])/*this.Log("Key index removed from keys to index mapping. Rebuilding keys array")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r4 = new Array()/*$t25 = new System.Void System.NativeArray`1<System.String>::.ctor()()*/;
                    r2 = this[3]/*$t27 = this._keys*/;
                    r2.length/*$t27.get_Length()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r2 = this[3]/*$t30 = this._keys*/;
                    $rv = r2.length/*$rv = $t30.get_Length()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    r6 = $rv/*$t31 = $rv*/;
                    r1 = 0/*V_5.1 = 0*/;
                    $ep = 15;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    if((r1 < (r6 - 1)))
                    {
                        $ep = 20;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                    $ep = 17;
                    this[3] = r4/*this._keys = $t25*/;
                    r2 = this[5]/*$t39 = this._internalObject*/;
                    delete r2[r3]/*$t39.RemoveKey(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,"Dictionary::Remove done!"])/*this.Log("Dictionary::Remove done!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    r0 = 1/*V_6.2 = 1*/;
                    $ep = 19;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    return r0/*V_6.3*/;
                }
                case 20:
                {
                    $ep = 21;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,"At index: ",new Number(r1)])/*$rv = System.String::Concat("At index: ", box(System.Int32,V_5.3))*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    r2 = $rv/*$t47 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t),[null,null,r2])/*this.Log($t47)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    if((!(r1 == r5)))
                    {
                        $ep = 23;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 25;
                        continue $ctrl;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r2 = this[3]/*$t56 = this._keys*/;
                    r2 = r2[r1]/*$t58 = $t56.get_Item(V_5.3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r4.push(r2)/*$t25.Push($t58)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    r1 = (r1 + 1)/*V_5.2 = V_5.3 Add 1*/;
                    $ep = 15;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1,r3,r4,r5,r6],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"DictionaryRemoveSSABugTest"])/*this..ctor("DictionaryRemoveSSABugTest")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4)
// : System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = new Date()/*$t0 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r2.getTime()/*$rv = $t0.GetTime()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r3 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = (System.Int64)0*/;
                    r1 = 0/*V_2.1 = 0*/;
                    $ep = 3;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    if((!(r1 > 2000000)))
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = new Date()/*$t13 = new System.Void System.NativeDate::.ctor()()*/;
                    $rv = r2.getTime()/*$rv = $t13.GetTime()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r2 = $rv/*$t14 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t),[null,null,2000001000000,r0])/*this.AssertEquals(2000001000000, V_1.3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r4 = $$[](_[],5)/*V_5.1 = new System.Object[5]*/;
                    r4[0] = "Result is "/*V_5.1[0] = "Result is "*/;
                    r4[1] = new Number(r0)/*V_5.1[1] = box(System.Int64,V_1.3)*/;
                    r4[2] = ".  Took "/*V_5.1[2] = ".  Took "*/;
                    r2 = (r2 - r3).toString()/*$t28 = $t14 Subtract V_0.1.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r4[3] = r2/*V_5.1[3] = $t28*/;
                    r4[4] = "ms"/*V_5.1[4] = "ms"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t),[null,null,r4])/*$rv = System.String::Concat(V_5.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r2 = $rv/*$t31 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t),[null,null,r2])/*this.Log($t31)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    return;
                }
                case 10:
                {
                    r0 = (r0 + r1)/*V_1.2 = V_1.3 Add (System.Int64)V_2.3*/;
                    r1 = (r1 + 1)/*V_2.2 = V_2.3 Add 1*/;
                    $ep = 3;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r1,r0,r3,r4],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Single threaded performance test"])/*this..ctor("Single threaded performance test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[3]/*$t3 = this._duration1*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Sleeping for ",new Number(r0)," seconds"])/*$rv = System.String::Concat("Sleeping for ", box(System.Int32,$t3), " seconds")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t6 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = this[3]/*$t8 = this._duration1*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,(r0 * 1000)])/*System.Threading.Thread::Sleep($t8 Multiply 1000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Awake again!"])/*this.Log("Awake again!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = this[4]/*$t16 = this._duration2*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Sleeping for ",new Number(r0)," seconds"])/*$rv = System.String::Concat("Sleeping for ", box(System.Int32,$t16), " seconds")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = $rv/*$t19 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t19)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = this[4]/*$t21 = this._duration2*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,(r0 * 1000)])/*System.Threading.Thread::Sleep($t21 Multiply 1000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::.ctor(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Threading test"])/*this..ctor("Threading test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    this[3] = $f[2]/*this._duration1 = duration1*/;
                    this[4] = $f[3]/*this._duration2 = duration2*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    alert("HelloWorld!")/*XaeiOS.TestSuite.Tests.AlertHelloWorldTest::Alert("HelloWorld!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Alert hello world test"])/*this..ctor("Alert hello world test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Assert::AssertTrue(System.String,System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if($f[3])
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t2 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)(message)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,$f[2]])/*$t2..ctor(message)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t2*/;
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Assert::Fail(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t1 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)(message)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,$f[2]])/*$t1..ctor(message)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    throw r0/*$t1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int64,System.Int64)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if(($f[2] == $f[3]))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $$[](_[],5)/*V_1.1 = new System.Object[5]*/;
                    r0[0] = "Expected: <"/*V_1.1[0] = "Expected: <"*/;
                    r0[1] = new Number($f[2])/*V_1.1[1] = box(System.Int64,expected)*/;
                    r0[2] = ">, Received: <"/*V_1.1[2] = ">, Received: <"*/;
                    r0[3] = new Number($f[3])/*V_1.1[3] = box(System.Int64,actual)*/;
                    r0[4] = ">"/*V_1.1[4] = ">"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.String::Concat(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t18 = $rv*/;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t19 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)($t18)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$t19..ctor($t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r1/*$t19*/;
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if(($f[2] == $f[3]))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $$[](_[],5)/*V_1.1 = new System.Object[5]*/;
                    r0[0] = "Expected: <"/*V_1.1[0] = "Expected: <"*/;
                    r0[1] = new Number($f[2])/*V_1.1[1] = box(System.Int32,expected)*/;
                    r0[2] = ">, Received: <"/*V_1.1[2] = ">, Received: <"*/;
                    r0[3] = new Number($f[3])/*V_1.1[3] = box(System.Int32,actual)*/;
                    r0[4] = ">"/*V_1.1[4] = ">"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.String::Concat(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t18 = $rv*/;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t19 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)($t18)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$t19..ctor($t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r1/*$t19*/;
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.String,System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[2] != $f[3])/*$t2 = System.String::op_Inequality(expected, actual)*/;
                    if((!r0))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $$[](_[],5)/*V_1.1 = new System.String[5]*/;
                    r0[0] = "Expected: <"/*V_1.1[0] = "Expected: <"*/;
                    r0[1] = $f[2]/*V_1.1[1] = expected*/;
                    r0[2] = ">, Received: <"/*V_1.1[2] = ">, Received: <"*/;
                    r0[3] = $f[3]/*V_1.1[3] = actual*/;
                    r0[4] = ">"/*V_1.1[4] = ">"*/;
                    r0 = r0.join('')/*$t18 = System.String::Concat(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t19 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)($t18)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$t19..ctor($t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r1/*$t19*/;
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Assert::AssertEquals(System.Object,System.Object)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if((!($f[2] == null)))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    if((!($f[3] == null)))
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $$[](_[],5)/*V_1.1 = new System.Object[5]*/;
                    r0[0] = "Expected: <"/*V_1.1[0] = "Expected: <"*/;
                    r0[1] = $f[2]/*V_1.1[1] = expected*/;
                    r0[2] = ">, Received: <"/*V_1.1[2] = ">, Received: <"*/;
                    r0[3] = $f[3]/*V_1.1[3] = actual*/;
                    r0[4] = ">"/*V_1.1[4] = ">"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.String::Concat(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = $rv/*$t26 = $rv*/;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t27 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)($t26)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$t27..ctor($t26)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    throw r1/*$t27*/;
                }
                case 6:
                {
                    $ep = 7;
                    $rv = $f[2].$[].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,$f[3]])/*$rv = expected.Equals(actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r0 = $rv/*V_0.3 = $rv*/;
                    if(r0)
                    {
                        $ep = 8;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                }
                case 8:
                {
                    return;
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $$[](_[],5)/*V_1.2 = new System.Object[5]*/;
                    r0[0] = "Expected: <"/*V_1.2[0] = "Expected: <"*/;
                    r0[1] = $f[2]/*V_1.2[1] = expected*/;
                    r0[2] = ">, Received: <"/*V_1.2[2] = ">, Received: <"*/;
                    r0[3] = $f[3]/*V_1.2[3] = actual*/;
                    r0[4] = ">"/*V_1.2[4] = ">"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.String::Concat(V_1.2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $rv/*$t43 = $rv*/;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t44 = new System.Void XaeiOS.TestSuite.AssertException::.ctor(System.String)($t43)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$t44..ctor($t43)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    throw r1/*$t44*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Assert::AssertNotNull(System.String,System.Object)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],(!($f[3] == null))])/*XaeiOS.TestSuite.Assert::AssertTrue(message, BooleanNot value ValueEquality null)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::add_MyEvent(System.EventHandler)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[6]/*$t2 = this.MyEvent*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*$rv = System.Delegate::Combine($t2, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    this[6] = $$[](r0,_[],true)/*(System.EventHandler)$t4*//*this.MyEvent = (System.EventHandler)$t4*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::remove_MyEvent(System.EventHandler)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[6]/*$t2 = this.MyEvent*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*$rv = System.Delegate::Remove($t2, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    this[6] = $$[](r0,_[],true)/*(System.EventHandler)$t4*//*this.MyEvent = (System.EventHandler)$t4*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::add_NullEvent(System.EventHandler)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[7]/*$t2 = this.NullEvent*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*$rv = System.Delegate::Combine($t2, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    this[7] = $$[](r0,_[],true)/*(System.EventHandler)$t4*//*this.NullEvent = (System.EventHandler)$t4*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::remove_NullEvent(System.EventHandler)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[7]/*$t2 = this.NullEvent*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*$rv = System.Delegate::Remove($t2, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    this[7] = $$[](r0,_[],true)/*(System.EventHandler)$t4*//*this.NullEvent = (System.EventHandler)$t4*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    this[3] = 0/*this._handler1Called = 0*/;
                    this[4] = 0/*this._handler2Called = 0*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Adding event handler 1"])/*this.Log("Adding event handler 1")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = this[6]/*$t8 = this.MyEvent*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t11 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent)*/;
                    $$[](r0,this,$$[])/*$t11..ctor(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1,r0])/*$rv = System.Delegate::Combine($t8, $t11)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = $rv/*$t12 = $rv*/;
                    this[6] = $$[](r0,_[],true)/*(System.EventHandler)$t12*//*this.MyEvent = (System.EventHandler)$t12*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Adding event handler 2"])/*this.Log("Adding event handler 2")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r1 = this[6]/*$t18 = this.MyEvent*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t21 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2)*/;
                    $$[](r0,this,$$[])/*$t21..ctor(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1,r0])/*$rv = System.Delegate::Combine($t18, $t21)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $rv/*$t22 = $rv*/;
                    this[6] = $$[](r0,_[],true)/*(System.EventHandler)$t22*//*this.MyEvent = (System.EventHandler)$t22*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Adding event handler 3"])/*this.Log("Adding event handler 3")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r1 = this[6]/*$t28 = this.MyEvent*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t31 = new System.Void System.EventHandler::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3)*/;
                    $$[](r0,this,$$[])/*$t31..ctor(this, XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1,r0])/*$rv = System.Delegate::Combine($t28, $t31)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $rv/*$t32 = $rv*/;
                    this[6] = $$[](r0,_[],true)/*(System.EventHandler)$t32*//*this.MyEvent = (System.EventHandler)$t32*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Event handlers added"])/*this.Log("Event handlers added")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Firing event"])/*this.Log("Firing event")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = this[6]/*$t39 = this.MyEvent*/;
                    r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,[this, null]])/*$t39.Invoke(this, null)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = this[3]/*$t45 = this._handler1Called*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Handler 1 was not called",r0])/*this.Assert("Handler 1 was not called", $t45)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r0 = this[4]/*$t49 = this._handler2Called*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Handler 2 was not called",r0])/*this.Assert("Handler 2 was not called", $t49)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = this[5]/*$t53 = this._handler3Called*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Handler 3 was not called",r0])/*this.Assert("Handler 3 was not called", $t53)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Firing null event"])/*this.Log("Firing null event")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $f.$ecp = 20/*Frame.ExceptionCatchPointer = 20*/;
                    r0 = this[7]/*$t57 = this.NullEvent*/;
                    $ep = 18;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r1 = (t=[],t.$=_[],t)/*$t59 = new System.Void System.EventArgs::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t59..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 24;
                    r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,[this, r1]])/*$t57.Invoke(this, $t59)*/;
                    continue $ctrl;
                }
                case 20:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NullReferenceException*/)
                    {
                        $ep = 22;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 21;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 21:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 22:
                {
                    $ep = 23;
                    r0 = $f.$e/*$t60 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Got null reference exception as expected: ",r0])/*$rv = System.String::Concat("Got null reference exception as expected: ", $t60)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r0 = $rv/*$t63 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t63)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent3(System.Object,System.EventArgs)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Handler 3 called!"])/*this.Log("Handler 3 called!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    this[5] = 1/*this._handler3Called = 1*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent2(System.Object,System.EventArgs)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Handler 2 called!"])/*this.Log("Handler 2 called!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    this[4] = 1/*this._handler2Called = 1*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::EventTest_MyEvent(System.Object,System.EventArgs)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Handler 1 called!"])/*this.Log("Handler 1 called!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    this[3] = 1/*this._handler1Called = 1*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.EventTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Event test"])/*this..ctor("Event test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::Assert(System.String,System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertTrue(message, condition)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::Fail(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2]])/*XaeiOS.TestSuite.Assert::Fail(message)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int64,System.Int64)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.String,System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::AssertEquals(System.Object,System.Object)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertEquals(expected, actual)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::AssertNotNull(System.String,System.Object)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,$f[2],$f[3]])/*XaeiOS.TestSuite.Assert::AssertNotNull(message, value)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String XaeiOS.TestSuite.TestSuite::get_Name()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[1]/*V_0.1 = this.<Name>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::set_Name(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[1] = $f[2]/*this.<Name>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[2]/*V_0.1 = this.<Passed>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::set_Passed(System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[2] = $f[2]/*this.<Passed>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Exception XaeiOS.TestSuite.TestSuite::get_Exception()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[3]/*V_0.1 = this.<Exception>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::set_Exception(System.Exception)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[3] = $f[2]/*this.<Exception>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.TestSuite::Test()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,1])/*this.set_Passed(1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    this.$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*this.Setup()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 8;
                    r0 = this[0]/*$t4 = this._method*/;
                    r1 = $$[](_[],0)/*$t7 = new System.Object[0]*/;
                    r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,this,r1])/*$t4.Invoke(this, $t7)*/;
                    continue $ctrl;
                }
                case 4:
                {
                    $f.$ecp = 8/*Frame.ExceptionCatchPointer = 8*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 6:
                {
                    $ep = 7;
                    r0 = $f.$e/*$t9 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,0])/*this.set_Passed(0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.set_Exception($t9)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    this.$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*this.TearDown()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    if(($f.$e != null))
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    $ep = 11;
                    continue $ctrl;
                }
                case 11:
                {
                    return;
                }
                case 12:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6)
// : System.Collections.Generic.IList`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestSuite::GetTestCases()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r6 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest>::.ctor()()*/;
                    $$[].call(r6,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null])/*$rv = this.GetType()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r4 = $rv/*V_1.1 = $rv*/;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null])/*$rv = V_1.1.GetMethods()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    r5 = $rv/*V_2.1 = $rv*/;
                    r0 = 0/*V_7.1 = 0*/;
                    $ep = 5;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    if((r0 < r5.length))
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    return r6/*$t0*/;
                }
                case 7:
                {
                    $ep = 8;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.TestAttribute)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r1 = $rv/*$t11 = $rv*/;
                    $rv = r5[r0].$[].call(r5[r0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null,r1,0])/*$rv = V_2.1[V_7.3].IsDefined($t11, 0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    r1 = $rv/*$t13 = $rv*/;
                    if((!r1))
                    {
                        $ep = 15;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null,r4])/*$rv = System.Activator::CreateInstance(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r3 = $rv/*V_4.1 = $rv*/;
                    r3[0] = r5[r0]/*V_4.1._method = V_2.1[V_7.3]*/;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null])/*$rv = V_1.1.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r2 = $rv/*$t18 = $rv*/;
                    $rv = r5[r0].$[].call(r5[r0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null])/*$rv = V_2.1[V_7.3].get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r1 = $rv/*$t20 = $rv*/;
                    r1 = (r2 + "::" + r1)/*$t21 = System.String::Concat($t18, "::", $t20)*/;
                    $$[].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null,r1])/*V_4.1.set_Name($t21)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r6.$[].call(r6,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t),[null,null,r3])/*$t0.Add(V_4.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    r0 = (r0 + 1)/*V_7.2 = V_7.3 Add 1*/;
                    $ep = 5;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r0,r4,r5,r6],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.TestSuite::Log(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = this.get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t1 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0,$f[2]])/*XaeiOS.TestSuite.TestRunner::Log($t1, s)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::Setup()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::TearDown()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3)
// : System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::TestMethodInliningBreaksLoops()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = (t=[null,null,null],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r2[2] = this/*$t0.<>4__this = this*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t2 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = (t=[null,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.Condition::.ctor(System.Threading.Lock)($t2)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$t3..ctor($t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2[0] = r0/*$t0.done = $t3*/;
                    r2[1] = -1/*$t0.resultPivot = -1*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)($t0, XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0)*/;
                    $$[](r0,r2,$$[])/*$t6..ctor($t0, XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r3 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t7 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t6)*/;
                    $$[].call(r3,r0)/*$t7..ctor($t6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r3)/*$t7.Start()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = r2[0]/*$t8 = $t0.done*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,3000])/*$rv = $t8.Await(3000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = $rv/*V_3.1 = $rv*/;
                    if(r0)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t7.Abort()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Test did not complete in ",new Number(3)," seconds.  Infinite loop most likely still exists."])/*$rv = System.String::Concat("Test did not complete in ", box(System.Int32,3), " seconds.  Infinite loop most likely still exists.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r0 = $rv/*$t16 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r0])/*this.Fail($t16)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if((!($f[2] == $f[3])))
                    {
                        $ep = 3;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    r0 = 0/*V_0.1 = 0*/;
                    $ep = 6;
                    continue $ctrl;
                }
                case 3:
                {
                    if((!($f[2] > $f[3])))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    r0 = 1/*V_0.2 = 1*/;
                    $ep = 6;
                    continue $ctrl;
                }
                case 5:
                {
                    r0 = -1/*V_0.3 = -1*/;
                    $ep = 6;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return r0/*V_0.4*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9)
// : System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[2] + 1)/*V_1.1 = begPoint Add 1*/;
                    r1 = $f[3]/*V_2.1 = endPoint*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((r0 >= $f[3]))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 6;
                    r3 = $rv/*$t8 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.4)*/;
                    continue $ctrl;
                }
                case 5:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 6:
                {
                    $ep = 7;
                    r2 = $rv/*$t10 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t8, $t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r2 = $rv/*$t89 = $rv*/;
                    r3 = (r2 > -1)/*$ts0 = $t89 GreaterThan -1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    if(r3)
                    {
                        $ep = 44;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    if((r1 <= $f[2]))
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r3 = $rv/*$t16 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r2 = $rv/*$t18 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t16, $t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    r6 = $rv/*$t82 = $rv*/;
                    r3 = (r6 < 1)/*$ts0 = $t82 LessThan 1*/;
                    $ep = 15;
                    continue $ctrl;
                }
                case 14:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 15;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    if(r3)
                    {
                        $ep = 43;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                    if((r0 < r1))
                    {
                        $ep = 23;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 17;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 17:
                {
                    if(($f[2] == r1))
                    {
                        $ep = 22;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 18;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r2 = $rv/*V_4.1 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r3 = $rv/*$t29 = $rv*/;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1,r3])/*data.set_Item(V_2.6, $t29)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2],r2])/*data.set_Item(begPoint, V_4.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    return r1/*V_2.6*/;
                }
                case 23:
                {
                    $ep = 24;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r3 = $rv/*V_3.1 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r2 = $rv/*$t35 = $rv*/;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0,r2])/*data.set_Item(V_1.6, $t35)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1,r3])/*data.set_Item(V_2.6, V_3.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    if((r0 >= $f[3]))
                    {
                        $ep = 32;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 28;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 28:
                {
                    $ep = 29;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r3 = $rv/*$t40 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    r2 = $rv/*$t42 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t40, $t42)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    r8 = $rv/*$t75 = $rv*/;
                    r3 = (r8 > -1)/*$ts0 = $t75 GreaterThan -1*/;
                    $ep = 33;
                    continue $ctrl;
                }
                case 32:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 33;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    if(r3)
                    {
                        $ep = 42;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 34;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 34:
                {
                    if((r1 <= $f[2]))
                    {
                        $ep = 39;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 35;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    r3 = $rv/*$t48 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    r2 = $rv/*$t50 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t48, $t50)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    r9 = $rv/*$t68 = $rv*/;
                    r3 = (r9 < 1)/*$ts0 = $t68 LessThan 1*/;
                    $ep = 40;
                    continue $ctrl;
                }
                case 39:
                {
                    r7 = 0/*$t55 = 0*/;
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 40;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    if(r3)
                    {
                        $ep = 41;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 16;
                        continue $ctrl;

                    }
                }
                case 41:
                {
                    r1 = (r1 - 1)/*V_2.2 = V_2.5 Subtract 1*/;
                    $ep = 34;
                    continue $ctrl;
                }
                case 42:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.5 Add 1*/;
                    $ep = 27;
                    continue $ctrl;
                }
                case 43:
                {
                    r1 = (r1 - 1)/*V_2.3 = V_2.4 Subtract 1*/;
                    $ep = 9;
                    continue $ctrl;
                }
                case 44:
                {
                    r0 = (r0 + 1)/*V_1.3 = V_1.4 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,[$f[2], $f[3]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 > -1)/*$t3 GreaterThan -1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,[$f[2], $f[3]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 < 1)/*$t3 LessThan 1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r2,r0)
// : System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint2(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[2] + 1)/*V_1.1 = begPoint Add 1*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((r0 >= $f[3]))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 6;
                    r2 = $rv/*$t8 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.3)*/;
                    continue $ctrl;
                }
                case 5:
                {
                    r1 = 0/*$ts0 = 0*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 6:
                {
                    $ep = 7;
                    r1 = $rv/*$t10 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t),[null,null,[r2, r1]])/*$rv = comparison.Invoke($t8, $t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r1 = $rv/*$t17 = $rv*/;
                    r2 = (r1 > -1)/*$t12 = $t17 GreaterThan -1*/;
                    r1 = (r1 > -1)/*$ts0 = $t17 GreaterThan -1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    if(r1)
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    return $f[3]/*endPoint*/;
                }
                case 10:
                {
                    LogWrite("DEBUG", "1")/*System.Diagnostics.Logging::Debug("1")*/;
                    r0 = (r0 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Double XaeiOS.TestSuite.Tests.CompilerFlowControlTest::TestScore(System.Int32,System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,$f[2],$f[3]])/*$rv = this.TestScore(index, go)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r1 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 3;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    if((!(r0 < $f[2])))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    return r1/*V_0.5*/;
                }
                case 5:
                {
                    if((!$f[3]))
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    r1 = (r1 - 1)/*V_0.2 = V_0.5 Subtract 1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 7:
                {
                    r1 = (r1 - 0.15)/*V_0.3 = V_0.5 Subtract 0.15*/;
                    $ep = 8;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = (r0 - 1)/*V_1.2 = V_1.3 Subtract 1*/;
                    $ep = 3;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Compiler flow control test"])/*this..ctor("Compiler flow control test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    this[3] = 0/*this._threadTwoCompleteCondition = 0*/;
                    this[4] = 0/*this._testCompleteCondition = 0*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart)*/;
                    $$[](r0,this,$$[])/*$t6..ctor(this, XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t8 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority)($t6, 3)*/;
                    $$[].call(r1,r0,3)/*$t8..ctor($t6, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(r1,"Thread One")/*$t8.set_Name("Thread One")*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t12 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart)*/;
                    $$[](r0,this,$$[])/*$t12..ctor(this, XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t14 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority)($t12, 3)*/;
                    $$[].call(r2,r0,3)/*$t14..ctor($t12, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(r2,"Thread Two")/*$t14.set_Name("Thread Two")*/;
                    $$[].call(r1)/*$t8.Start()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,10000])/*System.Threading.Thread::Sleep(10000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(r2)/*$t14.Start()*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Main thread has begun polling for the test complete condition..."])/*this.Log("Main thread has begun polling for the test complete condition...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = this[4]/*$t20 = this._testCompleteCondition*/;
                    if((!r0))
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r0 = this[3]/*$t27 = this._threadTwoCompleteCondition*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Thread two complete condition was not set",r0])/*this.Assert("Thread two complete condition was not set", $t27)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = this[4]/*$t31 = this._testCompleteCondition*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test complete condition was not set",r0])/*this.Assert("Test complete condition was not set", $t31)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                case 12:
                {
                    $ep = 8;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,100])/*System.Threading.Thread::Sleep(100)*/;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadOneStart()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Thread one has started"])/*this.Log("Thread one has started")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Thread one has begun polling for the thread two complete condition..."])/*this.Log("Thread one has begun polling for the thread two complete condition...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = this[3]/*$t5 = this._threadTwoCompleteCondition*/;
                    if((!r0))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Thread one is now setting the test complete condition"])/*this.Log("Thread one is now setting the test complete condition")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    this[4] = 1/*this._testCompleteCondition = 1*/;
                    return;
                }
                case 6:
                {
                    $ep = 3;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,100])/*System.Threading.Thread::Sleep(100)*/;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::ThreadTwoStart()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Thread two has started"])/*this.Log("Thread two has started")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,3000])/*System.Threading.Thread::Sleep(3000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Thread two is now setting the thread two complete condition"])/*this.Log("Thread two is now setting the thread two complete condition")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    this[3] = 1/*this._threadTwoCompleteCondition = 1*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Multi-threading test"])/*this..ctor("Multi-threading test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetTypeByName()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"System.Object"])/*$rv = System.Type::GetType("System.Object")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*V_0.1 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Could not get type System.Object by name",r0])/*this.AssertNotNull("Could not get type System.Object by name", V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetType()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[],t.$=_[],t)/*$t0 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r0)/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = $t0.GetType()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*V_1.1 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"GetType() did not return an object of type Type!",(!(r0 == null))])/*this.Assert("GetType() did not return an object of type Type!", BooleanNot V_1.1 ValueEquality null)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = V_1.1.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t12 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"System.Object",r0])/*this.AssertEquals("System.Object", $t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetMethods()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = $rv/*$t1 = $rv*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null])/*$rv = $t1.GetMethods()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r2 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    if((r0 < r2.length))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    return;
                }
                case 6:
                {
                    $ep = 7;
                    $rv = r2[r0].$[].call(r2[r0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null])/*$rv = V_0.1[V_1.3].get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r1 = $rv/*$t11 = $rv*/;
                    r1 = ("Found method: " + r1)/*$t12 = System.String::Concat("Found method: ", $t11)*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null,r1])/*this.Log($t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0,r2)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestGetProperties()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = $rv/*$t1 = $rv*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null])/*$rv = $t1.GetProperties()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r2 = $rv/*V_0.1 = $rv*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    if((r0 < r2.length))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    return;
                }
                case 6:
                {
                    $ep = 7;
                    $rv = r2[r0].$[].call(r2[r0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null])/*$rv = V_0.1[V_1.3].get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r1 = $rv/*$t11 = $rv*/;
                    r1 = ("Found property: " + r1)/*$t12 = System.String::Concat("Found property: ", $t11)*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t),[null,null,r1])/*this.Log($t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r0,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestSetProperty()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"old value"])/*this.set_MyProperty("old value")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t5 = $rv*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = $t5.GetProperties()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = $rv/*$t6 = $rv*/;
                    $rv = r0[0].$[].call(r0[0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = $t6[0].get_Name()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t9 = $rv*/;
                    r0 = ("Trying to set property using reflection: " + r0)/*$t10 = System.String::Concat("Trying to set property using reflection: ", $t9)*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r1 = $$[](_[],1)/*V_0.1 = new System.Object[1]*/;
                    r1[0] = "new value"/*V_0.1[0] = "new value"*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $rv/*$t16 = $rv*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = $t16.GetProperties()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r0 = $rv/*$t17 = $rv*/;
                    $rv = r0[0].$[].call(r0[0],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = $t17[0].get_SetMethod()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $rv/*$t20 = $rv*/;
                    r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,this,r1])/*$t20.Invoke(this, V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = this[4]/*V_1.1 = this.<MyProperty>k__BackingField*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1[0],r0])/*this.AssertEquals(V_0.1[0], V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestIsDefinedOnType()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = $rv/*$t2 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t5 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r1," did not have attribute ",r0])/*$rv = System.String::Concat($t2, " did not have attribute ", $t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = $rv/*$t6 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t8 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r1 = $rv/*$t10 = $rv*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r1,0])/*$rv = $t8.IsDefined($t10, 0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $rv/*$t12 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r2,r0])/*this.Assert($t6, $t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::TestActivator()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(System.Object)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t1 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*$rv = System.Activator::CreateInstance($t1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*V_0.1 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,_[]])/*$rv = System.Type::GetTypeFromHandle(System.Object)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = $rv/*$t5 = $rv*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$rv = V_0.1.GetType()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t6 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1,r0])/*this.AssertEquals($t5, $t6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.String XaeiOS.TestSuite.Tests.ReflectionTestSuite::get_MyProperty()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[4]/*V_0.1 = this.<MyProperty>k__BackingField*/;
                    return r0/*V_0.1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::set_MyProperty(System.String)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    this[4] = $f[2]/*this.<MyProperty>k__BackingField = value*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Throwing exception"])/*this.Log("Throwing exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown exception")*/;
                    $$[].call(r0,"Purposefully thrown exception")/*$t3..ctor("Purposefully thrown exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t3*/;
                }
                case 4:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NullReferenceException*/)
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $f.$e/*$t10 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Expected exception caught: ",r0])/*$rv = System.String::Concat("Expected exception caught: ", $t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 11;
                    r0 = $rv/*$t13 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t13)*/;
                    continue $ctrl;
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $f.$e/*$t4 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Did not expect a NullReferenceException: ",r0])/*$rv = System.String::Concat("Did not expect a NullReferenceException: ", $t4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $rv/*$t7 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Fail($t7)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test passed"])/*this.Log("Test passed")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestExceptionTypeHandlers2()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Throwing exception"])/*this.Log("Throwing exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown exception")*/;
                    $$[].call(r0,"Purposefully thrown exception")/*$t3..ctor("Purposefully thrown exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t3*/;
                }
                case 4:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NullReferenceException*/)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.SystemException*/)
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 7;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 7:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 8:
                {
                    $ep = 9;
                    r0 = $f.$e/*$t14 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Expected exception caught: ",r0])/*$rv = System.String::Concat("Expected exception caught: ", $t14)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 14;
                    r0 = $rv/*$t17 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t17)*/;
                    continue $ctrl;
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $f.$e/*$t10 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Did not expect a SystemException: ",r0])/*$rv = System.String::Concat("Did not expect a SystemException: ", $t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 14;
                    r0 = $rv/*$t13 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Fail($t13)*/;
                    continue $ctrl;
                }
                case 12:
                {
                    $ep = 13;
                    r0 = $f.$e/*$t4 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Did not expect a NullReferenceException: ",r0])/*$rv = System.String::Concat("Did not expect a NullReferenceException: ", $t4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t7 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Fail($t7)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test passed"])/*this.Log("Test passed")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::FirstTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Throwing exception"])/*this.Log("Throwing exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown exception")*/;
                    $$[].call(r0,"Purposefully thrown exception")/*$t3..ctor("Purposefully thrown exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t3*/;
                }
                case 4:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 6:
                {
                    $ep = 7;
                    r0 = $f.$e/*$t4 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = $t4.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $rv/*$t7 = $rv*/;
                    r0 = ("Expected exception caught: " + r0)/*$t8 = System.String::Concat("Expected exception caught: ", $t7)*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 3/*Frame.ExceptionCatchPointer = 3*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*this.SecondTestHelper()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 14;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"NullReferenceException not thrown!"])/*this.Fail("NullReferenceException not thrown!")*/;
                    continue $ctrl;
                }
                case 3:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NullReferenceException*/)
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 5:
                {
                    r2 = $f.$e/*$t3 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    if((!r2))
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                }
                case 6:
                {
                    r1 = 1/*$ts0 = 1*/;
                    $ep = 9;
                    continue $ctrl;
                }
                case 7:
                {
                    $ep = 8;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t3.get_Message()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    r0 = (r0 == "YES")/*$t6 = System.String::op_Equality($t4, "YES")*/;
                    r1 = (!r0)/*$ts0 = BooleanNot $t6*/;
                    $ep = 9;
                    continue $ctrl;
                }
                case 9:
                {
                    if(r1)
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Expected a NullReferenceException.  Instead got: ",r2])/*$rv = System.String::Concat("Expected a NullReferenceException.  Instead got: ", $t3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 14;
                    r0 = $rv/*$t15 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*this.Fail($t15)*/;
                    continue $ctrl;
                }
                case 12:
                {
                    $ep = 13;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Expected NullReferenceException caught: ",r2])/*$rv = System.String::Concat("Expected NullReferenceException caught: ", $t3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t12 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*this.Log($t12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::SecondTestHelper()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Throwing NullReferenceException"])/*this.Log("Throwing NullReferenceException")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.NullReferenceException::.ctor(System.String)("YES")*/;
                    $$[].call(r0,"YES")/*$t3..ctor("YES")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t3*/;
                }
                case 4:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NotSupportedException*/)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 6:
                {
                    $ep = 7;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"We should not catch a NullReferenceException in this catch(NotSupportedException e) handler!"])/*this.Fail("We should not catch a NullReferenceException in this catch(NotSupportedException e) handler!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinally()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 5;
                    $f.$ecp = 2/*Frame.ExceptionCatchPointer = 2*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"In try block"])/*this.Log("In try block")*/;
                    continue $ctrl;
                }
                case 2:
                {
                    $f.$ecp = 5/*Frame.ExceptionCatchPointer = 5*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 4:
                {
                    $ep = 5;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"In catch block"])/*this.Log("In catch block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"In finally block"])/*this.Log("In finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    if(($f.$e != null))
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 7;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 7:
                {
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Outside of try-catch-finally"])/*this.Log("Outside of try-catch-finally")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    return;
                }
                case 10:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicTryCatchFinallyThrowException()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In try block"])/*this.Log("In try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t3 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown")*/;
                    $$[].call(r0,"Purposefully thrown")/*$t3..ctor("Purposefully thrown")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t3*/;
                }
                case 4:
                {
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 6:
                {
                    $ep = 7;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In catch block"])/*this.Log("In catch block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In finally block"])/*this.Log("In finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    if(($f.$e != null))
                    {
                        $ep = 11;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Outside of try-catch-finally"])/*this.Log("Outside of try-catch-finally")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                case 11:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestBasicNestedTryCatchFinally()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In outer try block"])/*this.Log("In outer try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $f.$ecp = 5/*Frame.ExceptionCatchPointer = 5*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In inner try block"])/*this.Log("In inner try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t6 = new System.Void System.Exception::.ctor()()*/;
                    $$[].call(r0)/*$t6..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r0/*$t6*/;
                }
                case 5:
                {
                    $f.$ecp = 11/*Frame.ExceptionCatchPointer = 11*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 7:
                {
                    $f.$ecp = 16/*Frame.ExceptionCatchPointer = 16*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 8;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 8:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 9:
                {
                    $ep = 16;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In outer catch block"])/*this.Log("In outer catch block")*/;
                    continue $ctrl;
                }
                case 10:
                {
                    $ep = 11;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In inner catch block"])/*this.Log("In inner catch block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In inner finally block"])/*this.Log("In inner finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    if(($f.$e != null))
                    {
                        $ep = 22;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 13;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 13:
                {
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t10 = new System.Void System.Exception::.ctor()()*/;
                    $ep = 14;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $$[].call(r0)/*$t10..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    throw r0/*$t10*/;
                }
                case 16:
                {
                    $ep = 17;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In outer finally block"])/*this.Log("In outer finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    if(($f.$e != null))
                    {
                        $ep = 21;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 18;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Did not enter inner finally block",r1])/*this.Assert("Did not enter inner finally block", V_0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Did not enter outer finally block",1])/*this.Assert("Did not enter outer finally block", 1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    return;
                }
                case 21:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 22:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestComplexNestedTryCatchFinally()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 8/*Frame.ExceptionCatchPointer = 8*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In outer try block"])/*this.Log("In outer try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $f.$ecp = 17/*Frame.ExceptionCatchPointer = 17*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In inner try block"])/*this.Log("In inner try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $f.$ecp = 6/*Frame.ExceptionCatchPointer = 6*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In inner most try block"])/*this.Log("In inner most try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t7 = new System.Void System.Exception::.ctor(System.String)("Thrown from inner most try block")*/;
                    $$[].call(r0,"Thrown from inner most try block")/*$t7..ctor("Thrown from inner most try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    throw r0/*$t7*/;
                }
                case 6:
                {
                    $f.$ecp = 12/*Frame.ExceptionCatchPointer = 12*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 11;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 7;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 7:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 8:
                {
                    $f.$ecp = 18/*Frame.ExceptionCatchPointer = 18*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 10:
                {
                    $ep = 18;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In outer catch block"])/*this.Log("In outer catch block")*/;
                    continue $ctrl;
                }
                case 11:
                {
                    $ep = 12;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In inner most catch block"])/*this.Log("In inner most catch block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $f.$ecp = 17/*Frame.ExceptionCatchPointer = 17*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In inner most finally block"])/*this.Log("In inner most finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    if(($f.$e != null))
                    {
                        $ep = 26;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 14;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Throwing exception from inner try block"])/*this.Log("Throwing exception from inner try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t14 = new System.Void System.Exception::.ctor(System.String)("Thrown from inner try block")*/;
                    $$[].call(r0,"Thrown from inner try block")/*$t14..ctor("Thrown from inner try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    throw r0/*$t14*/;
                }
                case 17:
                {
                    $ep = 18;
                    $f.$ecp = 8/*Frame.ExceptionCatchPointer = 8*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In inner finally block"])/*this.Log("In inner finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In outer finally block"])/*this.Log("In outer finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    if(($f.$e != null))
                    {
                        $ep = 25;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 20;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 20:
                {
                    $ep = 22;
                    continue $ctrl;
                }
                case 21:
                {
                    return;
                }
                case 22:
                {
                    if(($f.$e != null))
                    {
                        $ep = 24;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 23;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 23:
                {
                }
                case 24:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 25:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 26:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::TestFinallyExecutesAfterCatchBlockThrows2()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In try block"])/*this.Log("In try block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t4 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown")*/;
                    $$[].call(r0,"Purposefully thrown")/*$t4..ctor("Purposefully thrown")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    throw r0/*$t4*/;
                }
                case 4:
                {
                    $f.$ecp = 14/*Frame.ExceptionCatchPointer = 14*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 11;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 6:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 7;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 7:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 8:
                {
                    $f.$e = null/*Frame.Exception = null*/;
                    $ep = 9;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Finally block did not execute when catch block threw",r0])/*this.Assert("Finally block did not execute when catch block threw", V_0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    return;
                }
                case 11:
                {
                    $ep = 12;
                    $f.$e = null/*Frame.Exception = null*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In catch block"])/*this.Log("In catch block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t9 = new System.Void System.Exception::.ctor(System.String)("Purposefully thrown again")*/;
                    $$[].call(r0,"Purposefully thrown again")/*$t9..ctor("Purposefully thrown again")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    throw r0/*$t9*/;
                    $ep = 14;
                    continue $ctrl;
                }
                case 14:
                {
                    $ep = 15;
                    $f.$ecp = 6/*Frame.ExceptionCatchPointer = 6*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In finally block"])/*this.Log("In finally block")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    if(($f.$e != null))
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                }
                case 17:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $rv = null.$[].call(null,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = null.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t2 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 11;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Expected NullReferenceException to be thrown"])/*this.Fail("Expected NullReferenceException to be thrown")*/;
                    continue $ctrl;
                }
                case 4:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.NullReferenceException*/)
                    {
                        $ep = 9;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Exception*/)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $f.$e/*$t9 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Expected NullReferenceException to be thrown.  Instead got: ",r0])/*$rv = System.String::Concat("Expected NullReferenceException to be thrown.  Instead got: ", $t9)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 11;
                    r0 = $rv/*$t12 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Fail($t12)*/;
                    continue $ctrl;
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $f.$e/*$t5 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Caught NullReferenceException as expected: ",r0])/*$rv = System.String::Concat("Caught NullReferenceException as expected: ", $t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = $rv/*$t8 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*this.Log($t8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Null reference exception test"])/*this..ctor("Null reference exception test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[null,null],t.$=_[],t)/*$t1 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    this[3] = r0/*this._mainLock = $t1*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t4 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart)*/;
                    $$[](r0,this,$$[])/*$t4..ctor(this, XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r1 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority)($t4, 3)*/;
                    $$[].call(r1,r0,3)/*$t6..ctor($t4, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(r1,"Controller Thread")/*$t6.set_Name("Controller Thread")*/;
                    $$[].call(r1)/*$t6.Start()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,2000])/*System.Threading.Thread::Sleep(2000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Main thread is trying to acquire the main lock..."])/*this.Log("Main thread is trying to acquire the main lock...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = this[3]/*$t12 = this._mainLock*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t12.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Main thread got the main lock..."])/*this.Log("Main thread got the main lock...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::ControllerThreadStart()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Controller thread has begun"])/*this.Log("Controller thread has begun")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = this[3]/*$t3 = this._mainLock*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t3.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Controller thread has acquired the main lock"])/*this.Log("Controller thread has acquired the main lock")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,3000])/*System.Threading.Thread::Sleep(3000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Controller thread is now releasing the main lock"])/*this.Log("Controller thread is now releasing the main lock")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = this[3]/*$t10 = this._mainLock*/;
                    $$[].call(r0)/*$t10.Release()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Controller thread is now exiting"])/*this.Log("Controller thread is now exiting")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Synchronization test"])/*this..ctor("Synchronization test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7)
// : System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    this[3] = 1/*this._testRunning = 1*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"Creating DOM elements"])/*this.Log("Creating DOM elements")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"DIV"])/*$rv = System.Browser.Dom.DomManager::CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r2 = $rv/*V_0.1 = $rv*/;
                    $rv = r2.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = $rv/*$t6 = $rv*/;
                    r1.backgroundColor = "blue"/*$t6.set_BackgroundColor("blue")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $rv = r2.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r1 = $rv/*$t8 = $rv*/;
                    r1.top = "250px"/*$t8.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $rv = r2.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r1 = $rv/*$t10 = $rv*/;
                    r1.left = "150px"/*$t10.set_Left("150px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"DIV"])/*$rv = System.Browser.Dom.DomManager::CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r3 = $rv/*V_1.1 = $rv*/;
                    $rv = r3.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r1 = $rv/*$t14 = $rv*/;
                    r1.backgroundColor = "red"/*$t14.set_BackgroundColor("red")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $rv = r3.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r1 = $rv/*$t16 = $rv*/;
                    r1.top = "250px"/*$t16.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $rv = r3.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r1 = $rv/*$t18 = $rv*/;
                    r1.left = "150px"/*$t18.set_Left("150px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"DIV"])/*$rv = System.Browser.Dom.DomManager::CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r4 = $rv/*V_2.1 = $rv*/;
                    $rv = r4.style/*$rv = V_2.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r1 = $rv/*$t22 = $rv*/;
                    r1.backgroundColor = "orange"/*$t22.set_BackgroundColor("orange")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $rv = r4.style/*$rv = V_2.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r1 = $rv/*$t24 = $rv*/;
                    r1.top = "250px"/*$t24.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $rv = r4.style/*$rv = V_2.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    r1 = $rv/*$t26 = $rv*/;
                    r1.left = "350px"/*$t26.set_Left("350px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"DIV"])/*$rv = System.Browser.Dom.DomManager::CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r5 = $rv/*V_3.1 = $rv*/;
                    $rv = r5.style/*$rv = V_3.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r1 = $rv/*$t30 = $rv*/;
                    r1.backgroundColor = "green"/*$t30.set_BackgroundColor("green")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $rv = r5.style/*$rv = V_3.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r1 = $rv/*$t32 = $rv*/;
                    r1.top = "250px"/*$t32.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    $rv = r5.style/*$rv = V_3.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r1 = $rv/*$t34 = $rv*/;
                    r1.left = "350px"/*$t34.set_Left("350px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    document/*System.Browser.Dom.DomManager::get_Document()*/;
                    r6 = document.body/*V_5.1 = System.Browser.Dom.DomManager::GetDocumentBody()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    r7 = $$[](_[],4)/*V_11.1 = new System.Browser.Dom.IDomElement[4]*/;
                    r7[0] = r2/*V_11.1[0] = V_0.1*/;
                    r7[1] = r3/*V_11.1[1] = V_1.1*/;
                    r7[2] = r4/*V_11.1[2] = V_2.1*/;
                    r7[3] = r5/*V_11.1[3] = V_3.1*/;
                    r1 = (t=[null,null,null],t.$=_[],t)/*$t47 = new System.Void System.Threading.Semaphore::.ctor(System.Int32)((System.Int32)V_11.1.Length)*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,r7.length])/*$t47..ctor((System.Int32)V_11.1.Length)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    this[5] = r1/*this._semaphore = $t47*/;
                    r0 = 1/*V_7.1 = 1*/;
                    r4 = (t=[null],t.$=_[],t)/*$t49 = new System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1::.ctor()()*/;
                    $$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null])/*$t49..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    r4[0] = 0/*$t49.i = 0*/;
                    $ep = 34;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    r1 = r4[0]/*$t51 = $t49.i*/;
                    if((r1 < r7.length))
                    {
                        $ep = 41;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 35;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 35:
                {
                    $ep = 36;
                    r1 = this[4]/*$t59 = this._duration*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"Sleeping for ",new Number(r1)," seconds"])/*$rv = System.String::Concat("Sleeping for ", box(System.Int32,$t59), " seconds")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    r1 = $rv/*$t62 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,r1])/*this.Log($t62)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    r1 = this[4]/*$t64 = this._duration*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,(r1 * 1000)])/*System.Threading.Thread::Sleep($t64 Multiply 1000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    $ep = 39;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,"Woke up!"])/*this.Log("Woke up!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    $ep = 40;
                    this[3] = 0/*this._testRunning = 0*/;
                    r1 = this[5]/*$t72 = this._semaphore*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null,r7.length])/*$t72.Acquire((System.Int32)V_11.1.Length)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    return;
                }
                case 41:
                {
                    $ep = 42;
                    r2 = (t=[null,null,false,null],t.$=_[],t)/*$t75 = new System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t),[null,null])/*$t75..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    $ep = 43;
                    r2[0] = r4/*$t75.CS$<>8__locals2 = $t49*/;
                    r2[3] = this/*$t75.<>4__this = this*/;
                    r1 = r4[0]/*$t77 = $t49.i*/;
                    r2[1] = r7[r1]/*$t75.element = V_11.1[$t77]*/;
                    r1 = r2[1]/*$t79 = $t75.element*/;
                    $rv = r1.style/*$rv = $t79.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 43:
                {
                    $ep = 44;
                    r1 = $rv/*$t80 = $rv*/;
                    r1.height = "90px"/*$t80.set_Height("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 44:
                {
                    $ep = 45;
                    r1 = r2[1]/*$t82 = $t75.element*/;
                    $rv = r1.style/*$rv = $t82.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 45:
                {
                    $ep = 46;
                    r1 = $rv/*$t83 = $rv*/;
                    r1.width = "90px"/*$t83.set_Width("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 46:
                {
                    $ep = 47;
                    r1 = r2[1]/*$t85 = $t75.element*/;
                    $rv = r1.style/*$rv = $t85.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 47:
                {
                    $ep = 48;
                    r1 = $rv/*$t86 = $rv*/;
                    r1.position = "absolute"/*$t86.set_Position("absolute")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 48:
                {
                    $ep = 49;
                    r2[2] = r0/*$t75.clockwiseForThisElement = V_7.3*/;
                    r1 = r2[1]/*$t88 = $t75.element*/;
                    r6.appendChild(r1)/*V_5.1.AppendChild($t88)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 49:
                {
                    $ep = 50;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t90 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)($t75, XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0)*/;
                    $$[](r1,r2,$$[])/*$t90..ctor($t75, XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 50:
                {
                    $ep = 51;
                    r3 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t92 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority)($t90, 3)*/;
                    $$[].call(r3,r1,3)/*$t92..ctor($t90, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 51:
                {
                    $ep = 52;
                    r1 = r2[1]/*$t94 = $t75.element*/;
                    $rv = r1.style/*$rv = $t94.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 52:
                {
                    $ep = 53;
                    r1 = $rv/*$t95 = $rv*/;
                    $rv = r1.backgroundColor/*$rv = $t95.get_BackgroundColor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 53:
                {
                    $ep = 54;
                    r1 = $rv/*$t96 = $rv*/;
                    r1 = ("DomTest animation: " + r1)/*$t97 = System.String::Concat("DomTest animation: ", $t96)*/;
                    $$[].call(r3,r1)/*$t92.set_Name($t97)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 54:
                {
                    $$[].call(r3)/*$t92.Start()*/;
                    r1 = r4[0]/*$t99 = $t49.i*/;
                    r4[0] = (r1 + 1)/*$t49.i = $t99 Add 1*/;
                    r0 = (!r0)/*V_7.2 = BooleanNot V_7.3*/;
                    $ep = 34;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r2,r3,r4,r5,r0,r6,r7],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5)
// : System.Void XaeiOS.TestSuite.Tests.DomTest::MoveElement(System.String,System.Browser.Dom.IDomElement,System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = this[5]/*$t1 = this._semaphore*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t),[null,null])/*$t1.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $f[3].style/*$rv = element.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r2 = $rv/*$t3 = $rv*/;
                    $rv = r2.left/*$rv = $t3.get_Left()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2 = $rv/*$t4 = $rv*/;
                    $rv = parseInt(r2)/*$rv = System.NativeNumber::ParseInt($t4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r5 = $rv/*V_0.1 = $rv*/;
                    $rv = $f[3].style/*$rv = element.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r2 = $rv/*$t7 = $rv*/;
                    $rv = r2.top/*$rv = $t7.get_Top()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r2 = $rv/*$t8 = $rv*/;
                    $rv = parseInt(r2)/*$rv = System.NativeNumber::ParseInt($t8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r4 = $rv/*V_1.1 = $rv*/;
                    r0 = 0/*V_2.1 = 0*/;
                    $ep = 9;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    r2 = this[3]/*V_6.1 = this._testRunning*/;
                    if(r2)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r2 = this[5]/*$t14 = this._semaphore*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t),[null,null])/*$t14.Release()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    return;
                }
                case 12:
                {
                    r1 = (r0 * 3.14)/*V_3.1 = (System.Double)V_2.3 Multiply 3.14*/;
                    if((!$f[4]))
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 13;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 13:
                {
                    r1 = ((r0 * 3.14) * -1)/*V_3.2 = (System.Double)V_2.3 Multiply 3.14 Multiply -1*/;
                    $ep = 14;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $rv = $f[3].style/*$rv = element.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r3 = $rv/*$t27 = $rv*/;
                    $rv = Math.sin((r1 / 8))/*$rv = System.Math::Sin((System.Double)V_3.3 Divide 8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r2 = $rv/*$t31 = $rv*/;
                    $rv = Math.floor((r5 + (r2 * 50)))/*$rv = System.Math::Floor(V_0.1 Add $t31 Multiply 50)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r2 = $rv/*V_7.1 = $rv*/;
                    r2 = r2.toString()/*$t37 = V_7.1.ToString()*/;
                    r2 = (r2 + "px")/*$t39 = System.String::Concat($t37, "px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r3.left = r2/*$t27.set_Left($t39)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $rv = $f[3].style/*$rv = element.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r3 = $rv/*$t41 = $rv*/;
                    $rv = Math.cos((r1 / 8))/*$rv = System.Math::Cos((System.Double)V_3.3 Divide 8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    r2 = $rv/*$t45 = $rv*/;
                    $rv = Math.floor((r4 + (r2 * 50)))/*$rv = System.Math::Floor(V_1.1 Add $t45 Multiply 50)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    r2 = $rv/*V_7.2 = $rv*/;
                    r2 = r2.toString()/*$t51 = V_7.2.ToString()*/;
                    r2 = (r2 + "px")/*$t53 = System.String::Concat($t51, "px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r3.top = r2/*$t41.set_Top($t53)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    $rv = $f[3].style/*$rv = element.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r3 = $rv/*$t55 = $rv*/;
                    $rv = Math.sin((r1 / 30))/*$rv = System.Math::Sin((System.Double)V_3.3 Divide 30)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    r2 = $rv/*$t59 = $rv*/;
                    $rv = Math.abs(r2)/*$rv = System.Math::Abs($t59)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r2 = $rv/*$t61 = $rv*/;
                    $rv = Math.min((r2 + 0.2),1)/*$rv = System.Math::Min((System.Double)(System.Double)$t61 Add 0.2, 1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    r2 = $rv/*V_8.1 = $rv*/;
                    $rv = r2.$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t),[null,null])/*$rv = V_8.1.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r2 = $rv/*$t70 = $rv*/;
                    r3.opacity = r2/*$t55.set_Opacity($t70)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 9;
                    r0 = (r0 + 1)/*V_2.2 = V_2.3 Add 1*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t),[null,null,33])/*System.Threading.Thread::Sleep(33)*/;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r1,r3,r0,r4,r5],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.DomTest::.ctor(System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Document Object Model test"])/*this..ctor("Document Object Model test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    this[4] = $f[2]/*this._duration = duration*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4)
// : System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,"Creating DOM resources"])/*this.Log("Creating DOM resources")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r2 = document/*V_4.1 = System.Browser.Dom.DomManager::get_Document()*/;
                    r3 = document.body/*V_5.1 = System.Browser.Dom.DomManager::GetDocumentBody()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = r2.createElement("DIV")/*$rv = V_4.1.CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1 = $rv/*V_0.1 = $rv*/;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t6 = $rv*/;
                    r0.backgroundColor = "purple"/*$t6.set_BackgroundColor("purple")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = $rv/*$t8 = $rv*/;
                    r0.height = "90px"/*$t8.set_Height("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r0 = $rv/*$t10 = $rv*/;
                    r0.width = "90px"/*$t10.set_Width("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r0 = $rv/*$t12 = $rv*/;
                    r0.position = "absolute"/*$t12.set_Position("absolute")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t14 = $rv*/;
                    r0.top = "250px"/*$t14.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    $rv = r1.style/*$rv = V_0.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = $rv/*$t16 = $rv*/;
                    r0.left = "350px"/*$t16.set_Left("350px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r3.appendChild(r1)/*V_5.1.AppendChild(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r4 = (t=[null],t.$=_[],t)/*$t18 = new System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement)(V_0.1)*/;
                    $$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,r1])/*$t18..ctor(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,r4])/*System.Resources.ResourceManager::RegisterResource($t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $rv = r2.createElement("DIV")/*$rv = V_4.1.CreateElement("DIV")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r1 = $rv/*V_1.1 = $rv*/;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    r0 = $rv/*$t21 = $rv*/;
                    r0.backgroundColor = "green"/*$t21.set_BackgroundColor("green")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r0 = $rv/*$t23 = $rv*/;
                    r0.height = "90px"/*$t23.set_Height("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r0 = $rv/*$t25 = $rv*/;
                    r0.width = "90px"/*$t25.set_Width("90px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r0 = $rv/*$t27 = $rv*/;
                    r0.position = "absolute"/*$t27.set_Position("absolute")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r0 = $rv/*$t29 = $rv*/;
                    r0.top = "250px"/*$t29.set_Top("250px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    $rv = r1.style/*$rv = V_1.1.get_Style()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    r0 = $rv/*$t31 = $rv*/;
                    r0.left = "450px"/*$t31.set_Left("450px")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    r3.appendChild(r1)/*V_5.1.AppendChild(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    $ep = 34;
                    r0 = (t=[null],t.$=_[],t)/*$t33 = new System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement)(V_1.1)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,r1])/*$t33..ctor(V_1.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    $ep = 35;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,r0])/*System.Resources.ResourceManager::RegisterResource($t33)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,"Sleeping for 1 second"])/*this.Log("Sleeping for 1 second")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,1000])/*System.Threading.Thread::Sleep(1000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,"Cleaning up one resource and leaving the other to be cleaned when the SIP exits"])/*this.Log("Cleaning up one resource and leaving the other to be cleaned when the SIP exits")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    $ep = 39;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null])/*$t18.Dispose()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    $ep = 40;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,"Resource freed"])/*this.Log("Resource freed")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    $ep = 41;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,"Sleeping for 1 second"])/*this.Log("Sleeping for 1 second")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 41:
                {
                    $ep = 42;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t),[null,null,1000])/*System.Threading.Thread::Sleep(1000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3,r4],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ResourceTest::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null,"Resource test"])/*this..ctor("Resource test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = this[0]/*$t1 = this._element*/;
                    if((r0 == null))
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = this[0]/*$t6 = this._element*/;
                    $rv = r0.parentNode/*$rv = $t6.get_ParentNode()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = $rv/*$t7 = $rv*/;
                    if((r0 == null))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = this[0]/*$t12 = this._element*/;
                    $rv = r0.parentNode/*$rv = $t12.get_ParentNode()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = $rv/*$t13 = $rv*/;
                    r1 = this[0]/*$t15 = this._element*/;
                    r0.removeChild(r1)/*$t13.RemoveChild($t15)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    this[0] = null/*this._element = null*/;
                    $ep = 7;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r0)
// : System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r1 = this[0]/*$t1 = this._element*/;
                    if((r1 == null))
                    {
                        $ep = 3;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 2:
                {
                    $ep = 4;
                    r1 = this[0]/*$t6 = this._element*/;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r0],t.$=null,t),[null,null])/*$rv = $t6.ToString()*/;
                    continue $ctrl;
                }
                case 3:
                {
                    r0 = "[free]"/*V_0.2 = "[free]"*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    r0 = $rv/*V_0.1 = $rv*/;
                    return r0/*V_0.3*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.DomElementResource::.ctor(System.Browser.Dom.IDomElement)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    this[0] = $f[2]/*this._element = element*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestOverrideInterfaceMethodOfAbstractBaseClass()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = r0.$.i[][].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,6])/*$rv = $t0.AddTen(6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = $rv/*$t4 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,16,r0])/*this.AssertEquals(16, $t4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::TestStaticConstructorsWorked()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = _[]/*$t2 = XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1.property*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Static constructor for StaticCosntructorClass1 was not invoked",r0])/*this.AssertNotNull("Static constructor for StaticCosntructorClass1 was not invoked", $t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = _[]/*$t5 = XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2.property*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Static constructor for StaticCosntructorClass2 was not invoked",r0])/*this.AssertNotNull("Static constructor for StaticCosntructorClass2 was not invoked", $t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = 0/*V_0.1 = 0*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((r0 < 10))
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    return $f[2]/*x*/;
                }
                case 4:
                {
                    $f[2] = ($f[2] + 1)/*x = x Add 1*/;
                    r0 = (r0 + 1)/*V_0.2 = V_0.3 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.cctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[],t.$=_[],t)/*$t0 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r0)/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    _[] = r0/*XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1.property = $t0*/;
                    r0 = _[]/*$t2 = XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1.property*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In static constructor for StaticConstructorClass1.  property is ",r0])/*$rv = System.String::Concat("In static constructor for StaticConstructorClass1.  property is ", $t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    LogWrite("DEBUG", r0)/*System.Diagnostics.Logging::Debug($t3)*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.cctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[],t.$=_[],t)/*$t0 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r0)/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    _[] = r0/*XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2.property = $t0*/;
                    r0 = _[]/*$t2 = XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2.property*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In static constructor for StaticConstructorClass2.  property is ",r0])/*$rv = System.String::Concat("In static constructor for StaticConstructorClass2.  property is ", $t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    LogWrite("DEBUG", r0)/*System.Diagnostics.Logging::Debug($t3)*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.TestAttribute::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r1,r2,r0,r3)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = this[4]/*$t3 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,"Creating ",new Number(r1)," threads"])/*$rv = System.String::Concat("Creating ", box(System.Int32,$t3), " threads")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = $rv/*$t6 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r1])/*this.Log($t6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r1 = this[4]/*$t8 = this._numberOfThreads*/;
                    r3 = $$[](_[],r1)/*V_0.1 = new System.Threading.Thread[$t8]*/;
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    r1 = this[4]/*$t12 = this._numberOfThreads*/;
                    if((r0 < r1))
                    {
                        $ep = 23;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    $ep = 6;
                    this[10] = 0/*this._startedThreads = 0*/;
                    r1 = (t=[],t.$=_[],t)/*$t18 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r1)/*$t18..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    this[3] = r1/*this._startedThreadsLock = $t18*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t20 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null])/*$t20..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    this[7] = r1/*this._allThreadsStartedLock = $t20*/;
                    r1 = this[7]/*$t23 = this._allThreadsStartedLock*/;
                    r2 = (t=[null,null],t.$=_[],t)/*$t24 = new System.Void System.Threading.Condition::.ctor(System.Threading.Lock)($t23)*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r1])/*$t24..ctor($t23)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    this[8] = r2/*this._allThreadsStartedCondition = $t24*/;
                    r1 = this[7]/*$t26 = this._allThreadsStartedLock*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null])/*$t26.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r1 = this[4]/*$t30 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,"Starting ",new Number(r1)," threads"])/*$rv = System.String::Concat("Starting ", box(System.Int32,$t30), " threads")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r1 = $rv/*$t33 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r1])/*this.Log($t33)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 12;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    r1 = this[4]/*$t36 = this._numberOfThreads*/;
                    if((r0 < r1))
                    {
                        $ep = 22;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 13;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r1 = this[8]/*$t40 = this._allThreadsStartedCondition*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null])/*$t40.Await()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r1 = this[7]/*$t42 = this._allThreadsStartedLock*/;
                    $$[].call(r1)/*$t42.Release()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,"Waiting for all threads to finish"])/*this.Log("Waiting for all threads to finish")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r1 = this[9]/*$t46 = this._semaphore*/;
                    r2 = this[4]/*$t48 = this._numberOfThreads*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r2])/*$t46.Acquire($t48)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r1 = this[5]/*$t51 = this._failedThreads*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,new Number(r1)," threads failed the calculation"])/*$rv = System.String::Concat(box(System.Int32,$t51), " threads failed the calculation")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r2 = $rv/*$t54 = $rv*/;
                    r1 = this[5]/*$t56 = this._failedThreads*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r2,(r1 == 0)])/*this.Assert($t54, $t56 ValueEquality 0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r1 = this[4]/*$t63 = this._numberOfThreads*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,"All ",new Number(r1)," threads finished"])/*$rv = System.String::Concat("All ", box(System.Int32,$t63), " threads finished")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r1 = $rv/*$t66 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t),[null,null,r1])/*this.Log($t66)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    return;
                }
                case 22:
                {
                    $$[].call(r3[r0])/*V_0.1[V_1.6].Start()*/;
                    r0 = (r0 + 1)/*V_1.3 = V_1.6 Add 1*/;
                    $ep = 12;
                    continue $ctrl;
                }
                case 23:
                {
                    $ep = 24;
                    r1 = (t=[null,null,null,null],t.$=_[],t)/*$t72 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work)*/;
                    $$[](r1,this,$$[])/*$t72..ctor(this, XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r2 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t74 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority)($t72, 3)*/;
                    $$[].call(r2,r1,3)/*$t74..ctor($t72, 3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    r3[r0] = r2/*V_0.1[V_1.5] = $t74*/;
                    r0 = (r0 + 1)/*V_1.4 = V_1.5 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r1,r2,r0,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadStarted()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = this[3]/*$tf2 = this._startedThreadsLock*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r2])/*System.Threading.Monitor::Enter($tf2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $f.$ecp = 13/*Frame.ExceptionCatchPointer = 13*/;
                    r1 = this[10]/*$t5 = this._startedThreads*/;
                    $ep = 3;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    this[10] = (r1 + 1)/*this._startedThreads = $t5 Add 1*/;
                    r0 = this[4]/*$t10 = this._numberOfThreads*/;
                    if((!((r1 + 1) == r0)))
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"All threads have started!"])/*this.Log("All threads have started!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = this[7]/*$t19 = this._allThreadsStartedLock*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t19.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $f.$ecp = 8/*Frame.ExceptionCatchPointer = 8*/;
                    r0 = this[8]/*$t21 = this._allThreadsStartedCondition*/;
                    $ep = 7;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t21.Signal()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $f.$ecp = 13/*Frame.ExceptionCatchPointer = 13*/;
                    r0 = this[7]/*$t29 = this._allThreadsStartedLock*/;
                    $ep = 9;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $$[].call(r0)/*$t29.Release()*/;
                    if(($f.$e != null))
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    r0 = this[10]/*$t25 = this._startedThreads*/;
                    $ep = 11;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Current thread count = ",new Number(r0)])/*$rv = System.String::Concat("Current thread count = ", box(System.Int32,$t25))*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = $rv/*$t27 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*this.Log($t27)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 15;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r2])/*System.Threading.Monitor::Exit($tf2)*/;
                    continue $ctrl;
                }
                case 14:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 15:
                {
                    if(($f.$e != null))
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                    return;
                }
                case 17:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::Work()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t),[null,null])/*this.ThreadStarted()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r2 = this[9]/*$t2 = this._semaphore*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t),[null,null])/*$t2.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = 0/*V_0.1 = (System.Int64)0*/;
                    r1 = 0/*V_1.1 = 0*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    if((!(r1 > 100000)))
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 5;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t),[null,null,(!(r0 == 5000050000))])/*this.ThreadFinished(BooleanNot V_0.3 ValueEquality 5000050000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r2 = this[9]/*$t22 = this._semaphore*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t),[null,null])/*$t22.Release()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                case 8:
                {
                    r0 = (r0 + r1)/*V_0.2 = V_0.3 Add (System.Int64)V_1.3*/;
                    r1 = (r1 + 1)/*V_1.2 = V_1.3 Add 1*/;
                    $ep = 4;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::ThreadFinished(System.Boolean)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[6]/*$t1 = this._threadFinishedLock*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t1.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((!$f[2]))
                    {
                        $ep = 4;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    r0 = this[5]/*$t8 = this._failedThreads*/;
                    this[5] = (r0 + 1)/*this._failedThreads = $t8 Add 1*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = this[6]/*$t12 = this._threadFinishedLock*/;
                    $$[].call(r0)/*$t12.Release()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::.ctor(System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Multi-threading stress test"])/*this..ctor("Multi-threading stress test")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((!($f[2] < 2)))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t10 = new System.Void System.ArgumentException::.ctor(System.String)("numberOfThreads should be greater than 1")*/;
                    $$[].call(r0,"numberOfThreads should be greater than 1")/*$t10..ctor("numberOfThreads should be greater than 1")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    throw r0/*$t10*/;
                }
                case 5:
                {
                    $ep = 6;
                    r0 = (t=[null,null],t.$=_[],t)/*$t12 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t12..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    this[6] = r0/*this._threadFinishedLock = $t12*/;
                    r0 = (t=[null,null,null],t.$=_[],t)/*$t15 = new System.Void System.Threading.Semaphore::.ctor(System.Int32)(numberOfThreads)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,$f[2]])/*$t15..ctor(numberOfThreads)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    this[9] = r0/*this._semaphore = $t15*/;
                    this[4] = $f[2]/*this._numberOfThreads = numberOfThreads*/;
                    this[5] = 0/*this._failedThreads = 0*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1)
// : System.Void XaeiOS.TestSuite.QuickSortTestSuite::TestQuickSort()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r4 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()()*/;
                    $$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r1 = r4/*V_0.1 = $t0*/;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,5])/*$t0.Add(5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,53])/*$t0.Add(53)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,25])/*$t0.Add(25)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,2])/*$t0.Add(2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,32131])/*$t0.Add(32131)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,142])/*$t0.Add(142)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = 0/*V_1.1 = 0*/;
                    $ep = 9;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = $t0.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    r2 = $rv/*$t8 = $rv*/;
                    if((r0 < r2))
                    {
                        $ep = 48;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 11;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = $t0.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r2 = $rv/*$t12 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,"Sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Sorting ", box(System.Int32,$t12), " elements.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r2 = $rv/*$t15 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t15)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r2 = (t=[null,null,null,null],t.$=_[],t)/*$t18 = new System.Void XaeiOS.TestSuite.Comparison`1<System.Int32>::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.QuickSortTestSuite::CompareInts)*/;
                    $$[](r2,null,$$[])/*$t18..ctor(null, XaeiOS.TestSuite.QuickSortTestSuite::CompareInts)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r4,r2])/*XaeiOS.TestSuite.QuickSortTestSuite::Sort($t0, $t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = $t0.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r2 = $rv/*$t20 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,"Done sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Done sorting ", box(System.Int32,$t20), " elements.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r2 = $rv/*$t23 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t23)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r3 = $$[](_[],6)/*$tf26 = new System.Int32[6]*/;
                    r2 = _[]/*$t27 = <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}.$$method0x6000090-1*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r3,r2])/*System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray($tf26, $t27)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    r0 = 0/*V_1.2 = 0*/;
                    $ep = 21;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = $t0.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    r2 = $rv/*$t29 = $rv*/;
                    if((r0 < r2))
                    {
                        $ep = 43;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 23;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 23:
                {
                    $ep = 24;
                    r2 = (t=[null,null],t.$=_[],t)/*$t32 = new System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$t32..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    r1 = r2/*V_0.2 = $t32*/;
                    r0 = 127/*V_1.3 = 127*/;
                    $ep = 25;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    if((!(r0 < 0)))
                    {
                        $ep = 41;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 26;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = V_0.3.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    $ep = 28;
                    r2 = $rv/*$t41 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,"Sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Sorting ", box(System.Int32,$t41), " elements.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 28:
                {
                    $ep = 29;
                    r2 = $rv/*$t44 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t44)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r2 = (t=[null,null,null,null],t.$=_[],t)/*$t47 = new System.Void XaeiOS.TestSuite.Comparison`1<System.Int32>::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.QuickSortTestSuite::CompareInts)*/;
                    $$[](r2,null,$$[])/*$t47..ctor(null, XaeiOS.TestSuite.QuickSortTestSuite::CompareInts)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r1,r2])/*XaeiOS.TestSuite.QuickSortTestSuite::Sort(V_0.3, $t47)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    $ep = 32;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = V_0.3.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 32:
                {
                    $ep = 33;
                    r2 = $rv/*$t49 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,"Done sorting ",new Number(r2)," elements."])/*$rv = System.String::Concat("Done sorting ", box(System.Int32,$t49), " elements.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    $ep = 34;
                    r2 = $rv/*$t52 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t52)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 34:
                {
                    r0 = 0/*V_1.4 = 0*/;
                    $ep = 35;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null])/*$rv = V_0.4.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    r2 = $rv/*$t54 = $rv*/;
                    if((r0 < r2))
                    {
                        $ep = 38;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 37;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 37:
                {
                    return;
                }
                case 38:
                {
                    $ep = 39;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r0])/*$rv = V_0.4.get_Item(V_1.12)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 39:
                {
                    $ep = 40;
                    r2 = $rv/*$t58 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r0,r2])/*this.AssertEquals(V_1.12, $t58)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    r0 = (r0 + 1)/*V_1.5 = V_1.12 Add 1*/;
                    $ep = 35;
                    continue $ctrl;
                }
                case 41:
                {
                    $ep = 42;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r0])/*V_0.3.Add(V_1.11)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 42:
                {
                    r0 = (r0 - 1)/*V_1.6 = V_1.11 Subtract 1*/;
                    $ep = 25;
                    continue $ctrl;
                }
                case 43:
                {
                    $ep = 44;
                    r2 = $$[](_[],4)/*V_4.1 = new System.Object[4]*/;
                    r2[0] = "Checking index "/*V_4.1[0] = "Checking index "*/;
                    r2[1] = new Number(r0)/*V_4.1[1] = box(System.Int32,V_1.10)*/;
                    r2[2] = ".  Expecting "/*V_4.1[2] = ".  Expecting "*/;
                    r2[3] = new Number(r3[r0])/*V_4.1[3] = box(System.Int32,$tf26[V_1.10])*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*$rv = System.String::Concat(V_4.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 44:
                {
                    $ep = 45;
                    r2 = $rv/*$t74 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t74)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 45:
                {
                    $ep = 46;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r0])/*$rv = $t0.get_Item(V_1.10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 46:
                {
                    $ep = 47;
                    r2 = $rv/*$t77 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r3[r0],r2])/*this.AssertEquals($tf26[V_1.10], $t77)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 47:
                {
                    r0 = (r0 + 1)/*V_1.7 = V_1.10 Add 1*/;
                    $ep = 21;
                    continue $ctrl;
                }
                case 48:
                {
                    $ep = 49;
                    $rv = r4.$[].call(r4,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r0])/*$rv = $t0.get_Item(V_1.9)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 49:
                {
                    $ep = 50;
                    r2 = $rv/*$t81 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,"Added ",new Number(r2),"."])/*$rv = System.String::Concat("Added ", box(System.Int32,$t81), ".")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 50:
                {
                    $ep = 51;
                    r2 = $rv/*$t84 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t),[null,null,r2])/*System.Console::WriteLine($t84)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 51:
                {
                    r0 = (r0 + 1)/*V_1.8 = V_1.9 Add 1*/;
                    $ep = 9;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r0,r3,r4,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::CompareInts(System.Int32,System.Int32)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    return ($f[2] - $f[3])/*a Subtract b*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sort(System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[2].$[].call($f[2],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$rv = data.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t2 = $rv*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,0,(r0 - 1),$f[2],$f[3]])/*XaeiOS.TestSuite.QuickSortTestSuite::Sorting(0, $t2 Subtract 1, data, comparison)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9)
// : System.Int32 XaeiOS.TestSuite.QuickSortTestSuite::GetPivotPoint(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    r0 = ($f[2] + 1)/*V_1.1 = begPoint Add 1*/;
                    r1 = $f[3]/*V_2.1 = endPoint*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    if((r0 >= $f[3]))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 3;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 6;
                    r3 = $rv/*$t8 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.4)*/;
                    continue $ctrl;
                }
                case 5:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 6:
                {
                    $ep = 7;
                    r2 = $rv/*$t10 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t8, $t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    r2 = $rv/*$t89 = $rv*/;
                    r3 = (r2 > -1)/*$ts0 = $t89 GreaterThan -1*/;
                    $ep = 8;
                    continue $ctrl;
                }
                case 8:
                {
                    if(r3)
                    {
                        $ep = 44;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 9:
                {
                    if((r1 <= $f[2]))
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r3 = $rv/*$t16 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.4)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r2 = $rv/*$t18 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t16, $t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    r6 = $rv/*$t82 = $rv*/;
                    r3 = (r6 < 1)/*$ts0 = $t82 LessThan 1*/;
                    $ep = 15;
                    continue $ctrl;
                }
                case 14:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 15;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    if(r3)
                    {
                        $ep = 43;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 16;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 16:
                {
                    if((r0 < r1))
                    {
                        $ep = 23;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 17;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 17:
                {
                    if(($f[2] == r1))
                    {
                        $ep = 22;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 18;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r2 = $rv/*V_4.1 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r3 = $rv/*$t29 = $rv*/;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1,r3])/*data.set_Item(V_2.6, $t29)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2],r2])/*data.set_Item(begPoint, V_4.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    return r1/*V_2.6*/;
                }
                case 23:
                {
                    $ep = 24;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r3 = $rv/*V_3.1 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    $ep = 26;
                    r2 = $rv/*$t35 = $rv*/;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0,r2])/*data.set_Item(V_1.6, $t35)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 26:
                {
                    $ep = 27;
                    $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1,r3])/*data.set_Item(V_2.6, V_3.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 27:
                {
                    if((r0 >= $f[3]))
                    {
                        $ep = 32;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 28;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 28:
                {
                    $ep = 29;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 29:
                {
                    $ep = 30;
                    r3 = $rv/*$t40 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r0])/*$rv = data.get_Item(V_1.5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 30:
                {
                    $ep = 31;
                    r2 = $rv/*$t42 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t40, $t42)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 31:
                {
                    r8 = $rv/*$t75 = $rv*/;
                    r3 = (r8 > -1)/*$ts0 = $t75 GreaterThan -1*/;
                    $ep = 33;
                    continue $ctrl;
                }
                case 32:
                {
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 33;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 33:
                {
                    if(r3)
                    {
                        $ep = 42;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 34;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 34:
                {
                    if((r1 <= $f[2]))
                    {
                        $ep = 39;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 35;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 35:
                {
                    $ep = 36;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,$f[2]])/*$rv = data.get_Item(begPoint)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 36:
                {
                    $ep = 37;
                    r3 = $rv/*$t48 = $rv*/;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,r1])/*$rv = data.get_Item(V_2.5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 37:
                {
                    $ep = 38;
                    r2 = $rv/*$t50 = $rv*/;
                    $rv = $f[5].$[].call($f[5],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t),[null,null,[r3, r2]])/*$rv = comparison.Invoke($t48, $t50)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 38:
                {
                    r9 = $rv/*$t68 = $rv*/;
                    r3 = (r9 < 1)/*$ts0 = $t68 LessThan 1*/;
                    $ep = 40;
                    continue $ctrl;
                }
                case 39:
                {
                    r7 = 0/*$t55 = 0*/;
                    r3 = 0/*$ts0 = 0*/;
                    $ep = 40;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 40:
                {
                    if(r3)
                    {
                        $ep = 41;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 16;
                        continue $ctrl;

                    }
                }
                case 41:
                {
                    r1 = (r1 - 1)/*V_2.2 = V_2.5 Subtract 1*/;
                    $ep = 34;
                    continue $ctrl;
                }
                case 42:
                {
                    r0 = (r0 + 1)/*V_1.2 = V_1.5 Add 1*/;
                    $ep = 27;
                    continue $ctrl;
                }
                case 43:
                {
                    r1 = (r1 - 1)/*V_2.3 = V_2.4 Subtract 1*/;
                    $ep = 9;
                    continue $ctrl;
                }
                case 44:
                {
                    r0 = (r0 + 1)/*V_1.3 = V_1.4 Add 1*/;
                    $ep = 2;
                    continue $ctrl;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r2,r3,r0,r4,r1,r5,r6,r7,r8,r9],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.QuickSortTestSuite::Sorting(System.Int32,System.Int32,System.Collections.Generic.List`1<T>,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    if((!($f[3] == $f[2])))
                    {
                        $ep = 2;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,$f[2],$f[3],$f[4],$f[5]])/*$rv = XaeiOS.TestSuite.QuickSortTestSuite::GetPivotPoint(beg, end, data, comparison)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = $rv/*V_0.1 = $rv*/;
                    if((!(r0 > $f[2])))
                    {
                        $ep = 5;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,$f[2],(r0 - 1),$f[4],$f[5]])/*XaeiOS.TestSuite.QuickSortTestSuite::Sorting(beg, V_0.1 Subtract 1, data, comparison)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    if((!(r0 < $f[3])))
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,(r0 + 1),$f[3],$f[4],$f[5]])/*XaeiOS.TestSuite.QuickSortTestSuite::Sorting(V_0.1 Add 1, end, data, comparison)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::GreaterThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,[$f[2], $f[3]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 > -1)/*$t3 GreaterThan -1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Boolean XaeiOS.TestSuite.QuickSortTestSuite::LessThanOrEqualTo(T,T,XaeiOS.TestSuite.Comparison`1<T>)
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $rv = $f[4].$[].call($f[4],0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,[$f[2], $f[3]]])/*$rv = comparison.Invoke(a, b)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    r0 = $rv/*$t3 = $rv*/;
                    return (r0 < 1)/*$t3 LessThan 1*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.QuickSortTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThread()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r3 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::.ctor()()*/;
                    $$[].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r3[1] = this/*$t0.<>4__this = this*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t2 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = (t=[null,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.Condition::.ctor(System.Threading.Lock)($t2)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$t3..ctor($t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r3[0] = r0/*$t0.aborted = $t3*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t5 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0)*/;
                    $$[](r0,r3,$$[])/*$t5..ctor($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r2 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t5)*/;
                    $$[].call(r2,r0)/*$t6..ctor($t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r2)/*$t6.Start()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Aborting test thread in 2 seconds.  Sleeping..."])/*this.Log("Aborting test thread in 2 seconds.  Sleeping...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,2000])/*System.Threading.Thread::Sleep(2000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"...awake!  Going to abort the test thread."])/*this.Log("...awake!  Going to abort the test thread.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t6.Abort()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Called testThread.Abort()"])/*this.Log("Called testThread.Abort()")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = r3[0]/*$t16 = $t0.aborted*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,12000])/*$rv = $t16.Await(12000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t18 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Thread was not aborted as expected!",r0])/*this.Assert("Thread was not aborted as expected!", $t18)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestAbortThreadWithState()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r3 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::.ctor()()*/;
                    $$[].call(r3,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r3[1] = this/*$t0.<>4__this = this*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t2 = new System.Void System.Threading.Lock::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = (t=[null,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.Condition::.ctor(System.Threading.Lock)($t2)*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$t3..ctor($t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r3[0] = r0/*$t0.aborted = $t3*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t5 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3)*/;
                    $$[](r0,r3,$$[])/*$t5..ctor($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r2 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t5)*/;
                    $$[].call(r2,r0)/*$t6..ctor($t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r2)/*$t6.Start()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null])/*$t2.Acquire()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Aborting test thread in 2 seconds"])/*this.Log("Aborting test thread in 2 seconds")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,2000])/*System.Threading.Thread::Sleep(2000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Exception state"])/*$t6.Abort("Exception state")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r0 = r3[0]/*$t13 = $t0.aborted*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,12000])/*$rv = $t13.Await(12000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r0 = $rv/*$t15 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"Thread was not aborted as expected!",r0])/*this.Assert("Thread was not aborted as expected!", $t15)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiom()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = (t=[],t.$=_[],t)/*$t0 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r0)/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*System.Threading.Monitor::Enter($t0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $f.$ecp = 4/*Frame.ExceptionCatchPointer = 4*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"In locked section"])/*this.Log("In locked section")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*System.Threading.Monitor::Exit($t0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    if(($f.$e != null))
                    {
                        $ep = 8;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Outside of locked section"])/*this.Log("Outside of locked section")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                case 8:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = (t=[null,false,null],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::.ctor()()*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = (t=[],t.$=_[],t)/*$t1 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r0)/*$t1..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r1[0] = r0/*$t0.sync = $t1*/;
                    $ep = 4;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $f.$ecp = 10/*Frame.ExceptionCatchPointer = 10*/;
                    r1 = r1[0]/*$tf3 = $t0.sync*/;
                    $ep = 5;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r1])/*System.Threading.Monitor::Enter($tf3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $f.$ecp = 9/*Frame.ExceptionCatchPointer = 9*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"In locked section.  Throwing exception"])/*this.Log("In locked section.  Throwing exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t6 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t6..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    throw r0/*$t6*/;
                }
                case 9:
                {
                    $ep = 12;
                    $f.$ecp = 10/*Frame.ExceptionCatchPointer = 10*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r1])/*System.Threading.Monitor::Exit($tf3)*/;
                    continue $ctrl;
                }
                case 10:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException*/)
                    {
                        $ep = 15;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 11;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 11:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 12:
                {
                    if(($f.$e != null))
                    {
                        $ep = 14;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 13;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 13:
                {
                }
                case 14:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 15:
                {
                    $ep = 16;
                    r0 = $f.$e/*$t7 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Caught exception as expected: ",r0])/*$rv = System.String::Concat("Caught exception as expected: ", $t7)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    r0 = $rv/*$t10 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*this.Log($t10)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    r2[1] = 0/*V_2.secondThreadAcquiredLock = 0*/;
                    $ep = 18;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r0 = (t=[false,null],t.$=_[],t)/*$t12 = new System.Void System.Threading.ManualResetEvent::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t12..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r2[2] = r0/*V_2.secondThreadDone = $t12*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t14 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(V_2, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6)*/;
                    $$[](r0,r2,$$[])/*$t14..ctor(V_2, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r1 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t15 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t14)*/;
                    $$[].call(r1,r0)/*$t15..ctor($t14)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $$[].call(r1)/*$t15.Start()*/;
                    r0 = r2[2]/*$t16 = V_2.secondThreadDone*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,10000])/*$rv = $t16.WaitOne(10000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    r0 = $rv/*V_4.1 = $rv*/;
                    if(r0)
                    {
                        $ep = 24;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 23;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 23:
                {
                    $ep = 24;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t15.Abort()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    $ep = 25;
                    r0 = r2[1]/*$t21 = V_2.secondThreadAcquiredLock*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Finally block of lock idiom should have unlocked sync obj",r0])/*this.Assert("Finally block of lock idiom should have unlocked sync obj", $t21)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 25:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestLockIdiomUnlocksWhenExceptionsAreThrown()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r1 = (t=[],t.$=_[],t)/*$t0 = new System.Void System.Object::.ctor()()*/;
                    $$[].call(r1)/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1])/*System.Threading.Monitor::Enter($t0)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $f.$ecp = 6/*Frame.ExceptionCatchPointer = 6*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"In locked section.  Throwing exception"])/*this.Log("In locked section.  Throwing exception")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t4 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t4..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    throw r0/*$t4*/;
                }
                case 6:
                {
                    $ep = 9;
                    $f.$ecp = 7/*Frame.ExceptionCatchPointer = 7*/;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r1])/*System.Threading.Monitor::Exit($t0)*/;
                    continue $ctrl;
                }
                case 7:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException*/)
                    {
                        $ep = 12;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 8;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 8:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 9:
                {
                    if(($f.$e != null))
                    {
                        $ep = 11;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 10;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 10:
                {
                }
                case 11:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 12:
                {
                    $ep = 13;
                    r0 = $f.$e/*$t5 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Caught exception as expected: ",r0])/*$rv = System.String::Concat("Caught exception as expected: ", $t5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = $rv/*$t8 = $rv*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,r0])/*this.Log($t8)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    this[4] = r1/*this._sync = V_0*/;
                    $ep = 15;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = (t=[false,null],t.$=_[],t)/*$t11 = new System.Void System.Threading.ManualResetEvent::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t11..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 17;
                    this[5] = r0/*this._secondThreadDone = $t11*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t14 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)(this, XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9)*/;
                    $$[](r0,this,$$[])/*$t14..ctor(this, XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    $ep = 18;
                    r1 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t15 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t14)*/;
                    $$[].call(r1,r0)/*$t15..ctor($t14)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    $$[].call(r1,"Second thread")/*$t15.set_Name("Second thread")*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Starting second thread"])/*this.Log("Starting second thread")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    $$[].call(r1)/*$t15.Start()*/;
                    r0 = this[5]/*$t20 = this._secondThreadDone*/;
                    $rv = $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,5000])/*$rv = $t20.WaitOne(5000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    r0 = $rv/*V_4.1 = $rv*/;
                    if(r0)
                    {
                        $ep = 24;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 21;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 21:
                {
                    $ep = 22;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Test failed.  Aborting second thread"])/*this.Log("Test failed.  Aborting second thread")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 22:
                {
                    $ep = 23;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null])/*$t15.Abort()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 23:
                {
                    $ep = 24;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t),[null,null,"Finally block of lock idiom should have unlocked sync obj"])/*this.Fail("Finally block of lock idiom should have unlocked sync obj")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 24:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::TestManualResetEvent()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = (t=[null,null,false,null],t.$=_[],t)/*$t0 = new System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::.ctor()()*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r2[3] = this/*$t0.<>4__this = this*/;
                    r0 = (t=[false,null],t.$=_[],t)/*$t2 = new System.Void System.Threading.ManualResetEvent::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t2..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r2[0] = r0/*$t0.firstEvent = $t2*/;
                    r0 = (t=[false,null],t.$=_[],t)/*$t3 = new System.Void System.Threading.ManualResetEvent::.ctor()()*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t3..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r2[1] = r0/*$t0.secondEvent = $t3*/;
                    r2[2] = 0/*$t0.firstEventWorked = 0*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t6 = new System.Void System.Threading.ThreadStart::.ctor(System.Object,System.IntPtr)($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a)*/;
                    $$[](r0,r2,$$[])/*$t6..ctor($t0, XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r1 = (t=[null,null,null,null,false,null,null,null,null,false,null,null],t.$=_[],t)/*$t7 = new System.Void System.Threading.Thread::.ctor(System.Threading.ThreadStart)($t6)*/;
                    $$[].call(r1,r0)/*$t7..ctor($t6)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(r1)/*$t7.Start()*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Main thread sleeping for 2 seconds.  Sleeping..."])/*this.Log("Main thread sleeping for 2 seconds.  Sleeping...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,2000])/*System.Threading.Thread::Sleep(2000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"...main thread awake!  Going to set the first event."])/*this.Log("...main thread awake!  Going to set the first event.")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    r0 = r2[0]/*$t13 = $t0.firstEvent*/;
                    $$[].call(r0)/*$t13.Set()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Main thread set the first event.  Going to wait for the test thread to set the second event"])/*this.Log("Main thread set the first event.  Going to wait for the test thread to set the second event")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r0 = r2[1]/*$t16 = $t0.secondEvent*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t16.WaitOne()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"...main thread awake!"])/*this.Log("...main thread awake!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 14;
                    r0 = r2[2]/*$t21 = $t0.firstEventWorked*/;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test thread didn't wake up when the first event was signalled",r0])/*this.Assert("Test thread didn't wake up when the first event was signalled", $t21)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 14:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Starting second thread.  Trying to acquire the lock"])/*this.Log("Starting second thread.  Trying to acquire the lock")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = this[4]/*$t3 = this._sync*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*$rv = System.Threading.Monitor::TryEnter($t3)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    r0 = $rv/*$t4 = $rv*/;
                    if((!r0))
                    {
                        $ep = 6;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 4;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 4:
                {
                    $ep = 5;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Second acquired the lock!"])/*this.Log("Second acquired the lock!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 7;
                    r0 = this[5]/*$t11 = this._secondThreadDone*/;
                    $$[].call(r0)/*$t11.Set()*/;
                    continue $ctrl;
                }
                case 6:
                {
                    $ep = 7;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Second thread did not acquire the lock..."])/*this.Log("Second thread did not acquire the lock...")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    $$[].call(this,0,$end,null,(t=[$ep,$end,$rv,$pc,$f],t.$=null,t),[null,null])/*this..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this,"PurposefullyThrownException")/*this..ctor("PurposefullyThrownException")*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::<TestMethodInliningBreaksLoops>b__0()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $f.$ecp = 14/*Frame.ExceptionCatchPointer = 14*/;
                    r1 = (t=[null,null],t.$=_[],t)/*$t0 = new System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()()*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t0..ctor()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,5])/*$t0.Add(5)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,53])/*$t0.Add(53)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,25])/*$t0.Add(25)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,2])/*$t0.Add(2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    $ep = 8;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,32131])/*$t0.Add(32131)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,142])/*$t0.Add(142)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    $ep = 10;
                    $rv = r1.$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t0.get_Count()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 10:
                {
                    $ep = 11;
                    r2 = $rv/*$t9 = $rv*/;
                    r0 = (t=[null,null,null,null],t.$=_[],t)/*$t14 = new System.Void XaeiOS.TestSuite.Comparison`1<System.Int32>::.ctor(System.Object,System.IntPtr)(null, XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts)*/;
                    $$[](r0,null,$$[])/*$t14..ctor(null, XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::CompareInts)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,0,(r2 - 1),r1,r0])/*$rv = XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::GetPivotPoint(0, $t9 Subtract 1, $t0, $t14)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    $ep = 13;
                    r0 = $rv/*$t15 = $rv*/;
                    this[1] = r0/*this.resultPivot = $t15*/;
                    r0 = this[2]/*$t17 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"GetPivotPoint complete"])/*$t17.Log("GetPivotPoint complete")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 13:
                {
                    $ep = 17;
                    r0 = this[0]/*$t20 = this.done*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t20.Signal()*/;
                    continue $ctrl;
                }
                case 14:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Threading.ThreadAbortException*/)
                    {
                        $ep = 16;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 15;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 15:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 16:
                {
                    $ep = 17;
                    $f.$e = null/*Frame.Exception = null*/;
                    r0 = this[2]/*$t23 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test thread aborted.."])/*$t23.Log("Test thread aborted..")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 17:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2,r3)
// : System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::<PerformTest>b__0()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r2 = this[3]/*$t1 = this.<>4__this*/;
                    r1 = $$[](_[],4)/*V_0.1 = new System.Object[4]*/;
                    r1[0] = "Starting thread to move element "/*V_0.1[0] = "Starting thread to move element "*/;
                    r0 = this[1]/*$t8 = this.element*/;
                    r1[1] = r0/*V_0.1[1] = $t8*/;
                    r1[2] = ".  Clockwise = "/*V_0.1[2] = ".  Clockwise = "*/;
                    r0 = this[2]/*$t13 = this.clockwiseForThisElement*/;
                    r1[3] = new Boolean(r0)/*V_0.1[3] = box(System.Boolean,$t13)*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r1])/*$rv = System.String::Concat(V_0.1)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t15 = $rv*/;
                    $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r0])/*$t1.Log($t15)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r1 = this[3]/*$t17 = this.<>4__this*/;
                    r0 = this[0]/*$t20 = this.CS$<>8__locals2*/;
                    r0 = r0[0]/*$t21 = $t20.i*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,"element ",new Number(r0)])/*$rv = System.String::Concat("element ", box(System.Int32,$t21))*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    r3 = $rv/*$t23 = $rv*/;
                    r2 = this[1]/*$t25 = this.element*/;
                    r0 = this[2]/*$t27 = this.clockwiseForThisElement*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t),[null,null,r3,r2,r0])/*$t17.MoveElement($t23, $t25, $t27)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2,r3],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::<TestAbortThread>b__0()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $f.$ecp = 5/*Frame.ExceptionCatchPointer = 5*/;
                    r0 = this[1]/*$t1 = this.<>4__this*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test thread sleeping for 8 seconds.."])/*$t1.Log("Test thread sleeping for 8 seconds..")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,8000])/*System.Threading.Thread::Sleep(8000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 9;
                    r0 = this[1]/*$t5 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"This line should never be executed"])/*$t5.Fail("This line should never be executed")*/;
                    continue $ctrl;
                }
                case 5:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Threading.ThreadAbortException*/)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 7:
                {
                    $ep = 8;
                    $f.$e = null/*Frame.Exception = null*/;
                    r0 = this[1]/*$t9 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test thread aborted.."])/*$t9.Log("Test thread aborted..")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    $ep = 9;
                    r0 = this[0]/*$t12 = this.aborted*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t12.Signal()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 9:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0,r1,r2)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::<TestAbortThreadWithState>b__3()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $f.$ecp = 5/*Frame.ExceptionCatchPointer = 5*/;
                    r0 = this[1]/*$t1 = this.<>4__this*/;
                    $ep = 2;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test thread sleeping for 8 seconds.."])/*$t1.Log("Test thread sleeping for 8 seconds..")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,8000])/*System.Threading.Thread::Sleep(8000)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 21;
                    r0 = this[1]/*$t5 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"This line should never be executed"])/*$t5.Fail("This line should never be executed")*/;
                    continue $ctrl;
                }
                case 5:
                {
                    $f.$ecp = null/*Frame.ExceptionCatchPointer = null*/;
                    if(($$[]($f.$e,_[],false) != null)/*Frame.Exception is System.Threading.ThreadAbortException*/)
                    {
                        $ep = 7;
                        continue $ctrl;

                    }
                    else
                    {
                        $ep = 6;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                }
                case 6:
                {
                    throw $f.$e/*Frame.Exception*/;
                }
                case 7:
                {
                    $ep = 8;
                    r2 = $f.$e/*$t7 = $e*/;
                    $f.$e = null/*Frame.Exception = null*/;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t7.get_ExceptionState()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 8:
                {
                    r0 = $rv/*$t8 = $rv*/;
                    if((!r0))
                    {
                        $ep = 9;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 10;
                        continue $ctrl;

                    }
                }
                case 9:
                {
                    r0 = 1/*$ts0 = 1*/;
                    $ep = 13;
                    continue $ctrl;
                }
                case 10:
                {
                    $ep = 11;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t7.get_ExceptionState()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 11:
                {
                    $ep = 12;
                    r0 = $rv/*$t9 = $rv*/;
                    $rv = r0.$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t9.ToString()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 12:
                {
                    r0 = $rv/*$t10 = $rv*/;
                    r0 = (r0 == "Exception state")/*$t12 = System.String::op_Equality($t10, "Exception state")*/;
                    r0 = (!r0)/*$ts0 = BooleanNot $t12*/;
                    $ep = 13;
                    continue $ctrl;
                }
                case 13:
                {
                    if(r0)
                    {
                        $ep = 14;
                        if(0 > $end--)
                        {
                            throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                        }

                    }
                    else
                    {
                        $ep = 17;
                        continue $ctrl;

                    }
                }
                case 14:
                {
                    $ep = 15;
                    r1 = this[1]/*$t24 = this.<>4__this*/;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t7.get_ExceptionState()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 15:
                {
                    $ep = 16;
                    r0 = $rv/*$t26 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test thread aborted with unknown state: ",r0])/*$rv = System.String::Concat("Test thread aborted with unknown state: ", $t26)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 16:
                {
                    $ep = 21;
                    r0 = $rv/*$t27 = $rv*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*$t24.Log($t27)*/;
                    continue $ctrl;
                }
                case 17:
                {
                    $ep = 18;
                    r1 = this[1]/*$t17 = this.<>4__this*/;
                    $rv = $$[].call(r2,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$rv = $t7.get_ExceptionState()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 18:
                {
                    $ep = 19;
                    r0 = $rv/*$t19 = $rv*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,"Test thread aborted with state: ",r0])/*$rv = System.String::Concat("Test thread aborted with state: ", $t19)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 19:
                {
                    $ep = 20;
                    r0 = $rv/*$t20 = $rv*/;
                    $$[].call(r1,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null,r0])/*$t17.Log($t20)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 20:
                {
                    $ep = 21;
                    r0 = this[0]/*$t22 = this.aborted*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t),[null,null])/*$t22.Signal()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 21:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0,r1,r2],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[0]/*$t2 = this.sync*/;
                    $rv = $$[](0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,r0])/*$rv = System.Threading.Monitor::TryEnter($t2)*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = $rv/*$t3 = $rv*/;
                    this[1] = r0/*this.secondThreadAcquiredLock = $t3*/;
                    r0 = this[2]/*$t5 = this.secondThreadDone*/;
                    $$[].call(r0)/*$t5.Set()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f,r0)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::<TestManualResetEvent>b__a()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $ep = 2;
                    r0 = this[3]/*$t1 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test thread waiting on first event.."])/*$t1.Log("Test thread waiting on first event..")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 2:
                {
                    $ep = 3;
                    r0 = this[0]/*$t4 = this.firstEvent*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null])/*$t4.WaitOne()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 3:
                {
                    $ep = 4;
                    r0 = this[3]/*$t6 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"....test thread awake!"])/*$t6.Log("....test thread awake!")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 4:
                {
                    $ep = 5;
                    this[2] = 1/*this.firstEventWorked = 1*/;
                    r0 = this[3]/*$t11 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test thread setting the second event"])/*$t11.Log("Test thread setting the second event")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 5:
                {
                    $ep = 6;
                    r0 = this[1]/*$t14 = this.secondEvent*/;
                    $$[].call(r0)/*$t14.Set()*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 6:
                {
                    $ep = 7;
                    r0 = this[3]/*$t16 = this.<>4__this*/;
                    $$[].call(r0,0,$end,null,(t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t),[null,null,"Test thread set the second event"])/*$t16.Log("Test thread set the second event")*/;
                    if(0 > $end--)
                    {
                        throw (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*[Continuation]*/;

                    }
                }
                case 7:
                {
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f,r0],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


},
function($ep,$end,$rv,$pc,$f)
// : System.Void XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb::.ctor()
{
    var t;
    if(($ep == 0))
    {
        $f[0] = this/*Frame[This] = this*/;
        $f[1] = arguments.callee/*Frame[Function] = [dynamic expression]*/;
        $ep = 1;

    }
    $ctrl:
    do
    {
        if(0 > $end--)
        {
            throw (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*[Continuation]*/;

        }
        try
        {
            switch($ep)
            {
                case 1:
                {
                    $$[].call(this)/*this..ctor()*/;
                    return;
                }
                default:
                {
                    throw new Error("Invalid execution pointer")/*[dynamic expression]*/;
                }

            }


        }
        catch($e)
        {
            if((($e != null) && ($e.$ == null)))
            {
                throw $e/*$e*/;

            }
            $e = $$[]($e)/*$e = XaeiOS.Kernel.Scheduler::ConvertToManagedException($e)*/;
            if(($e[0] == null))
            {
                $e[0] = (t=[$ep,$end,$rv,$pc,$f],t.$=null,t)/*$e._throwContext = [Continuation]*/;

            }
            if((!$f.$ecp))
            {
                throw $e/*$e*/;

            }
            $ep = $f.$ecp;
            $f.$e = $e/*Frame.Exception = $e*/;

        }


    } while (true);


}]]></Code><Data Length="57"><![CDATA[
// : XaeiOS.TestSuite.TestRunner
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.Type[] XaeiOS.TestSuite.TestRunner::_testSuites */,
null/* System.Int32 XaeiOS.TestSuite.TestRunner::_passCount */,
null/* System.Collections.Generic.List`1<XaeiOS.TestSuite.ITest> XaeiOS.TestSuite.TestRunner::_failures */,
null/* System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate2 */,
null/* System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate3 */,
null/* System.Threading.ThreadStart XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate6 */,
null/* System.EventHandler XaeiOS.TestSuite.TestRunner::CS$<>9__CachedAnonymousMethodDelegate7 */,

// : XaeiOS.TestSuite.AssertException
{
    f: 0,
    0:$$[]/* System.String System.Exception::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Exception System.Exception::GetBaseException() */,
    5:$$[]/* System.String System.Exception::get_HelpLink() */,
    6:$$[]/* System.Void System.Exception::set_HelpLink(System.String) */,
    7:$$[]/* System.String System.Exception::get_Source() */,
    8:$$[]/* System.Void System.Exception::set_Source(System.String) */,
    9:$$[]/* System.String System.Exception::get_StackTrace() */
},

// : XaeiOS.TestSuite.ITest
{
    f: 1,
    0:null/* System.String XaeiOS.TestSuite.ITest::get_Name() */,
    1:null/* System.Boolean XaeiOS.TestSuite.ITest::get_Passed() */,
    2:null/* System.Exception XaeiOS.TestSuite.ITest::get_Exception() */,
    3:null/* System.Void XaeiOS.TestSuite.ITest::Test() */
},

// : XaeiOS.TestSuite.TestBase
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:null/* System.Void XaeiOS.TestSuite.TestBase::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.XmlHttpRequestTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.XmlHttpRequestTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.ThreadSleepTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.ThreadSleepTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.AlertHelloWorldTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.AlertHelloWorldTest::PerformTest() */
},

// : XaeiOS.TestSuite.Assert
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.EventTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.EventTest::PerformTest() */
},

// : XaeiOS.TestSuite.TestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Tests.CompilerBugsTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},
null/* System.Int32 XaeiOS.TestSuite.Tests.CompilerBugsTestSuite::Timeout */,

// : XaeiOS.TestSuite.Tests.CompilerFlowControlTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.CompilerFlowControlTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.MultiThreadingTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.MultiThreadingTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.ReflectionTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Tests.NullReferenceExceptionTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.NullReferenceExceptionTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.SynchronizationTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.SynchronizationTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.DomTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.DomTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.ResourceTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.ResourceTest::PerformTest() */
},

// : XaeiOS.TestSuite.Tests.DomElementResource
{
    f: 0,
    i:
    {
        :// Interface map: System.IDisposable
        {
            :$$[]/* Dispose -> System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() */
        }
    },
    0:$$[]/* System.String XaeiOS.TestSuite.Tests.DomElementResource::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Void XaeiOS.TestSuite.Tests.DomElementResource::Dispose() */
},

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder
{
    f: 1,
    0:null/* System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder::AddTen(System.Int32) */
},

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder
        {
            :$$[]/* AddTen -> System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::AddTen(System.Int32) */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:null/* System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase::AddTen(System.Int32) */
},

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.Tests.ClassStructureTestSuite/IAdder
        {
            :$$[]/* AddTen -> System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Int32 XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder::AddTen(System.Int32) */
},

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1::property */,

// : XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.Object XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2::property */,

// : XaeiOS.TestSuite.TestAttribute
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.MultiThreadingStressTest
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestBase::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestBase::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestBase::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestBase::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestBase::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestBase::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.Tests.MultiThreadingStressTest::PerformTest() */
},

// : XaeiOS.TestSuite.QuickSortTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Comparison`1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Object System.MulticastDelegate::Invoke(System.Object[]) */,
    5:$$[]/* System.Object System.MulticastDelegate::InvokeNative(System.Object[]) */,
    6:$$[]/* System.Void System.MulticastDelegate::InternalCombine(System.Delegate) */,
    7:$$[]/* System.Int32 XaeiOS.TestSuite.Comparison`1::Invoke(T,T) */,
    8:$$[]/* System.IAsyncResult XaeiOS.TestSuite.Comparison`1::BeginInvoke(T,T,System.AsyncCallback,System.Object) */,
    9:$$[]/* System.Int32 XaeiOS.TestSuite.Comparison`1::EndInvoke(System.IAsyncResult) */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite
{
    f: 0,
    i:
    {
        :// Interface map: XaeiOS.TestSuite.ITest
        {
            :$$[]/* get_Name -> System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
            :$$[]/* get_Passed -> System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
            :$$[]/* get_Exception -> System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
            :$$[]/* Test -> System.Void XaeiOS.TestSuite.TestSuite::Test() */
        }
    },
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.String XaeiOS.TestSuite.TestSuite::get_Name() */,
    5:$$[]/* System.Boolean XaeiOS.TestSuite.TestSuite::get_Passed() */,
    6:$$[]/* System.Exception XaeiOS.TestSuite.TestSuite::get_Exception() */,
    7:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Test() */,
    8:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::Setup() */,
    9:$$[]/* System.Void XaeiOS.TestSuite.TestSuite::TearDown() */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException
{
    f: 0,
    0:$$[]/* System.String System.Exception::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */,
    4:$$[]/* System.Exception System.Exception::GetBaseException() */,
    5:$$[]/* System.String System.Exception::get_HelpLink() */,
    6:$$[]/* System.Void System.Exception::set_HelpLink(System.String) */,
    7:$$[]/* System.String System.Exception::get_Source() */,
    8:$$[]/* System.Void System.Exception::set_Source(System.String) */,
    9:$$[]/* System.String System.Exception::get_StackTrace() */
},

// : XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
[2,0,0,0,5,0,0,0,25,0,0,0,53,0,0,0,142,0,0,0,131,125,0,0]/* <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}/__StaticArrayInitTypeSize=24 <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}::$$method0x6000090-1 */,

// : <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}/__StaticArrayInitTypeSize=24
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},

// : XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb
{
    f: 0,
    0:$$[]/* System.String System.Object::ToString() */,
    1:$$[]/* System.Int32 System.Object::GetHashCode() */,
    2:$$[]/* System.Boolean System.Object::Equals(System.Object) */,
    3:$$[]/* System.Void System.Object::Finalize() */
},
null/* System.EventArgs System.EventArgs::Empty */,
null/* System.Int32 System.Threading.Thread::_idCounter */]]></Data><Initialization><![CDATA[_[].b = _[];// XaeiOS.TestSuite.TestRunner extends System.Object
_[].b = _[];// XaeiOS.TestSuite.AssertException extends System.Exception
_[].b = _[];// XaeiOS.TestSuite.TestBase extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.XmlHttpRequestTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.DictionaryRemoveSSABugTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.SingleThreadedPerformanceTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadSleepTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.AlertHelloWorldTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Assert extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.EventTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.TestSuite extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.CompilerBugsTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Tests.CompilerFlowControlTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.MultiThreadingTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.ReflectionTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Tests.ReflectionTestSuite/ReflectionTestAttribute extends System.Attribute
_[].b = _[];// XaeiOS.TestSuite.Tests.ExceptionHandlingTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Tests.NullReferenceExceptionTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.SynchronizationTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.DomTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.ResourceTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.Tests.DomElementResource extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ClassStructureTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ClassStructureTestSuite/RegularAdder extends XaeiOS.TestSuite.Tests.ClassStructureTestSuite/AdderBase
_[].b = _[];// XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass1 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ClassStructureTestSuite/StaticConstructorClass2 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.TestAttribute extends System.Attribute
_[].b = _[];// XaeiOS.TestSuite.Tests.MultiThreadingStressTest extends XaeiOS.TestSuite.TestBase
_[].b = _[];// XaeiOS.TestSuite.QuickSortTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Comparison`1 extends System.MulticastDelegate
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite extends XaeiOS.TestSuite.TestSuite
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite/PurposefullyThrownException extends System.Exception
_[].b = _[];// XaeiOS.TestSuite.Tests.CompilerBugsTestSuite/<>c__DisplayClass1 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass1 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.DomTest/<>c__DisplayClass3 extends System.Object
_[].b = _[];// <PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7} extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass1 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass4 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClass7 extends System.Object
_[].b = _[];// XaeiOS.TestSuite.Tests.ThreadingTestSuite/<>c__DisplayClassb extends System.Object
var t0 = {}/* t0 = [dynamic expression]*/;
$$[]()/*System.Runtime.CompilerServices.RuntimeHelpers::InitializeMetadata()*/;t0[0] = $$[]("XaeiOS.TestSuite")/*t0[0] = System.Runtime.CompilerServices.RuntimeHelpers::CreateAssembly("XaeiOS.TestSuite")*/;
t0[1] = $$[]("XaeiOS.TestSuite","TestRunner",t0[0],,null,false,false)/*t0[1] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "TestRunner", t0[0], [dynamic expression], null, False, False)*/;
t0[2] = $$[](t0[1],"Main",$$[],-1)/*t0[2] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Main", [dynamic expression], -1)*/;
t0[3] = $$[](t0[1],"RunProcessViewer",$$[],-1)/*t0[3] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "RunProcessViewer", [dynamic expression], -1)*/;
t0[4] = $$[](t0[1],"RunTestSuite",$$[],-1)/*t0[4] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "RunTestSuite", [dynamic expression], -1)*/;
t0[5] = $$[](t0[1],"GetTestCases",$$[],-1)/*t0[5] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "GetTestCases", [dynamic expression], -1)*/;
t0[6] = $$[](t0[1],"RunTests",$$[],-1)/*t0[6] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "RunTests", [dynamic expression], -1)*/;
t0[7] = $$[](t0[1],"PerformTest",$$[],-1)/*t0[7] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "PerformTest", [dynamic expression], -1)*/;
t0[8] = $$[](t0[1],"Log",$$[],-1)/*t0[8] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Log", [dynamic expression], -1)*/;
t0[9] = $$[](t0[1],"Log",$$[],-1)/*t0[9] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "Log", [dynamic expression], -1)*/;
t0[10] = $$[](t0[1],"<RunProcessViewer>b__0",$$[],-1)/*t0[10] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<RunProcessViewer>b__0", [dynamic expression], -1)*/;
t0[11] = $$[]("System.Runtime.CompilerServices","CompilerGeneratedAttribute",t0[0],,null,false,false)/*t0[11] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Runtime.CompilerServices", "CompilerGeneratedAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[12] = $$[](t0[11],".ctor",$$[])/*t0[12] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[11], ".ctor", [dynamic expression])*/;
$$[](t0[11],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[11], [dynamic expression])*/;
$$[](t0[10],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[10], [dynamic expression])*/;
t0[13] = $$[](t0[1],"<RunProcessViewer>b__1",$$[],-1)/*t0[13] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<RunProcessViewer>b__1", [dynamic expression], -1)*/;
$$[](t0[13],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[13], [dynamic expression])*/;
t0[14] = $$[](t0[1],"<RunTestSuite>b__4",$$[],-1)/*t0[14] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<RunTestSuite>b__4", [dynamic expression], -1)*/;
$$[](t0[14],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[14], [dynamic expression])*/;
t0[15] = $$[](t0[1],"<RunTestSuite>b__5",$$[],-1)/*t0[15] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[1], "<RunTestSuite>b__5", [dynamic expression], -1)*/;
$$[](t0[15],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[15], [dynamic expression])*/;
t0[16] = $$[](t0[1],".cctor",$$[])/*t0[16] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[1], ".cctor", [dynamic expression])*/;
t0[17] = $$[]("XaeiOS.TestSuite","AssertException",t0[0],,null,false,false)/*t0[17] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "AssertException", t0[0], [dynamic expression], null, False, False)*/;
t0[18] = $$[](t0[17],".ctor",$$[])/*t0[18] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[17], ".ctor", [dynamic expression])*/;
t0[19] = $$[]("XaeiOS.TestSuite","ITest",t0[0],,null,true,false)/*t0[19] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "ITest", t0[0], [dynamic expression], null, True, False)*/;
t0[20] = $$[](t0[19],"get_Name",null,)/*t0[20] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[19], "get_Name", null, [dynamic expression])*/;
t0[21] = $$[](t0[19],"get_Passed",null,)/*t0[21] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[19], "get_Passed", null, [dynamic expression])*/;
t0[22] = $$[](t0[19],"get_Exception",null,)/*t0[22] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[19], "get_Exception", null, [dynamic expression])*/;
t0[23] = $$[](t0[19],"Test",null,)/*t0[23] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[19], "Test", null, [dynamic expression])*/;
t0[24] = $$[](t0[19],"Name",t0[20],null)/*t0[24] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[19], "Name", t0[20], null)*/;
t0[25] = $$[](t0[19],"Passed",t0[21],null)/*t0[25] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[19], "Passed", t0[21], null)*/;
t0[26] = $$[](t0[19],"Exception",t0[22],null)/*t0[26] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[19], "Exception", t0[22], null)*/;
t0[27] = $$[]("XaeiOS.TestSuite","TestBase",t0[0],,null,false,false)/*t0[27] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "TestBase", t0[0], [dynamic expression], null, False, False)*/;
t0[28] = $$[](t0[27],"get_Name",$$[],)/*t0[28] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "get_Name", [dynamic expression], [dynamic expression])*/;
t0[29] = $$[](t0[27],"get_Passed",$$[],)/*t0[29] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "get_Passed", [dynamic expression], [dynamic expression])*/;
t0[30] = $$[](t0[27],"get_Exception",$$[],)/*t0[30] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "get_Exception", [dynamic expression], [dynamic expression])*/;
t0[31] = $$[](t0[27],"Test",$$[],)/*t0[31] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "Test", [dynamic expression], [dynamic expression])*/;
t0[32] = $$[](t0[27],"PerformTest",null,)/*t0[32] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "PerformTest", null, [dynamic expression])*/;
t0[33] = $$[](t0[27],"TestFailed",$$[],-1)/*t0[33] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "TestFailed", [dynamic expression], -1)*/;
t0[34] = $$[](t0[27],"Log",$$[],-1)/*t0[34] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "Log", [dynamic expression], -1)*/;
t0[35] = $$[](t0[27],"Assert",$$[],-1)/*t0[35] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "Assert", [dynamic expression], -1)*/;
t0[36] = $$[](t0[27],"Fail",$$[],-1)/*t0[36] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "Fail", [dynamic expression], -1)*/;
t0[37] = $$[](t0[27],"AssertEquals",$$[],-1)/*t0[37] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "AssertEquals", [dynamic expression], -1)*/;
t0[38] = $$[](t0[27],"AssertEquals",$$[],-1)/*t0[38] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "AssertEquals", [dynamic expression], -1)*/;
t0[39] = $$[](t0[27],"AssertEquals",$$[],-1)/*t0[39] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "AssertEquals", [dynamic expression], -1)*/;
t0[40] = $$[](t0[27],"AssertEquals",$$[],-1)/*t0[40] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[27], "AssertEquals", [dynamic expression], -1)*/;
t0[41] = $$[](t0[27],".ctor",$$[])/*t0[41] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[27], ".ctor", [dynamic expression])*/;
t0[42] = $$[](t0[27],"Name",t0[28],null)/*t0[42] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[27], "Name", t0[28], null)*/;
t0[43] = $$[](t0[27],"Passed",t0[29],null)/*t0[43] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[27], "Passed", t0[29], null)*/;
t0[44] = $$[](t0[27],"Exception",t0[30],null)/*t0[44] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[27], "Exception", t0[30], null)*/;
t0[45] = $$[]("XaeiOS.TestSuite.Tests","XmlHttpRequestTest",t0[0],,null,false,false)/*t0[45] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "XmlHttpRequestTest", t0[0], [dynamic expression], null, False, False)*/;
t0[46] = $$[](t0[45],"PerformTest",$$[],)/*t0[46] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[45], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[47] = $$[](t0[45],".ctor",$$[])/*t0[47] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[45], ".ctor", [dynamic expression])*/;
t0[48] = $$[]("XaeiOS.TestSuite.Tests","DictionaryRemoveSSABugTest",t0[0],,null,false,false)/*t0[48] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "DictionaryRemoveSSABugTest", t0[0], [dynamic expression], null, False, False)*/;
t0[49] = $$[](t0[48],"PerformTest",$$[],)/*t0[49] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[48], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[50] = $$[](t0[48],"Add",$$[],-1)/*t0[50] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[48], "Add", [dynamic expression], -1)*/;
t0[51] = $$[](t0[48],"Remove",$$[],-1)/*t0[51] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[48], "Remove", [dynamic expression], -1)*/;
t0[52] = $$[](t0[48],".ctor",$$[])/*t0[52] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[48], ".ctor", [dynamic expression])*/;
t0[53] = $$[]("XaeiOS.TestSuite.Tests","SingleThreadedPerformanceTest",t0[0],,null,false,false)/*t0[53] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "SingleThreadedPerformanceTest", t0[0], [dynamic expression], null, False, False)*/;
t0[54] = $$[](t0[53],"PerformTest",$$[],)/*t0[54] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[53], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[55] = $$[](t0[53],".ctor",$$[])/*t0[55] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[53], ".ctor", [dynamic expression])*/;
t0[56] = $$[]("XaeiOS.TestSuite.Tests","ThreadSleepTest",t0[0],,null,false,false)/*t0[56] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ThreadSleepTest", t0[0], [dynamic expression], null, False, False)*/;
t0[57] = $$[](t0[56],"PerformTest",$$[],)/*t0[57] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[56], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[58] = $$[](t0[56],".ctor",$$[])/*t0[58] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[56], ".ctor", [dynamic expression])*/;
t0[59] = $$[]("XaeiOS.TestSuite.Tests","AlertHelloWorldTest",t0[0],,null,false,false)/*t0[59] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "AlertHelloWorldTest", t0[0], [dynamic expression], null, False, False)*/;
t0[60] = $$[](t0[59],"PerformTest",$$[],)/*t0[60] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[59], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[61] = $$[](t0[59],"Alert",$$[],-1)/*t0[61] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[59], "Alert", [dynamic expression], -1)*/;
t0[62] = $$[]("System.Runtime.InteropServices","IntrinsicAttribute",t0[0],,null,false,false)/*t0[62] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System.Runtime.InteropServices", "IntrinsicAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[63] = $$[](t0[62],"get_UseGlobalNamespace",$$[],-1)/*t0[63] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "get_UseGlobalNamespace", [dynamic expression], -1)*/;
t0[64] = $$[](t0[62],"set_UseGlobalNamespace",$$[],-1)/*t0[64] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "set_UseGlobalNamespace", [dynamic expression], -1)*/;
t0[65] = $$[](t0[62],"get_SetVTable",$$[],-1)/*t0[65] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "get_SetVTable", [dynamic expression], -1)*/;
t0[66] = $$[](t0[62],"set_SetVTable",$$[],-1)/*t0[66] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "set_SetVTable", [dynamic expression], -1)*/;
t0[67] = $$[](t0[62],"get_Name",$$[],-1)/*t0[67] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "get_Name", [dynamic expression], -1)*/;
t0[68] = $$[](t0[62],"set_Name",$$[],-1)/*t0[68] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[62], "set_Name", [dynamic expression], -1)*/;
t0[69] = $$[](t0[62],".ctor",$$[])/*t0[69] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[62], ".ctor", [dynamic expression])*/;
t0[70] = $$[](t0[62],".ctor",$$[])/*t0[70] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[62], ".ctor", [dynamic expression])*/;
t0[71] = $$[](t0[62],"UseGlobalNamespace",t0[63],t0[64])/*t0[71] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[62], "UseGlobalNamespace", t0[63], t0[64])*/;
t0[72] = $$[](t0[62],"SetVTable",t0[65],t0[66])/*t0[72] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[62], "SetVTable", t0[65], t0[66])*/;
t0[73] = $$[](t0[62],"Name",t0[67],t0[68])/*t0[73] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[62], "Name", t0[67], t0[68])*/;
$$[](t0[62],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[62], [dynamic expression])*/;
$$[](t0[61],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[61], [dynamic expression])*/;
t0[74] = $$[](t0[59],".ctor",$$[])/*t0[74] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[59], ".ctor", [dynamic expression])*/;
t0[75] = $$[]("XaeiOS.TestSuite","Assert",t0[0],,null,false,false)/*t0[75] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "Assert", t0[0], [dynamic expression], null, False, False)*/;
t0[76] = $$[](t0[75],"AssertTrue",$$[],-1)/*t0[76] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertTrue", [dynamic expression], -1)*/;
t0[77] = $$[](t0[75],"Fail",$$[],-1)/*t0[77] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "Fail", [dynamic expression], -1)*/;
t0[78] = $$[](t0[75],"AssertEquals",$$[],-1)/*t0[78] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertEquals", [dynamic expression], -1)*/;
t0[79] = $$[](t0[75],"AssertEquals",$$[],-1)/*t0[79] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertEquals", [dynamic expression], -1)*/;
t0[80] = $$[](t0[75],"AssertEquals",$$[],-1)/*t0[80] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertEquals", [dynamic expression], -1)*/;
t0[81] = $$[](t0[75],"AssertEquals",$$[],-1)/*t0[81] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertEquals", [dynamic expression], -1)*/;
t0[82] = $$[](t0[75],"AssertNotNull",$$[],-1)/*t0[82] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[75], "AssertNotNull", [dynamic expression], -1)*/;
t0[83] = $$[]("XaeiOS.TestSuite.Tests","EventTest",t0[0],,null,false,false)/*t0[83] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "EventTest", t0[0], [dynamic expression], null, False, False)*/;
t0[84] = $$[](t0[83],"add_MyEvent",$$[],-1)/*t0[84] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "add_MyEvent", [dynamic expression], -1)*/;
t0[85] = $$[](t0[83],"remove_MyEvent",$$[],-1)/*t0[85] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "remove_MyEvent", [dynamic expression], -1)*/;
t0[86] = $$[](t0[83],"add_NullEvent",$$[],-1)/*t0[86] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "add_NullEvent", [dynamic expression], -1)*/;
t0[87] = $$[](t0[83],"remove_NullEvent",$$[],-1)/*t0[87] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "remove_NullEvent", [dynamic expression], -1)*/;
t0[88] = $$[](t0[83],"PerformTest",$$[],)/*t0[88] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[89] = $$[](t0[83],"EventTest_MyEvent3",$$[],-1)/*t0[89] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "EventTest_MyEvent3", [dynamic expression], -1)*/;
t0[90] = $$[](t0[83],"EventTest_MyEvent2",$$[],-1)/*t0[90] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "EventTest_MyEvent2", [dynamic expression], -1)*/;
t0[91] = $$[](t0[83],"EventTest_MyEvent",$$[],-1)/*t0[91] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[83], "EventTest_MyEvent", [dynamic expression], -1)*/;
t0[92] = $$[](t0[83],".ctor",$$[])/*t0[92] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[83], ".ctor", [dynamic expression])*/;
t0[93] = $$[]("XaeiOS.TestSuite","TestSuite",t0[0],,null,false,false)/*t0[93] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "TestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[94] = $$[](t0[93],"Assert",$$[],-1)/*t0[94] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "Assert", [dynamic expression], -1)*/;
t0[95] = $$[](t0[93],"Fail",$$[],-1)/*t0[95] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "Fail", [dynamic expression], -1)*/;
t0[96] = $$[](t0[93],"AssertEquals",$$[],-1)/*t0[96] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "AssertEquals", [dynamic expression], -1)*/;
t0[97] = $$[](t0[93],"AssertEquals",$$[],-1)/*t0[97] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "AssertEquals", [dynamic expression], -1)*/;
t0[98] = $$[](t0[93],"AssertEquals",$$[],-1)/*t0[98] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "AssertEquals", [dynamic expression], -1)*/;
t0[99] = $$[](t0[93],"AssertEquals",$$[],-1)/*t0[99] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "AssertEquals", [dynamic expression], -1)*/;
t0[100] = $$[](t0[93],"AssertNotNull",$$[],-1)/*t0[100] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "AssertNotNull", [dynamic expression], -1)*/;
t0[101] = $$[](t0[93],"get_Name",$$[],)/*t0[101] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "get_Name", [dynamic expression], [dynamic expression])*/;
$$[](t0[101],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[101], [dynamic expression])*/;
t0[102] = $$[](t0[93],"set_Name",$$[],-1)/*t0[102] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "set_Name", [dynamic expression], -1)*/;
$$[](t0[102],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[102], [dynamic expression])*/;
t0[103] = $$[](t0[93],"get_Passed",$$[],)/*t0[103] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "get_Passed", [dynamic expression], [dynamic expression])*/;
$$[](t0[103],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[103], [dynamic expression])*/;
t0[104] = $$[](t0[93],"set_Passed",$$[],-1)/*t0[104] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "set_Passed", [dynamic expression], -1)*/;
$$[](t0[104],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[104], [dynamic expression])*/;
t0[105] = $$[](t0[93],"get_Exception",$$[],)/*t0[105] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "get_Exception", [dynamic expression], [dynamic expression])*/;
$$[](t0[105],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[105], [dynamic expression])*/;
t0[106] = $$[](t0[93],"set_Exception",$$[],-1)/*t0[106] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "set_Exception", [dynamic expression], -1)*/;
$$[](t0[106],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[106], [dynamic expression])*/;
t0[107] = $$[](t0[93],"Test",$$[],)/*t0[107] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "Test", [dynamic expression], [dynamic expression])*/;
t0[108] = $$[](t0[93],"GetTestCases",$$[],-1)/*t0[108] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "GetTestCases", [dynamic expression], -1)*/;
t0[109] = $$[](t0[93],"Log",$$[],-1)/*t0[109] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "Log", [dynamic expression], -1)*/;
t0[110] = $$[](t0[93],"Setup",$$[],)/*t0[110] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "Setup", [dynamic expression], [dynamic expression])*/;
t0[111] = $$[](t0[93],"TearDown",$$[],)/*t0[111] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[93], "TearDown", [dynamic expression], [dynamic expression])*/;
t0[112] = $$[](t0[93],".ctor",$$[])/*t0[112] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[93], ".ctor", [dynamic expression])*/;
t0[113] = $$[](t0[93],"Name",t0[101],t0[102])/*t0[113] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[93], "Name", t0[101], t0[102])*/;
t0[114] = $$[](t0[93],"Passed",t0[103],t0[104])/*t0[114] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[93], "Passed", t0[103], t0[104])*/;
t0[115] = $$[](t0[93],"Exception",t0[105],t0[106])/*t0[115] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[93], "Exception", t0[105], t0[106])*/;
t0[116] = $$[]("XaeiOS.TestSuite.Tests","CompilerBugsTestSuite",t0[0],,null,false,false)/*t0[116] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "CompilerBugsTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[117] = $$[](t0[116],"TestMethodInliningBreaksLoops",$$[],-1)/*t0[117] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "TestMethodInliningBreaksLoops", [dynamic expression], -1)*/;
t0[118] = $$[]("XaeiOS.TestSuite","TestAttribute",t0[0],,null,false,false)/*t0[118] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "TestAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[119] = $$[](t0[118],".ctor",$$[])/*t0[119] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[118], ".ctor", [dynamic expression])*/;
t0[120] = $$[]("System","AttributeUsageAttribute",t0[0],,null,false,false)/*t0[120] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("System", "AttributeUsageAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[121] = $$[](t0[120],"get_AllowMultiple",$$[],-1)/*t0[121] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[120], "get_AllowMultiple", [dynamic expression], -1)*/;
t0[122] = $$[](t0[120],"set_AllowMultiple",$$[],-1)/*t0[122] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[120], "set_AllowMultiple", [dynamic expression], -1)*/;
t0[123] = $$[](t0[120],"get_Inherited",$$[],-1)/*t0[123] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[120], "get_Inherited", [dynamic expression], -1)*/;
t0[124] = $$[](t0[120],"set_Inherited",$$[],-1)/*t0[124] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[120], "set_Inherited", [dynamic expression], -1)*/;
t0[125] = $$[](t0[120],"get_ValidOn",$$[],-1)/*t0[125] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[120], "get_ValidOn", [dynamic expression], -1)*/;
t0[126] = $$[](t0[120],".ctor",$$[])/*t0[126] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[120], ".ctor", [dynamic expression])*/;
t0[127] = $$[](t0[120],".ctor",$$[])/*t0[127] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[120], ".ctor", [dynamic expression])*/;
t0[128] = $$[](t0[120],".cctor",$$[])/*t0[128] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[120], ".cctor", [dynamic expression])*/;
t0[129] = $$[](t0[120],"AllowMultiple",t0[121],t0[122])/*t0[129] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[120], "AllowMultiple", t0[121], t0[122])*/;
t0[130] = $$[](t0[120],"Inherited",t0[123],t0[124])/*t0[130] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[120], "Inherited", t0[123], t0[124])*/;
t0[131] = $$[](t0[120],"ValidOn",t0[125],null)/*t0[131] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[120], "ValidOn", t0[125], null)*/;
$$[](t0[120],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[120], [dynamic expression])*/;
$$[](t0[118],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[118], [dynamic expression])*/;
$$[](t0[117],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[117], [dynamic expression])*/;
t0[132] = $$[](t0[116],"CompareInts",$$[],-1)/*t0[132] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "CompareInts", [dynamic expression], -1)*/;
t0[133] = $$[](t0[116],"GetPivotPoint",$$[],-1)/*t0[133] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "GetPivotPoint", [dynamic expression], -1)*/;
t0[134] = $$[](t0[116],"GreaterThanOrEqualTo",$$[],-1)/*t0[134] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "GreaterThanOrEqualTo", [dynamic expression], -1)*/;
t0[135] = $$[](t0[116],"LessThanOrEqualTo",$$[],-1)/*t0[135] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "LessThanOrEqualTo", [dynamic expression], -1)*/;
t0[136] = $$[](t0[116],"GetPivotPoint2",$$[],-1)/*t0[136] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[116], "GetPivotPoint2", [dynamic expression], -1)*/;
t0[137] = $$[](t0[116],".ctor",$$[])/*t0[137] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[116], ".ctor", [dynamic expression])*/;
t0[138] = $$[]("XaeiOS.TestSuite.Tests","CompilerFlowControlTest",t0[0],,null,false,false)/*t0[138] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "CompilerFlowControlTest", t0[0], [dynamic expression], null, False, False)*/;
t0[139] = $$[](t0[138],"PerformTest",$$[],)/*t0[139] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[138], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[140] = $$[](t0[138],"TestScore",$$[],-1)/*t0[140] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[138], "TestScore", [dynamic expression], -1)*/;
t0[141] = $$[](t0[138],".ctor",$$[])/*t0[141] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[138], ".ctor", [dynamic expression])*/;
t0[142] = $$[]("XaeiOS.TestSuite.Tests","MultiThreadingTest",t0[0],,null,false,false)/*t0[142] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "MultiThreadingTest", t0[0], [dynamic expression], null, False, False)*/;
t0[143] = $$[](t0[142],"PerformTest",$$[],)/*t0[143] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[142], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[144] = $$[](t0[142],"ThreadOneStart",$$[],-1)/*t0[144] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[142], "ThreadOneStart", [dynamic expression], -1)*/;
t0[145] = $$[](t0[142],"ThreadTwoStart",$$[],-1)/*t0[145] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[142], "ThreadTwoStart", [dynamic expression], -1)*/;
t0[146] = $$[](t0[142],".ctor",$$[])/*t0[146] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[142], ".ctor", [dynamic expression])*/;
t0[147] = $$[]("XaeiOS.TestSuite.Tests","ReflectionTestSuite",t0[0],,null,false,false)/*t0[147] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ReflectionTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[148] = $$[](t0[147],"TestGetTypeByName",$$[],-1)/*t0[148] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestGetTypeByName", [dynamic expression], -1)*/;
$$[](t0[148],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[148], [dynamic expression])*/;
t0[149] = $$[](t0[147],"TestGetType",$$[],-1)/*t0[149] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestGetType", [dynamic expression], -1)*/;
$$[](t0[149],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[149], [dynamic expression])*/;
t0[150] = $$[](t0[147],"TestGetMethods",$$[],-1)/*t0[150] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestGetMethods", [dynamic expression], -1)*/;
$$[](t0[150],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[150], [dynamic expression])*/;
t0[151] = $$[](t0[147],"TestGetProperties",$$[],-1)/*t0[151] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestGetProperties", [dynamic expression], -1)*/;
$$[](t0[151],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[151], [dynamic expression])*/;
t0[152] = $$[](t0[147],"TestSetProperty",$$[],-1)/*t0[152] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestSetProperty", [dynamic expression], -1)*/;
$$[](t0[152],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[152], [dynamic expression])*/;
t0[153] = $$[](t0[147],"TestIsDefinedOnType",$$[],-1)/*t0[153] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestIsDefinedOnType", [dynamic expression], -1)*/;
$$[](t0[153],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[153], [dynamic expression])*/;
t0[154] = $$[](t0[147],"TestActivator",$$[],-1)/*t0[154] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "TestActivator", [dynamic expression], -1)*/;
$$[](t0[154],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[154], [dynamic expression])*/;
t0[155] = $$[](t0[147],"get_MyProperty",$$[],-1)/*t0[155] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "get_MyProperty", [dynamic expression], -1)*/;
$$[](t0[155],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[155], [dynamic expression])*/;
t0[156] = $$[](t0[147],"set_MyProperty",$$[],-1)/*t0[156] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[147], "set_MyProperty", [dynamic expression], -1)*/;
$$[](t0[156],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[156], [dynamic expression])*/;
t0[157] = $$[](t0[147],".ctor",$$[])/*t0[157] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[147], ".ctor", [dynamic expression])*/;
t0[158] = $$[](t0[147],"MyProperty",t0[155],t0[156])/*t0[158] = System.Runtime.CompilerServices.RuntimeHelpers::CreateProperty(t0[147], "MyProperty", t0[155], t0[156])*/;
t0[159] = $$[]("","ReflectionTestAttribute",t0[0],,null,false,false)/*t0[159] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "ReflectionTestAttribute", t0[0], [dynamic expression], null, False, False)*/;
t0[160] = $$[](t0[159],".ctor",$$[])/*t0[160] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[159], ".ctor", [dynamic expression])*/;
$$[](t0[147],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[147], [dynamic expression])*/;
t0[161] = $$[]("XaeiOS.TestSuite.Tests","ExceptionHandlingTestSuite",t0[0],,null,false,false)/*t0[161] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ExceptionHandlingTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[162] = $$[](t0[161],"TestExceptionTypeHandlers",$$[],-1)/*t0[162] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestExceptionTypeHandlers", [dynamic expression], -1)*/;
$$[](t0[162],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[162], [dynamic expression])*/;
t0[163] = $$[](t0[161],"TestExceptionTypeHandlers2",$$[],-1)/*t0[163] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestExceptionTypeHandlers2", [dynamic expression], -1)*/;
$$[](t0[163],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[163], [dynamic expression])*/;
t0[164] = $$[](t0[161],"FirstTest",$$[],-1)/*t0[164] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "FirstTest", [dynamic expression], -1)*/;
$$[](t0[164],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[164], [dynamic expression])*/;
t0[165] = $$[](t0[161],"SecondTest",$$[],-1)/*t0[165] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "SecondTest", [dynamic expression], -1)*/;
$$[](t0[165],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[165], [dynamic expression])*/;
t0[166] = $$[](t0[161],"SecondTestHelper",$$[],-1)/*t0[166] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "SecondTestHelper", [dynamic expression], -1)*/;
t0[167] = $$[](t0[161],"TestBasicTryCatchFinally",$$[],-1)/*t0[167] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestBasicTryCatchFinally", [dynamic expression], -1)*/;
$$[](t0[167],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[167], [dynamic expression])*/;
t0[168] = $$[](t0[161],"TestBasicTryCatchFinallyThrowException",$$[],-1)/*t0[168] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestBasicTryCatchFinallyThrowException", [dynamic expression], -1)*/;
$$[](t0[168],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[168], [dynamic expression])*/;
t0[169] = $$[](t0[161],"TestBasicNestedTryCatchFinally",$$[],-1)/*t0[169] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestBasicNestedTryCatchFinally", [dynamic expression], -1)*/;
$$[](t0[169],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[169], [dynamic expression])*/;
t0[170] = $$[](t0[161],"TestComplexNestedTryCatchFinally",$$[],-1)/*t0[170] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestComplexNestedTryCatchFinally", [dynamic expression], -1)*/;
$$[](t0[170],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[170], [dynamic expression])*/;
t0[171] = $$[](t0[161],"TestFinallyExecutesAfterCatchBlockThrows",$$[],-1)/*t0[171] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestFinallyExecutesAfterCatchBlockThrows", [dynamic expression], -1)*/;
$$[](t0[171],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[171], [dynamic expression])*/;
t0[172] = $$[](t0[161],"TestFinallyExecutesAfterCatchBlockThrows2",$$[],-1)/*t0[172] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[161], "TestFinallyExecutesAfterCatchBlockThrows2", [dynamic expression], -1)*/;
$$[](t0[172],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[172], [dynamic expression])*/;
t0[173] = $$[](t0[161],".ctor",$$[])/*t0[173] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[161], ".ctor", [dynamic expression])*/;
t0[174] = $$[]("XaeiOS.TestSuite.Tests","NullReferenceExceptionTest",t0[0],,null,false,false)/*t0[174] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "NullReferenceExceptionTest", t0[0], [dynamic expression], null, False, False)*/;
t0[175] = $$[](t0[174],"PerformTest",$$[],)/*t0[175] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[174], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[176] = $$[](t0[174],".ctor",$$[])/*t0[176] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[174], ".ctor", [dynamic expression])*/;
t0[177] = $$[]("XaeiOS.TestSuite.Tests","SynchronizationTest",t0[0],,null,false,false)/*t0[177] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "SynchronizationTest", t0[0], [dynamic expression], null, False, False)*/;
t0[178] = $$[](t0[177],"PerformTest",$$[],)/*t0[178] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[177], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[179] = $$[](t0[177],"ControllerThreadStart",$$[],-1)/*t0[179] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[177], "ControllerThreadStart", [dynamic expression], -1)*/;
t0[180] = $$[](t0[177],".ctor",$$[])/*t0[180] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[177], ".ctor", [dynamic expression])*/;
t0[181] = $$[]("XaeiOS.TestSuite.Tests","DomTest",t0[0],,null,false,false)/*t0[181] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "DomTest", t0[0], [dynamic expression], null, False, False)*/;
t0[182] = $$[](t0[181],"PerformTest",$$[],)/*t0[182] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[181], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[183] = $$[](t0[181],"MoveElement",$$[],-1)/*t0[183] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[181], "MoveElement", [dynamic expression], -1)*/;
t0[184] = $$[](t0[181],".ctor",$$[])/*t0[184] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[181], ".ctor", [dynamic expression])*/;
t0[185] = $$[]("XaeiOS.TestSuite.Tests","ResourceTest",t0[0],,null,false,false)/*t0[185] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ResourceTest", t0[0], [dynamic expression], null, False, False)*/;
t0[186] = $$[](t0[185],"PerformTest",$$[],)/*t0[186] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[185], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[187] = $$[](t0[185],".ctor",$$[])/*t0[187] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[185], ".ctor", [dynamic expression])*/;
t0[188] = $$[]("XaeiOS.TestSuite.Tests","DomElementResource",t0[0],,null,false,false)/*t0[188] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "DomElementResource", t0[0], [dynamic expression], null, False, False)*/;
t0[189] = $$[](t0[188],"Dispose",$$[],)/*t0[189] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[188], "Dispose", [dynamic expression], [dynamic expression])*/;
t0[190] = $$[](t0[188],"ToString",$$[],)/*t0[190] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[188], "ToString", [dynamic expression], [dynamic expression])*/;
t0[191] = $$[](t0[188],".ctor",$$[])/*t0[191] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[188], ".ctor", [dynamic expression])*/;
t0[192] = $$[]("XaeiOS.TestSuite.Tests","ClassStructureTestSuite",t0[0],,null,false,false)/*t0[192] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ClassStructureTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[193] = $$[](t0[192],"TestOverrideInterfaceMethodOfAbstractBaseClass",$$[],-1)/*t0[193] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[192], "TestOverrideInterfaceMethodOfAbstractBaseClass", [dynamic expression], -1)*/;
$$[](t0[193],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[193], [dynamic expression])*/;
t0[194] = $$[](t0[192],"TestStaticConstructorsWorked",$$[],-1)/*t0[194] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[192], "TestStaticConstructorsWorked", [dynamic expression], -1)*/;
$$[](t0[194],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[194], [dynamic expression])*/;
t0[195] = $$[](t0[192],".ctor",$$[])/*t0[195] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[192], ".ctor", [dynamic expression])*/;
t0[196] = $$[]("","IAdder",t0[0],,null,true,false)/*t0[196] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "IAdder", t0[0], [dynamic expression], null, True, False)*/;
t0[197] = $$[](t0[196],"AddTen",null,)/*t0[197] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[196], "AddTen", null, [dynamic expression])*/;
t0[198] = $$[]("","AdderBase",t0[0],,null,false,false)/*t0[198] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "AdderBase", t0[0], [dynamic expression], null, False, False)*/;
t0[199] = $$[](t0[198],"AddTen",null,)/*t0[199] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[198], "AddTen", null, [dynamic expression])*/;
t0[200] = $$[](t0[198],".ctor",$$[])/*t0[200] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[198], ".ctor", [dynamic expression])*/;
t0[201] = $$[]("","RegularAdder",t0[0],,null,false,false)/*t0[201] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "RegularAdder", t0[0], [dynamic expression], null, False, False)*/;
t0[202] = $$[](t0[201],"AddTen",$$[],)/*t0[202] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[201], "AddTen", [dynamic expression], [dynamic expression])*/;
t0[203] = $$[](t0[201],".ctor",$$[])/*t0[203] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[201], ".ctor", [dynamic expression])*/;
t0[204] = $$[]("","StaticConstructorClass1",t0[0],,null,false,false)/*t0[204] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "StaticConstructorClass1", t0[0], [dynamic expression], null, False, False)*/;
t0[205] = $$[](t0[204],".cctor",$$[])/*t0[205] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[204], ".cctor", [dynamic expression])*/;
t0[206] = $$[](t0[204],".ctor",$$[])/*t0[206] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[204], ".ctor", [dynamic expression])*/;
t0[207] = $$[]("","StaticConstructorClass2",t0[0],,null,false,false)/*t0[207] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "StaticConstructorClass2", t0[0], [dynamic expression], null, False, False)*/;
t0[208] = $$[](t0[207],".cctor",$$[])/*t0[208] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[207], ".cctor", [dynamic expression])*/;
t0[209] = $$[](t0[207],".ctor",$$[])/*t0[209] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[207], ".ctor", [dynamic expression])*/;
t0[210] = $$[]("XaeiOS.TestSuite.Tests","MultiThreadingStressTest",t0[0],,null,false,false)/*t0[210] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "MultiThreadingStressTest", t0[0], [dynamic expression], null, False, False)*/;
t0[211] = $$[](t0[210],"PerformTest",$$[],)/*t0[211] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[210], "PerformTest", [dynamic expression], [dynamic expression])*/;
t0[212] = $$[](t0[210],"ThreadStarted",$$[],-1)/*t0[212] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[210], "ThreadStarted", [dynamic expression], -1)*/;
t0[213] = $$[](t0[210],"Work",$$[],-1)/*t0[213] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[210], "Work", [dynamic expression], -1)*/;
t0[214] = $$[](t0[210],"ThreadFinished",$$[],-1)/*t0[214] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[210], "ThreadFinished", [dynamic expression], -1)*/;
t0[215] = $$[](t0[210],".ctor",$$[])/*t0[215] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[210], ".ctor", [dynamic expression])*/;
t0[216] = $$[]("XaeiOS.TestSuite","QuickSortTestSuite",t0[0],,null,false,false)/*t0[216] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "QuickSortTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[217] = $$[](t0[216],"TestQuickSort",$$[],-1)/*t0[217] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "TestQuickSort", [dynamic expression], -1)*/;
$$[](t0[217],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[217], [dynamic expression])*/;
t0[218] = $$[](t0[216],"CompareInts",$$[],-1)/*t0[218] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "CompareInts", [dynamic expression], -1)*/;
t0[219] = $$[](t0[216],"Sort",$$[],-1)/*t0[219] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "Sort", [dynamic expression], -1)*/;
t0[220] = $$[](t0[216],"GetPivotPoint",$$[],-1)/*t0[220] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "GetPivotPoint", [dynamic expression], -1)*/;
t0[221] = $$[](t0[216],"Sorting",$$[],-1)/*t0[221] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "Sorting", [dynamic expression], -1)*/;
t0[222] = $$[](t0[216],"GreaterThanOrEqualTo",$$[],-1)/*t0[222] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "GreaterThanOrEqualTo", [dynamic expression], -1)*/;
t0[223] = $$[](t0[216],"LessThanOrEqualTo",$$[],-1)/*t0[223] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[216], "LessThanOrEqualTo", [dynamic expression], -1)*/;
t0[224] = $$[](t0[216],".ctor",$$[])/*t0[224] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[216], ".ctor", [dynamic expression])*/;
t0[225] = $$[]("XaeiOS.TestSuite","Comparison`1",t0[0],,null,false,false)/*t0[225] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite", "Comparison`1", t0[0], [dynamic expression], null, False, False)*/;
t0[226] = $$[](t0[225],"Invoke",null,)/*t0[226] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[225], "Invoke", null, [dynamic expression])*/;
t0[227] = $$[](t0[225],"BeginInvoke",null,)/*t0[227] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[225], "BeginInvoke", null, [dynamic expression])*/;
t0[228] = $$[](t0[225],"EndInvoke",null,)/*t0[228] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[225], "EndInvoke", null, [dynamic expression])*/;
t0[229] = $$[](t0[225],".ctor",null)/*t0[229] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[225], ".ctor", null)*/;
t0[230] = $$[]("XaeiOS.TestSuite.Tests","ThreadingTestSuite",t0[0],,null,false,false)/*t0[230] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("XaeiOS.TestSuite.Tests", "ThreadingTestSuite", t0[0], [dynamic expression], null, False, False)*/;
t0[231] = $$[](t0[230],"TestAbortThread",$$[],-1)/*t0[231] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "TestAbortThread", [dynamic expression], -1)*/;
$$[](t0[231],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[231], [dynamic expression])*/;
t0[232] = $$[](t0[230],"TestAbortThreadWithState",$$[],-1)/*t0[232] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "TestAbortThreadWithState", [dynamic expression], -1)*/;
$$[](t0[232],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[232], [dynamic expression])*/;
t0[233] = $$[](t0[230],"TestLockIdiom",$$[],-1)/*t0[233] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "TestLockIdiom", [dynamic expression], -1)*/;
$$[](t0[233],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[233], [dynamic expression])*/;
t0[234] = $$[](t0[230],"BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown",$$[],-1)/*t0[234] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown", [dynamic expression], -1)*/;
$$[](t0[234],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[234], [dynamic expression])*/;
t0[235] = $$[](t0[230],"TestLockIdiomUnlocksWhenExceptionsAreThrown",$$[],-1)/*t0[235] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "TestLockIdiomUnlocksWhenExceptionsAreThrown", [dynamic expression], -1)*/;
$$[](t0[235],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[235], [dynamic expression])*/;
t0[236] = $$[](t0[230],"TestManualResetEvent",$$[],-1)/*t0[236] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "TestManualResetEvent", [dynamic expression], -1)*/;
$$[](t0[236],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[236], [dynamic expression])*/;
t0[237] = $$[](t0[230],"<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9",$$[],-1)/*t0[237] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[230], "<TestLockIdiomUnlocksWhenExceptionsAreThrown>b__9", [dynamic expression], -1)*/;
$$[](t0[237],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[237], [dynamic expression])*/;
t0[238] = $$[](t0[230],".ctor",$$[])/*t0[238] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[230], ".ctor", [dynamic expression])*/;
t0[239] = $$[]("","PurposefullyThrownException",t0[0],,null,false,false)/*t0[239] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "PurposefullyThrownException", t0[0], [dynamic expression], null, False, False)*/;
t0[240] = $$[](t0[239],".ctor",$$[])/*t0[240] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[239], ".ctor", [dynamic expression])*/;
t0[241] = $$[]("","<>c__DisplayClass1",t0[0],,null,false,false)/*t0[241] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass1", t0[0], [dynamic expression], null, False, False)*/;
t0[242] = $$[](t0[241],"<TestMethodInliningBreaksLoops>b__0",$$[],-1)/*t0[242] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[241], "<TestMethodInliningBreaksLoops>b__0", [dynamic expression], -1)*/;
t0[243] = $$[](t0[241],".ctor",$$[])/*t0[243] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[241], ".ctor", [dynamic expression])*/;
$$[](t0[241],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[241], [dynamic expression])*/;
t0[244] = $$[]("","<>c__DisplayClass1",t0[0],,null,false,false)/*t0[244] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass1", t0[0], [dynamic expression], null, False, False)*/;
t0[245] = $$[](t0[244],".ctor",$$[])/*t0[245] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[244], ".ctor", [dynamic expression])*/;
$$[](t0[244],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[244], [dynamic expression])*/;
t0[246] = $$[]("","<>c__DisplayClass3",t0[0],,null,false,false)/*t0[246] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass3", t0[0], [dynamic expression], null, False, False)*/;
t0[247] = $$[](t0[246],"<PerformTest>b__0",$$[],-1)/*t0[247] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[246], "<PerformTest>b__0", [dynamic expression], -1)*/;
t0[248] = $$[](t0[246],".ctor",$$[])/*t0[248] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[246], ".ctor", [dynamic expression])*/;
$$[](t0[246],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[246], [dynamic expression])*/;
t0[249] = $$[]("","<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}",t0[0],,null,false,false)/*t0[249] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<PrivateImplementationDetails>{59F599C2-2211-4D0E-AFBE-9F97B4629EE7}", t0[0], [dynamic expression], null, False, False)*/;
$$[](t0[249],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[249], [dynamic expression])*/;
t0[250] = $$[]("","__StaticArrayInitTypeSize=24",t0[0],,null,false,false)/*t0[250] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "__StaticArrayInitTypeSize=24", t0[0], [dynamic expression], null, False, False)*/;
t0[251] = $$[]("","<>c__DisplayClass1",t0[0],,null,false,false)/*t0[251] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass1", t0[0], [dynamic expression], null, False, False)*/;
t0[252] = $$[](t0[251],"<TestAbortThread>b__0",$$[],-1)/*t0[252] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[251], "<TestAbortThread>b__0", [dynamic expression], -1)*/;
t0[253] = $$[](t0[251],".ctor",$$[])/*t0[253] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[251], ".ctor", [dynamic expression])*/;
$$[](t0[251],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[251], [dynamic expression])*/;
t0[254] = $$[]("","<>c__DisplayClass4",t0[0],,null,false,false)/*t0[254] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass4", t0[0], [dynamic expression], null, False, False)*/;
t0[255] = $$[](t0[254],"<TestAbortThreadWithState>b__3",$$[],-1)/*t0[255] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[254], "<TestAbortThreadWithState>b__3", [dynamic expression], -1)*/;
t0[256] = $$[](t0[254],".ctor",$$[])/*t0[256] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[254], ".ctor", [dynamic expression])*/;
$$[](t0[254],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[254], [dynamic expression])*/;
t0[257] = $$[]("","<>c__DisplayClass7",t0[0],,null,false,false)/*t0[257] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClass7", t0[0], [dynamic expression], null, False, False)*/;
t0[258] = $$[](t0[257],"<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6",$$[],-1)/*t0[258] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[257], "<BrokenTestLockIdiomUnlocksWhenExceptionsAreThrown>b__6", [dynamic expression], -1)*/;
t0[259] = $$[](t0[257],".ctor",$$[])/*t0[259] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[257], ".ctor", [dynamic expression])*/;
$$[](t0[257],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[257], [dynamic expression])*/;
t0[260] = $$[]("","<>c__DisplayClassb",t0[0],,null,false,false)/*t0[260] = System.Runtime.CompilerServices.RuntimeHelpers::CreateClass("", "<>c__DisplayClassb", t0[0], [dynamic expression], null, False, False)*/;
t0[261] = $$[](t0[260],"<TestManualResetEvent>b__a",$$[],-1)/*t0[261] = System.Runtime.CompilerServices.RuntimeHelpers::CreateMethod(t0[260], "<TestManualResetEvent>b__a", [dynamic expression], -1)*/;
t0[262] = $$[](t0[260],".ctor",$$[])/*t0[262] = System.Runtime.CompilerServices.RuntimeHelpers::CreateConstructor(t0[260], ".ctor", [dynamic expression])*/;
$$[](t0[260],$$[].m)/*System.Runtime.CompilerServices.RuntimeHelpers::CreateCustomAttribute(t0[260], [dynamic expression])*/;
]]></Initialization></Object>